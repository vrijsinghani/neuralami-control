This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-21T14:28:32.332Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
seo_manager/
  static/
    seo_manager/
      js/
        client_detail.js
        meta_tags_dashboard.js
        ranking_data_management.js
  templates/
    seo_manager/
      credentials/
        add_ga_service_account.html
        add_sc_service_account.html
        select_analytics_account.html
      includes/
        activity_items.html
        keyword_import_modals.html
        keyword_modals.html
        objective_modals.html
      keywords/
        keyword_list_table.html
        keyword_list.html
        ranking_history.html
        search_console_keywords.html
      meta_tags/
        meta_tags_dashboard.html
      projects/
        edit_project.html
        project_detail.html
        project_list_table.html
        project_list.html
      reports/
        monthly_report.html
      activity_log.html
      add_client.html
      add_ga_credentials_service_account.html
      add_sc_credentials_service_account.html
      base.html
      client_analytics.html
      client_detail.html
      client_form.html
      client_integrations.html
      client_list.html
      dashboard.html
      edit_business_objective.html
      edit_client.html
      input_view_id.html
      ranking_data_management.html
      select_analytics_account.html
      select_search_console_property.html
      select_search_console.html
      setup_service_account.html
  templatetags/
    __init__.py
    custom_filters.py
    form_tags.py
    seo_manager_filters.py
    seo_tags.py
  utils/
    meta_tags_analyzer.py
  views/
    __init__.py
    activity_views.py
    analytics_views.py
    auth_views.py
    business_objective_views.py
    client_views.py
    keyword_views.py
    meta_tags_views.py
    project_views.py
    ranking_views.py
    report_views.py
    search_console_views.py
  admin.py
  apps.py
  exceptions.py
  forms.py
  google_auth.py
  middleware.py
  models.py
  services.py
  sitemap_extractor.py
  urls.py
  utils.py
  views_analytics.py
  views_summarizer.py
  views.py

================================================================
Repository Files
================================================================

================
File: seo_manager/static/seo_manager/js/client_detail.js
================
document.addEventListener('DOMContentLoaded', function() {
    const { clientId, urls, keywords } = window.clientData;

    // Initialize keyword charts
    keywords.forEach(keyword => {
        initializeKeywordChart(keyword);
    });

    // Collect Rankings Button
    document.getElementById('collectRankingsBtn')?.addEventListener('click', function() {
        Swal.fire({
            title: 'Collecting Rankings Data',
            text: 'This may take a few minutes...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading()
            }
        });

        fetch(urls.collectRankings, {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: data.message
                }).then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.error
                });
            }
        });
    });

    // Generate Report Button
    document.getElementById('generateReportBtn')?.addEventListener('click', function() {
        Swal.fire({
            title: 'Generating Report',
            text: 'Please wait...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading()
            }
        });

        fetch(urls.generateReport, {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById('reportContent').innerHTML = data.report_html;
                var reportModal = new bootstrap.Modal(document.getElementById('reportModal'));
                Swal.close();
                reportModal.show();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.error
                });
            }
        });
    });

    // Backfill Rankings Button
    document.getElementById('backfillRankingsBtn')?.addEventListener('click', function() {
        Swal.fire({
            title: 'Backfill Historical Data',
            text: 'This will collect ranking data for the past 12 months. This may take several minutes. Continue?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, proceed',
            cancelButtonText: 'No, cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                handleBackfillRankings();
            }
        });
    });

    // Magically Fill In Button
    document.getElementById('magicallyFillBtn')?.addEventListener('click', handleMagicFill);

    // Initialize Quill editors
    initializeQuillEditors();

    // Delete Client Button
    document.getElementById('deleteClientBtn')?.addEventListener('click', handleDeleteClient);

    // View switching functionality
    initializeViewSwitching();

    // Activity Timeline Filtering
    initializeActivityFiltering();

    // Initialize DataTables
    initializeDataTables();

    // Initialize Search Console import functionality
    initializeSearchConsoleImport();

    // Initialize Create Snapshot button
    initializeCreateSnapshot();
});

// Helper Functions

function initializeKeywordChart(keyword) {
    const modalId = `view-history-${keyword.id}`;
    const canvasId = `keyword-chart-${keyword.id}`;
    const modal = document.getElementById(modalId);
    let currentChart = null;

    if (!modal) return;

    function recreateCanvas(containerId) {
        const container = document.getElementById(containerId);
        if (!container) return null;
        
        const oldCanvas = document.getElementById(canvasId);
        if (oldCanvas) {
            oldCanvas.remove();
        }
        
        const newCanvas = document.createElement('canvas');
        newCanvas.id = canvasId;
        container.appendChild(newCanvas);
        return newCanvas;
    }

    function destroyChart() {
        if (currentChart) {
            currentChart.destroy();
            currentChart = null;
        }
        Chart.helpers.each(Chart.instances, function(instance) {
            if (instance.canvas.id === canvasId) {
                instance.destroy();
            }
        });
    }

    modal.addEventListener('show.bs.modal', function() {
        destroyChart();
        
        const canvas = recreateCanvas(`chart-container-${keyword.id}`);
        if (!canvas) return;

        setTimeout(() => {
            currentChart = new Chart(canvas, {
                type: 'line',
                data: {
                    labels: keyword.history.map(entry => entry.date).reverse(),
                    datasets: [{
                        label: 'Position',
                        data: keyword.history.map(entry => entry.position).reverse(),
                        borderColor: '#5e72e4',
                        backgroundColor: 'rgba(94, 114, 228, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            reverse: true,
                            beginAtZero: false
                        }
                    }
                }
            });
        }, 0);
    });

    modal.addEventListener('hidden.bs.modal', destroyChart);
    window.addEventListener('unload', destroyChart);
}

function handleBackfillRankings() {
    const { urls } = window.clientData;

    Swal.fire({
        title: 'Collecting Historical Data',
        text: 'This may take several minutes...',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading()
        }
    });

    fetch(urls.backfillRankings, {
        method: 'POST',
        headers: {
            'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: data.message
            }).then(() => {
                window.location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.error
            });
        }
    })
    .catch(error => {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while collecting historical data.'
        });
    });
}

function handleMagicFill() {
    const { urls } = window.clientData;
    
    const swalInstance = Swal.fire({
        title: 'Generating Client Profile',
        html: 'This may take a few minutes...',
        timerProgressBar: true,
        allowOutsideClick: false,
        showCancelButton: true,
        cancelButtonText: 'Cancel',
        didOpen: () => {
            Swal.showLoading();
        }
    });

    const controller = new AbortController();
    const signal = controller.signal;

    fetch(urls.generateMagicProfile, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
        },
        signal: signal
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            pollTaskStatus(data.task_id);
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.error || 'Failed to start profile generation'
            });
        }
    })
    .catch(error => {
        if (error.name === 'AbortError') return;
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to generate profile'
        });
    });

    swalInstance.then((result) => {
        if (result.dismiss === Swal.DismissReason.cancel) {
            controller.abort();
            Swal.fire({
                icon: 'info',
                title: 'Cancelled',
                text: 'Profile generation was cancelled'
            });
        }
    });
}

function pollTaskStatus(taskId) {
    const { urls } = window.clientData;
    const toolStatusUrl = urls.getToolStatus.replace('TASK_ID', taskId);
    
    const pollInterval = setInterval(() => {
        fetch(toolStatusUrl)
            .then(response => response.json())
            .then(statusData => {
                if (statusData.status === 'SUCCESS') {
                    clearInterval(pollInterval);
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Profile generated successfully'
                    }).then(() => {
                        window.location.reload();
                    });
                } else if (statusData.status === 'FAILURE') {
                    clearInterval(pollInterval);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: statusData.error || 'Failed to generate profile'
                    });
                }
            })
            .catch(error => {
                clearInterval(pollInterval);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to check task status'
                });
            });
    }, 2000);
}

function initializeQuillEditors() {
    const toolbarOptions = [
        ['bold', 'italic', 'underline', 'strike'],
        ['blockquote', 'code-block'],
        [{ 'header': 1 }, { 'header': 2 }],
        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
        [{ 'script': 'sub'}, { 'script': 'super' }],
        [{ 'indent': '-1'}, { 'indent': '+1' }],
        ['link'],
        ['clean']
    ];

    // Add Profile Editor
    const addProfileContainer = document.getElementById('add-profile-editor');
    if (addProfileContainer) {
        const addProfileEditor = new Quill('#add-profile-editor', {
            theme: 'snow',
            modules: { toolbar: toolbarOptions },
            placeholder: 'Enter client profile content...',
            bounds: addProfileContainer
        });

        document.getElementById('addProfileForm')?.addEventListener('submit', function(e) {
            e.preventDefault();
            const content = addProfileEditor.root.innerHTML;
            if (!content || content.trim() === '<p><br></p>') {
                Swal.fire({
                    icon: 'warning',
                    title: 'Empty Content',
                    text: 'Please enter some content for the client profile.'
                });
                return;
            }
            
            document.getElementById('add-profile-content').value = content;
            
            // Show loading state
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Saving...';
            submitBtn.disabled = true;
            
            fetch(this.action, {
                method: 'POST',
                body: new FormData(this),
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Client profile saved successfully'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    throw new Error(data.error || 'Failed to save profile');
                }
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An error occurred while saving the profile'
                });
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            });
        });
    }

    // Edit Profile Editor
    const editProfileContainer = document.getElementById('edit-profile-editor');
    if (editProfileContainer) {
        const editProfileEditor = new Quill('#edit-profile-editor', {
            theme: 'snow',
            modules: { toolbar: toolbarOptions },
            placeholder: 'Enter client profile content...',
            bounds: editProfileContainer
        });

        document.getElementById('editProfileForm')?.addEventListener('submit', function(e) {
            e.preventDefault();
            const content = editProfileEditor.root.innerHTML;
            if (!content || content.trim() === '<p><br></p>') {
                Swal.fire({
                    icon: 'warning',
                    title: 'Empty Content',
                    text: 'Please enter some content for the client profile.'
                });
                return;
            }
            
            document.getElementById('edit-profile-content').value = content;
            
            // Show loading state
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Updating...';
            submitBtn.disabled = true;
            
            fetch(this.action, {
                method: 'POST',
                body: new FormData(this),
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Client profile updated successfully'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    throw new Error(data.error || 'Failed to update profile');
                }
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An error occurred while updating the profile'
                });
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            });
        });
    }
}

function handleDeleteClient() {
    const { urls } = window.clientData;
    const clientName = this.dataset.clientName;

    Swal.fire({
        title: 'Are you sure?',
        html: `You are about to delete client: <strong>${clientName}</strong><br>This action cannot be undone!`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel'
    }).then((result) => {
        if (result.isConfirmed) {
            deleteClientRequest();
        }
    });
}

function deleteClientRequest() {
    const { urls } = window.clientData;

    Swal.fire({
        title: 'Deleting...',
        html: 'Please wait',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading()
        }
    });

    fetch(urls.deleteClient, {
        method: 'POST',
        headers: {
            'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Deleted!',
                text: 'Client has been deleted successfully.',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.href = urls.clientList;
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.error || 'An error occurred while deleting the client.'
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while deleting the client.'
        });
    });
}

function initializeViewSwitching() {
    const listView = document.getElementById('projects-list-view');
    const kanbanView = document.getElementById('projects-kanban-view');
    const listViewBtn = document.getElementById('list-view');
    const kanbanViewBtn = document.getElementById('kanban-view');

    if (!listView || !kanbanView || !listViewBtn || !kanbanViewBtn) return;

    listViewBtn.addEventListener('change', function() {
        if (this.checked) {
            listView.style.display = 'block';
            kanbanView.style.display = 'none';
        }
    });

    kanbanViewBtn.addEventListener('change', function() {
        if (this.checked) {
            listView.style.display = 'none';
            kanbanView.style.display = 'block';
        }
    });
}

function initializeActivityFiltering() {
    const filterLinks = document.querySelectorAll('[data-filter]');
    const timelineBlocks = document.querySelectorAll('.timeline-block');
    
    filterLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            filterLinks.forEach(l => l.classList.remove('active'));
            this.classList.add('active');
            
            const filter = this.dataset.filter;
            
            timelineBlocks.forEach(block => {
                if (filter === 'all' || block.dataset.category === filter) {
                    block.style.display = 'flex';
                    block.style.opacity = '1';
                } else {
                    block.style.display = 'none';
                    block.style.opacity = '0';
                }
            });
        });
    });

    initializeLoadMore();
    initializeExport();
}

function initializeLoadMore() {
    const loadMoreBtn = document.getElementById('loadMoreActivities');
    if (!loadMoreBtn) return;

    let page = 1;
    loadMoreBtn.addEventListener('click', function() {
        const { urls } = window.clientData;
        page++;
        loadMoreBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Loading...';
        
        fetch(`${urls.loadMoreActivities}?page=${page}`)
            .then(response => response.json())
            .then(data => {
                if (data.activities) {
                    const timeline = document.querySelector('.timeline');
                    timeline.insertAdjacentHTML('beforeend', data.activities);
                    
                    if (!data.has_more) {
                        loadMoreBtn.style.display = 'none';
                    }
                }
                loadMoreBtn.innerHTML = '<i class="fas fa-sync me-1"></i>Load More';
            });
    });
}

function initializeExport() {
    const exportBtn = document.getElementById('exportActivityBtn');
    if (!exportBtn) return;

    exportBtn.addEventListener('click', function() {
        const { urls } = window.clientData;
        const filter = document.querySelector('[data-filter].active').dataset.filter;
        window.location.href = `${urls.exportActivities}?filter=${filter}`;
    });
}

function initializeDataTables() {
    if (document.getElementById('projects-table')) {
        new simpleDatatables.DataTable("#projects-table", {
            searchable: true,
            fixedHeight: true,
            perPage: 10
        });
    }

    if (document.getElementById('snapshots-table')) {
        new simpleDatatables.DataTable("#snapshots-table", {
            searchable: true,
            fixedHeight: true,
            perPage: 7
        });
    }
}

// Export functions that need to be globally available
window.updateObjectiveStatus = function(clientId, objectiveIndex, newStatus) {
    fetch(`/seo/clients/${clientId}/objectives/${objectiveIndex}/status/`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
        },
        body: JSON.stringify({
            status: newStatus
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: data.message,
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.error || 'Failed to update status'
            });
        }
    })
    .catch(error => {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while updating the status'
        });
    });
};

function initializeSearchConsoleImport() {
    const selectAllCheckbox = document.getElementById('select-all-keywords');
    const importButton = document.getElementById('import-selected-keywords');
    
    if (!selectAllCheckbox || !importButton) return;

    // Handle "Select All" checkbox
    selectAllCheckbox.addEventListener('change', function() {
        const checkboxes = document.querySelectorAll('.keyword-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
        });
    });

    // Handle Import button click
    importButton.addEventListener('click', function() {
        const selectedKeywords = [];
        const checkboxes = document.querySelectorAll('.keyword-checkbox:checked');
        
        checkboxes.forEach(checkbox => {
            selectedKeywords.push({
                keyword: checkbox.value,
                position: parseFloat(checkbox.dataset.position),
                clicks: parseInt(checkbox.dataset.clicks),
                impressions: parseInt(checkbox.dataset.impressions),
                ctr: parseFloat(checkbox.dataset.ctr)
            });
        });

        if (selectedKeywords.length === 0) {
            Swal.fire({
                icon: 'warning',
                title: 'No Keywords Selected',
                text: 'Please select at least one keyword to import.'
            });
            return;
        }

        // Show loading state
        Swal.fire({
            title: 'Importing Keywords',
            text: 'Please wait...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        // Send import request
        fetch(`/seo/clients/${window.clientData.clientId}/keywords/import-from-search-console/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
            },
            body: JSON.stringify(selectedKeywords)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: data.message
                }).then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.error || 'Failed to import keywords'
                });
            }
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while importing keywords'
            });
        });
    });
}

function initializeCreateSnapshot() {
    const createSnapshotBtn = document.getElementById('createSnapshotBtn');
    if (!createSnapshotBtn) return;

    createSnapshotBtn.addEventListener('click', function() {
        const { clientId } = window.clientData;

        Swal.fire({
            title: 'Creating Meta Tags Snapshot',
            text: 'This may take a few moments...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading()
            }
        });

        fetch(`/seo/clients/${clientId}/meta-tags/snapshot/`, {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: data.message,
                    showConfirmButton: true
                }).then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Failed to create meta tags snapshot'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while creating the snapshot.'
            });
        });
    });
}

================
File: seo_manager/static/seo_manager/js/meta_tags_dashboard.js
================
document.addEventListener('DOMContentLoaded', function() {
    initializeCreateSnapshot();
    initializeDataTables();
});

function initializeCreateSnapshot() {
    const createSnapshotBtn = document.getElementById('createSnapshotBtn');
    if (!createSnapshotBtn) return;

    createSnapshotBtn.addEventListener('click', function() {
        const clientId = this.dataset.clientId;

        Swal.fire({
            title: 'Creating Meta Tags Snapshot',
            text: 'This may take a few moments...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading()
            }
        });

        fetch(`/seo/clients/${clientId}/meta-tags/snapshot/`, {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: data.message,
                    showConfirmButton: true
                }).then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Failed to create meta tags snapshot'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while creating the snapshot.'
            });
        });
    });
}

function initializeDataTables() {
    if (document.getElementById('snapshots-table')) {
        new simpleDatatables.DataTable("#snapshots-table", {
            searchable: true,
            fixedHeight: true,
            perPage: 7
        });
    }
}

function viewSnapshot(filename) {
    fetch(`/file-manager/file/${encodeURIComponent(filename)}`)
        .then(response => response.json())
        .then(data => {
            // Format and display the data in the modal
            const formattedHtml = formatMetaTagsReport(data);
            document.getElementById('metaTagsReport').innerHTML = formattedHtml;
            
            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('viewMetaTagsModal'));
            modal.show();
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to load snapshot data'
            });
        });
}

function compareWithPrevious(filename) {
    // Get the list of all snapshots
    const snapshotRows = document.querySelectorAll('#snapshots-table tbody tr');
    let currentIndex = -1;
    let snapshots = [];
    
    snapshotRows.forEach((row, index) => {
        const rowFilename = row.querySelector('.text-sm').textContent;
        snapshots.push(rowFilename);
        if (rowFilename === filename) {
            currentIndex = index;
        }
    });

    // If this is the first snapshot, we can't compare
    if (currentIndex === snapshots.length - 1) {
        Swal.fire({
            icon: 'info',
            title: 'No Previous Snapshot',
            text: 'This is the oldest snapshot, no comparison available.'
        });
        return;
    }

    const previousFilename = snapshots[currentIndex + 1];

    // Fetch both snapshots and compare
    Promise.all([
        fetch(`/file-manager/meta-tags/${filename}`).then(r => r.json()),
        fetch(`/file-manager/meta-tags/${previousFilename}`).then(r => r.json())
    ])
    .then(([current, previous]) => {
        const comparisonHtml = generateComparisonReport(current, previous);
        document.getElementById('metaTagsReport').innerHTML = comparisonHtml;
        
        const modal = new bootstrap.Modal(document.getElementById('viewMetaTagsModal'));
        modal.show();
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to load comparison data'
        });
    });
}

function formatMetaTagsReport(data) {
    // Format the meta tags data into HTML
    let html = '<div class="table-responsive">';
    html += '<table class="table table-hover">';
    html += '<thead><tr><th>Page URL</th><th>Meta Tags</th><th>Issues</th></tr></thead>';
    html += '<tbody>';
    
    data.pages.forEach(page => {
        html += `<tr>
            <td><a href="${page.url}" target="_blank">${page.url}</a></td>
            <td>
                <ul class="list-unstyled mb-0">
                    ${page.meta_tags.map(tag => `
                        <li class="mb-1">
                            <code>${tag.name || tag.property}: ${tag.content}</code>
                        </li>
                    `).join('')}
                </ul>
            </td>
            <td>
                ${page.meta_tags.some(tag => tag.issues) 
                    ? '<span class="badge bg-warning">Issues Found</span>' 
                    : '<span class="badge bg-success">OK</span>'}
            </td>
        </tr>`;
    });
    
    html += '</tbody></table></div>';
    return html;
}

function generateComparisonReport(current, previous) {
    // Generate a comparison report between two snapshots
    let html = '<div class="comparison-report">';
    html += '<h5>Changes Since Last Snapshot</h5>';
    
    // Compare and show differences
    const changes = compareSnapshots(current, previous);
    
    if (changes.length === 0) {
        html += '<p class="text-muted">No changes detected</p>';
    } else {
        html += '<div class="table-responsive">';
        html += '<table class="table">';
        html += '<thead><tr><th>Page</th><th>Change Type</th><th>Details</th></tr></thead>';
        html += '<tbody>';
        
        changes.forEach(change => {
            html += `<tr>
                <td>${change.page}</td>
                <td><span class="badge bg-${change.type === 'added' ? 'success' : change.type === 'removed' ? 'danger' : 'warning'}">${change.type}</span></td>
                <td>${change.details}</td>
            </tr>`;
        });
        
        html += '</tbody></table></div>';
    }
    
    html += '</div>';
    return html;
}

function compareSnapshots(current, previous) {
    const changes = [];
    
    // Compare pages and their meta tags
    current.pages.forEach(currentPage => {
        const previousPage = previous.pages.find(p => p.url === currentPage.url);
        
        if (!previousPage) {
            changes.push({
                page: currentPage.url,
                type: 'added',
                details: 'New page added'
            });
            return;
        }
        
        // Compare meta tags
        currentPage.meta_tags.forEach(currentTag => {
            const previousTag = previousPage.meta_tags.find(t => 
                (t.name === currentTag.name && t.property === currentTag.property)
            );
            
            if (!previousTag) {
                changes.push({
                    page: currentPage.url,
                    type: 'added',
                    details: `Added tag: ${currentTag.name || currentTag.property}`
                });
            } else if (previousTag.content !== currentTag.content) {
                changes.push({
                    page: currentPage.url,
                    type: 'modified',
                    details: `Changed ${currentTag.name || currentTag.property} from "${previousTag.content}" to "${currentTag.content}"`
                });
            }
        });
    });
    
    // Check for removed pages
    previous.pages.forEach(previousPage => {
        if (!current.pages.find(p => p.url === previousPage.url)) {
            changes.push({
                page: previousPage.url,
                type: 'removed',
                details: 'Page removed'
            });
        }
    });
    
    return changes;
}

================
File: seo_manager/static/seo_manager/js/ranking_data_management.js
================
document.addEventListener('DOMContentLoaded', function() {
    // Ensure urls are available
    if (!window.urls) {
        console.error('URLs not defined');
        return;
    }

    // Initialize DataTable
    new simpleDatatables.DataTable("#rankings-table", {
        perPage: 25,
        sort: { date: "desc" },
        searchable: true,
        fixedHeight: true,
        labels: {
            placeholder: "Search records..."
        }
    });

    // Initialize button handlers
    const collectRankingsBtn = document.getElementById('collectRankingsBtn');
    const generateReportBtn = document.getElementById('generateReportBtn');
    const backfillRankingsBtn = document.getElementById('backfillRankingsBtn');
    
    if (collectRankingsBtn) {
        collectRankingsBtn.addEventListener('click', function() {
        Swal.fire({
            title: 'Collecting Rankings Data',
            text: 'This may take a few minutes...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading()
            }
        });

        fetch(window.urls.collectRankings, {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: data.message
                }).then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.error
                });
            }
        });
    });
    }

    if (generateReportBtn) {
        generateReportBtn.addEventListener('click', function() {
        Swal.fire({
            title: 'Generating Report',
            text: 'Please wait...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading()
            }
        });

        fetch(window.urls.generateReport, {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById('reportContent').innerHTML = data.report_html;
                var reportModal = new bootstrap.Modal(document.getElementById('reportModal'));
                Swal.close();
                reportModal.show();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.error
                });
            }
        });
    });
    }

    if (backfillRankingsBtn) {
        backfillRankingsBtn.addEventListener('click', function() {
        Swal.fire({
            title: 'Backfill Historical Data',
            text: 'This will collect ranking data for the past 12 months. This may take several minutes. Continue?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, proceed',
            cancelButtonText: 'No, cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                handleBackfillRankings();
                }
            });
        });
    }

    // Initialize column visibility handlers
    const checkboxes = document.querySelectorAll('#dropdownDefaultCheckbox input[type="checkbox"]');
    checkboxes.forEach(function(checkbox) {
        checkbox.addEventListener('change', function() {
            const targetColumnId = this.getAttribute('data-target');
            const targetColumn = document.getElementById('th_' + targetColumnId);
            const targetDataCells = document.querySelectorAll('.td_' + targetColumnId);
            
            if (this.checked) {
                targetColumn.style.display = 'none';
                targetDataCells.forEach(cell => cell.style.display = 'none');
            } else {
                targetColumn.style.display = '';
                targetDataCells.forEach(cell => cell.style.display = '');
            }
        });
    });
});

function handleBackfillRankings() {
    Swal.fire({
        title: 'Collecting Historical Data',
        text: 'This may take several minutes...',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading()
        }
    });

    fetch(window.urls.backfillRankings, {
        method: 'POST',
        headers: {
            'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: data.message
            }).then(() => {
                window.location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.error
            });
        }
    })
    .catch(error => {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while collecting historical data.'
        });
    });
}

function getPageItems(selectObject) {
    var value = selectObject.value;
    window.location.href = updateQueryStringParameter(window.location.href, 'items', value);
}

function updateQueryStringParameter(uri, key, value) {
    var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
    var separator = uri.indexOf('?') !== -1 ? "&" : "?";
    if (uri.match(re)) {
        return uri.replace(re, '$1' + key + "=" + value + '$2');
    }
    else {
        return uri + separator + key + "=" + value;
    }
}

================
File: seo_manager/templates/seo_manager/credentials/add_ga_service_account.html
================
{% extends "layouts/base.html" %}

{% block title %} Add GA Service Account - {{ client.name }} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Add Google Analytics Service Account</h6>
                    <p class="text-sm">Upload your service account JSON file for {{ client.name }}</p>
                </div>
                <div class="card-body">
                    <form method="post" enctype="multipart/form-data">
                        {% csrf_token %}
                        <div class="form-group">
                            <label class="form-control-label">Service Account JSON File</label>
                            <input type="file" name="service_account_file" class="form-control" required>
                            <small class="text-muted">Upload the JSON file containing your service account credentials</small>
                        </div>
                        <div class="mt-4">
                            <button type="submit" class="btn bg-gradient-primary">Upload Credentials</button>
                            <a href="{% url 'seo_manager:client_detail' client.id %}" class="btn bg-gradient-secondary">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

================
File: seo_manager/templates/seo_manager/credentials/add_sc_service_account.html
================
{% extends "layouts/base.html" %}

{% block title %} Add Search Console Service Account - {{ client.name }} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Add Search Console Service Account for {{ client.name }}</h6>
        </div>
        <div class="card-body">
          <form method="post" enctype="multipart/form-data">
            {% csrf_token %}
            <div class="form-group">
              <label for="service_account_file">Service Account JSON File</label>
              <div class="form-control dropzone" id="dropzone">
                <div class="fallback">
                  <input name="service_account_file" type="file" accept="application/json" required />
                </div>
              </div>
              <small class="form-text text-muted">
                Upload your Google Search Console service account JSON key file
              </small>
            </div>
            <div class="d-flex justify-content-end mt-4">
              <a href="{% url 'seo_manager:client_detail' client.id %}" class="btn btn-light m-0 me-2">Cancel</a>
              <button type="submit" class="btn bg-gradient-primary m-0">Upload Service Account</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock content %}

{% block extra_js %}
{{ block.super }}
<script src="/static/assets/js/plugins/dropzone.min.js"></script>
<script>
  Dropzone.autoDiscover = false;
  var drop = document.getElementById('dropzone')
  var myDropzone = new Dropzone(drop, {
    url: "#",
    addRemoveLinks: true,
    acceptedFiles: ".json",
    maxFiles: 1,
    autoProcessQueue: false,
    init: function() {
      this.on("addedfile", function(file) {
        if (this.files.length > 1) {
          this.removeFile(this.files[0]);
        }
      });
    }
  });
</script>
{% endblock extra_js %}

{% block extra_css %}
{{ block.super }}
<link href="/static/assets/css/dropzone.min.css" rel="stylesheet">
{% endblock extra_css %}

================
File: seo_manager/templates/seo_manager/credentials/select_analytics_account.html
================
{% extends "layouts/base.html" %}

{% block title %} Select Analytics Account - {{ client.name }} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Select Google Analytics Account</h6>
                    <p class="text-sm">Choose the Analytics account to connect for {{ client.name }}</p>
                </div>
                <div class="card-body">
                    <form method="post">
                        {% csrf_token %}
                        <div class="form-group">
                            <label class="form-control-label">Analytics Account</label>
                            <select name="selected_account" class="form-select" required>
                                <option value="">Select an account...</option>
                                {% for account in accounts %}
                                <option value="{{ account.property_id }}">
                                    {{ account.account_name }} - {{ account.property_name }}
                                </option>
                                {% endfor %}
                            </select>
                        </div>
                        <div class="mt-4">
                            <button type="submit" class="btn bg-gradient-primary">Connect Account</button>
                            <a href="{% url 'seo_manager:client_detail' client.id %}" class="btn bg-gradient-secondary">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

================
File: seo_manager/templates/seo_manager/includes/activity_items.html
================
{% for activity in client_activities %}
  <div class="timeline-block mb-4" data-category="{{ activity.category }}">
    <span class="timeline-step">
      {% if activity.category == 'keyword' %}
        <i class="fas fa-key text-primary"></i>
      {% elif activity.category == 'project' %}
        <i class="fas fa-project-diagram text-info"></i>
      {% elif activity.category == 'ranking' %}
        <i class="fas fa-chart-line text-success"></i>
      {% elif activity.category == 'analytics' %}
        <i class="fas fa-chart-bar text-warning"></i>
      {% else %}
        <i class="fas fa-circle text-secondary"></i>
      {% endif %}
    </span>
    <div class="timeline-content">
      <div class="d-flex justify-content-between">
        <div>
          <span class="badge badge-sm bg-gradient-{% if activity.category == 'keyword' %}primary{% elif activity.category == 'project' %}info{% elif activity.category == 'ranking' %}success{% elif activity.category == 'analytics' %}warning{% else %}secondary{% endif %} mb-2">
            {{ activity.get_category_display }}
          </span>
          <h6 class="text-dark mb-0">{{ activity.action }}</h6>
          <p class="text-secondary text-sm mt-1 mb-0">
            {% if activity.user %}
              <span class="font-weight-bold text-primary">{{ activity.user.username }}</span>
            {% endif %}
            {% if activity.details %}
              <span class="text-dark ms-2">{{ activity.details|pprint }}</span>
            {% endif %}
          </p>
        </div>
        <div class="ms-auto">
          <span class="text-secondary text-xs">
            {{ activity.timestamp|date:"M d, Y H:i" }}
          </span>
        </div>
      </div>
    </div>
  </div>
{% endfor %}

================
File: seo_manager/templates/seo_manager/includes/keyword_import_modals.html
================
<!-- Import Keywords Modal -->
<div class="modal fade" id="import-keywords" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Import Keywords</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:keyword_import' client.id %}" enctype="multipart/form-data">
        {% csrf_token %}
        <div class="modal-body">
          {{ import_form.as_p }}
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Import</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Import from Search Console Modal -->
<div class="modal fade" id="import-search-console" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Import from Search Console</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        {% if not client.sc_credentials %}
          <div class="text-center py-4">
            <div class="icon icon-shape icon-sm bg-gradient-warning shadow text-center mb-3">
              <i class="fas fa-exclamation-triangle opacity-10"></i>
            </div>
            <h6 class="text-dark">Search Console Not Connected</h6>
            <p class="text-secondary text-sm">Please connect Search Console first to import keywords.</p>
            <a href="{% url 'seo_manager:add_sc_credentials' client.id %}" class="btn btn-sm bg-gradient-info mt-3">
              <i class="fab fa-google me-2"></i>Connect Search Console
            </a>
          </div>
        {% elif not search_console_data %}
          <div class="text-center py-4">
            <div class="icon icon-shape icon-sm bg-gradient-info shadow text-center mb-3">
              <i class="fas fa-search opacity-10"></i>
            </div>
            <h6 class="text-dark">No Search Console Data</h6>
            <p class="text-secondary text-sm">No keyword data found in Search Console for the last 90 days.</p>
          </div>
        {% else %}
          <div class="table-responsive">
            <table class="table align-items-center mb-0" id="search-console-keywords-table">
              <thead>
                <tr>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" id="select-all-keywords">
                    </div>
                  </th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Keyword</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Position</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Clicks</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Impressions</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">CTR</th>
                </tr>
              </thead>
              <tbody>
                {% for keyword in search_console_data %}
                  <tr>
                    <td>
                      <div class="form-check">
                        <input class="form-check-input keyword-checkbox" type="checkbox" 
                               value="{{ keyword.query }}" 
                               data-position="{{ keyword.position }}"
                               data-clicks="{{ keyword.clicks }}"
                               data-impressions="{{ keyword.impressions }}"
                               data-ctr="{{ keyword.ctr }}">
                      </div>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ keyword.query }}</p>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ keyword.position|floatformat:1 }}</p>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ keyword.clicks }}</p>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ keyword.impressions }}</p>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ keyword.ctr|floatformat:2 }}%</p>
                    </td>
                  </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        {% endif %}
      </div>
      <div class="modal-footer">
        <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
        {% if search_console_data %}
          <button type="button" class="btn bg-gradient-primary" id="import-selected-keywords">
            Import Selected Keywords
          </button>
        {% endif %}
      </div>
    </div>
  </div>
</div>

================
File: seo_manager/templates/seo_manager/includes/keyword_modals.html
================
{% include 'seo_manager/includes/keyword_import_modals.html' %}

<!-- Add Keyword Modal -->
<div class="modal fade" id="add-keyword" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add Keyword</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:keyword_create' client.id %}">
        {% csrf_token %}
        <div class="modal-body">
          {{ keyword_form.as_p }}
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Add Keyword</button>
        </div>
      </form>
    </div>
  </div>
</div>

================
File: seo_manager/templates/seo_manager/includes/objective_modals.html
================
<!-- Add Business Objective Modal -->
<div class="modal fade" id="add-objective" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add Business Objective</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:add_business_objective' client.id %}" id="addObjectiveForm">
        {% csrf_token %}
        <div class="modal-body">
          <!-- Goal Field -->
          <div class="form-group mb-3">
            <label class="form-control-label">Goal</label>
            <textarea class="form-control" name="goal" rows="3" required></textarea>
            <small class="text-muted">What specific outcome do you want to achieve?</small>
          </div>
          
          <!-- Metric Field -->
          <div class="form-group mb-3">
            <label class="form-control-label">Metric</label>
            <textarea class="form-control" name="metric" rows="2" required></textarea>
            <small class="text-muted">Define the key metrics that will track progress</small>
          </div>
          
          <!-- Target Date Field -->
          <div class="form-group mb-3">
            <label class="form-control-label">Target Date</label>
            <input type="text" class="form-control datepicker" name="target_date" id="target_date" required>
            <small class="text-muted">When do you aim to achieve this objective?</small>
          </div>
          
          <!-- Status Field -->
          <div class="form-check form-switch mb-3">
            <input type="checkbox" class="form-check-input" name="status" checked>
            <label class="form-check-label ms-3">Active</label>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Add Objective</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Edit Business Objective Modal -->
<div class="modal fade" id="edit-objective" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Business Objective</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:edit_business_objective' client.id 0 %}" id="editObjectiveForm">
        {% csrf_token %}
        <div class="modal-body">
          <!-- Goal Field -->
          <div class="form-group mb-3">
            <label class="form-control-label">Goal</label>
            <textarea class="form-control" name="goal" rows="3" required id="edit_goal"></textarea>
            <small class="text-muted">What specific outcome do you want to achieve?</small>
          </div>
          
          <!-- Metric Field -->
          <div class="form-group mb-3">
            <label class="form-control-label">Metric</label>
            <textarea class="form-control" name="metric" rows="2" required id="edit_metric"></textarea>
            <small class="text-muted">Define the key metrics that will track progress</small>
          </div>
          
          <!-- Target Date Field -->
          <div class="form-group mb-3">
            <label class="form-control-label">Target Date</label>
            <input type="text" class="form-control datepicker" name="target_date" id="edit_target_date" required>
            <small class="text-muted">When do you aim to achieve this objective?</small>
          </div>
          
          <!-- Status Field -->
          <div class="form-check form-switch mb-3">
            <input type="checkbox" class="form-check-input" name="status" id="edit_status">
            <label class="form-check-label ms-3">Active</label>
          </div>
          
          <input type="hidden" name="objective_index" id="edit_objective_index">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Update Objective</button>
        </div>
      </form>
    </div>
  </div>
</div>

================
File: seo_manager/templates/seo_manager/keywords/keyword_list_table.html
================
{% load seo_tags %}

<table class="table table-flush align-items-center mb-0" id="keywords-table">
  <thead class="thead-light">
    <tr>
      <th class="text-secondary text-xxs font-weight-bolder opacity-7">Keyword</th>
      <th class="text-secondary text-xxs font-weight-bolder opacity-7">Priority</th>
      <th class="text-center text-secondary text-xxs font-weight-bolder opacity-7">Current Position</th>
      <th class="text-center text-secondary text-xxs font-weight-bolder opacity-7">30d Change</th>
      <th class="text-secondary text-xxs font-weight-bolder opacity-7">Notes</th>
      <th class="text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
    </tr>
  </thead>
  <tbody>
    {% for keyword in keywords %}
    <tr>
      <td class="align-middle py-2">
        <div class="d-flex px-2">
          <span class="text-xs font-weight-bold">{{ keyword.keyword }}</span>
        </div>
      </td>
      <td class="align-middle py-2">
        <span class="badge badge-sm bg-gradient-{% if keyword.priority == 1 %}danger{% elif keyword.priority == 2 %}warning{% else %}info{% endif %}">
          {{ keyword.get_priority_display }}
        </span>
      </td>
      <td class="text-center">
        {% if keyword.current_position %}
          <span class="text-sm">{{ keyword.current_position }}</span>
        {% else %}
          <span class="text-sm text-secondary">-</span>
        {% endif %}
      </td>
      <td class="text-center">
        {% with change=keyword.get_position_change %}
          {% if change %}
            <div class="d-flex align-items-center justify-content-center">
              {% if keyword.position_trend == 'up' %}
                <i class="fas fa-arrow-up text-success me-1"></i>
              {% elif keyword.position_trend == 'down' %}
                <i class="fas fa-arrow-down text-danger me-1"></i>
              {% else %}
                <i class="fas fa-minus text-secondary me-1"></i>
              {% endif %}
              <span class="text-sm {% if change > 0 %}text-success{% elif change < 0 %}text-danger{% else %}text-secondary{% endif %}">
                {{ change|floatformat:1 }}
              </span>
            </div>
          {% else %}
            <span class="text-sm text-secondary">-</span>
          {% endif %}
        {% endwith %}
      </td>
      <td class="text-sm">{{ keyword.notes|truncatechars:50 }}</td>
      <td>
        <div class="d-flex">
          <a href="#" class="text-secondary font-weight-bold text-xs me-3" data-bs-toggle="modal" data-bs-target="#edit-keyword-{{ keyword.id }}">
            Edit
          </a>
          <a href="#" class="text-info font-weight-bold text-xs" data-bs-toggle="modal" data-bs-target="#view-history-{{ keyword.id }}">
            History
          </a>
        </div>
      </td>
    </tr>
    {% endfor %}
  </tbody>
</table>

<!-- Keyword History Modals -->
{% for keyword in keywords %}
<div class="modal fade" id="view-history-{{ keyword.id }}" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Ranking History: {{ keyword.keyword }}</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="chart-container-{{ keyword.id }}" class="chart-container" style="position: relative; height: 300px;">
          <canvas id="keyword-chart-{{ keyword.id }}" class="chart-canvas"></canvas>
        </div>
      </div>
    </div>
  </div>
</div>
{% endfor %}

<!-- Edit Keyword Modals -->
{% for keyword in keywords %}
<div class="modal fade" id="edit-keyword-{{ keyword.id }}" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Keyword: {{ keyword.keyword }}</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:keyword_update' client_id=client.id pk=keyword.id %}">
        {% csrf_token %}
        <div class="modal-body">
          <div class="form-group">
            <label for="keyword-{{ keyword.id }}">Keyword</label>
            <input type="text" class="form-control" id="keyword-{{ keyword.id }}" name="keyword" value="{{ keyword.keyword }}" required>
          </div>
          <div class="form-group mt-3">
            <label for="priority-{{ keyword.id }}">Priority</label>
            <select class="form-control" id="priority-{{ keyword.id }}" name="priority">
              {% for value, label in keyword.PRIORITY_CHOICES %}
                <option value="{{ value }}" {% if keyword.priority == value %}selected{% endif %}>{{ label }}</option>
              {% endfor %}
            </select>
          </div>
          <div class="form-group mt-3">
            <label for="notes-{{ keyword.id }}">Notes</label>
            <textarea class="form-control" id="notes-{{ keyword.id }}" name="notes" rows="3">{{ keyword.notes }}</textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Save Changes</button>
        </div>
      </form>
    </div>
  </div>
</div>
{% endfor %}

<!-- Replace the existing script block at the bottom -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    {% for keyword in keywords %}
    (function() {
        const modal = document.getElementById('view-history-{{ keyword.id }}');
        if (!modal) return;

        const data = [
            {% for entry in keyword.ranking_data %}
                {
                    date: '{{ entry.date|date:"Y-m-d" }}',
                    position: {{ entry.average_position }},
                }{% if not forloop.last %},{% endif %}
            {% endfor %}
        ];

        console.log('Data for {{ keyword.keyword }}:', data);  // Debug log

        modal.addEventListener('show.bs.modal', function() {
            const ctx = document.getElementById('keyword-chart-{{ keyword.id }}');
            if (!ctx) return;

            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.map(d => d.date),
                    datasets: [{
                        label: 'Position',
                        data: data.map(d => d.position),
                        borderColor: '#5e72e4',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            reverse: true
                        }
                    }
                }
            });
        });
    })();
    {% endfor %}
});
</script>

================
File: seo_manager/templates/seo_manager/keywords/keyword_list.html
================
{% extends 'layouts/base.html' %}
{% load static %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card">
        <!-- Card header -->
        <div class="card-header pb-0">
          <div class="d-lg-flex">
            <div>
              <h5 class="mb-0">Targeted Keywords - {{ client.name }}</h5>
              <p class="text-sm mb-0">
                Manage keywords and track their performance
              </p>
            </div>
            <div class="ms-auto my-auto mt-lg-0 mt-4">
              <div class="ms-auto my-auto">
                <a href="{% url 'seo_manager:keyword_create' client.id %}" class="btn bg-gradient-primary btn-sm mb-0">
                  <i class="fas fa-plus"></i>&nbsp;&nbsp;Add Keyword
                </a>
                <button type="button" class="btn btn-outline-primary btn-sm mb-0" data-bs-toggle="modal" data-bs-target="#import-keywords">
                  Import CSV
                </button>
              </div>
            </div>
          </div>
        </div>

        <div class="card-body px-0 pb-0">
          <div class="table-responsive">
            <table class="table table-flush" id="keywords-list">
              <thead class="thead-light">
                <tr>
                  <th>Keyword</th>
                  <th>Priority</th>
                  <th>Current Position</th>
                  <th>30d Change</th>
                  <th>Notes</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {% for keyword in keywords %}
                <tr>
                  <td>
                    <div class="d-flex align-items-center">
                      <span class="text-sm">{{ keyword.keyword }}</span>
                    </div>
                  </td>
                  <td>
                    <span class="badge bg-gradient-{% if keyword.priority == 1 %}danger{% elif keyword.priority == 2 %}warning{% else %}info{% endif %}">
                      {{ keyword.get_priority_display }}
                    </span>
                  </td>
                  <td>
                    {% with latest_ranking=keyword.ranking_history.first %}
                      {% if latest_ranking %}
                        {{ latest_ranking.average_position|floatformat:1 }}
                      {% else %}
                        -
                      {% endif %}
                    {% endwith %}
                  </td>
                  <td>
                    {% with change=keyword.get_30_day_change %}
                      {% if change %}
                        <span class="text-{% if change < 0 %}success{% elif change > 0 %}danger{% else %}secondary{% endif %}">
                          {{ change|floatformat:1 }}
                        </span>
                      {% else %}
                        -
                      {% endif %}
                    {% endwith %}
                  </td>
                  <td class="text-sm">{{ keyword.notes|truncatechars:50 }}</td>
                  <td>
                    <a href="{% url 'seo_manager:keyword_edit' keyword.id %}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit keyword">
                      Edit
                    </a>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Import Modal -->
<div class="modal fade" id="import-keywords" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Import Keywords</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:keyword_import' client.id %}" enctype="multipart/form-data">
        {% csrf_token %}
        <div class="modal-body">
          <div class="form-group">
            {{ import_form.csv_file }}
            <small class="form-text text-muted">{{ import_form.csv_file.help_text }}</small>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Import</button>
        </div>
      </form>
    </div>
  </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
  $(document).ready(function() {
    $('#keywords-list').DataTable({
      dom: 'Bfrtip',
      buttons: [
        'copy', 'csv', 'excel', 'pdf'
      ]
    });
  });
</script>
{% endblock %}

================
File: seo_manager/templates/seo_manager/keywords/ranking_history.html
================
{% extends 'layouts/base.html' %}
{% load static %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0">
          <div class="d-flex align-items-center">
            <div>
              <h5 class="mb-0">Ranking History - {{ keyword.keyword }}</h5>
              <p class="text-sm mb-0">
                Track position changes over time
              </p>
            </div>
            <div class="ms-auto">
              <a href="{% url 'seo_manager:ranking_import' keyword.client.id %}" class="btn bg-gradient-primary btn-sm mb-0">
                Import Rankings
              </a>
            </div>
          </div>
        </div>
        
        <div class="card-body pt-4">
          <!-- Performance Metrics -->
          <div class="row">
            <div class="col-xl-3 col-sm-6 mb-4">
              <div class="card">
                <div class="card-body p-3">
                  <div class="row">
                    <div class="col-8">
                      <div class="numbers">
                        <p class="text-sm mb-0 text-capitalize font-weight-bold">Current Position</p>
                        <h5 class="font-weight-bolder mb-0">
                          {{ latest_ranking.average_position|floatformat:1|default:"-" }}
                        </h5>
                      </div>
                    </div>
                    <div class="col-4 text-end">
                      <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                        <i class="ni ni-chart-bar-32 text-lg opacity-10" aria-hidden="true"></i>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="col-xl-3 col-sm-6 mb-4">
              <div class="card">
                <div class="card-body p-3">
                  <div class="row">
                    <div class="col-8">
                      <div class="numbers">
                        <p class="text-sm mb-0 text-capitalize font-weight-bold">30d Change</p>
                        <h5 class="font-weight-bolder mb-0">
                          <span class="text-{% if thirty_day_change < 0 %}success{% elif thirty_day_change > 0 %}danger{% else %}secondary{% endif %}">
                            {{ thirty_day_change|floatformat:1|default:"-" }}
                          </span>
                        </h5>
                      </div>
                    </div>
                    <div class="col-4 text-end">
                      <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                        <i class="ni ni-chart-line text-lg opacity-10" aria-hidden="true"></i>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="col-xl-3 col-sm-6 mb-4">
              <div class="card">
                <div class="card-body p-3">
                  <div class="row">
                    <div class="col-8">
                      <div class="numbers">
                        <p class="text-sm mb-0 text-capitalize font-weight-bold">Impressions</p>
                        <h5 class="font-weight-bolder mb-0">
                          {{ latest_ranking.impressions|default:"-" }}
                        </h5>
                      </div>
                    </div>
                    <div class="col-4 text-end">
                      <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                        <i class="ni ni-world text-lg opacity-10" aria-hidden="true"></i>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="col-xl-3 col-sm-6 mb-4">
              <div class="card">
                <div class="card-body p-3">
                  <div class="row">
                    <div class="col-8">
                      <div class="numbers">
                        <p class="text-sm mb-0 text-capitalize font-weight-bold">CTR</p>
                        <h5 class="font-weight-bolder mb-0">
                          {{ latest_ranking.ctr|floatformat:2|default:"-" }}%
                        </h5>
                      </div>
                    </div>
                    <div class="col-4 text-end">
                      <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                        <i class="ni ni-curved-next text-lg opacity-10" aria-hidden="true"></i>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Ranking History Chart -->
          <div class="row mt-4">
            <div class="col-12">
              <div class="card z-index-2">
                <div class="card-header pb-0">
                  <h6>Position History</h6>
                </div>
                <div class="card-body p-3">
                  <div class="chart">
                    <canvas id="ranking-history-chart" class="chart-canvas" height="300"></canvas>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Historical Data Table -->
          <div class="row mt-4">
            <div class="col-12">
              <div class="card">
                <div class="table-responsive">
                  <table class="table table-flush" id="ranking-history-table">
                    <thead class="thead-light">
                      <tr>
                        <th>Date</th>
                        <th>Position</th>
                        <th>Impressions</th>
                        <th>Clicks</th>
                        <th>CTR</th>
                      </tr>
                    </thead>
                    <tbody>
                      {% for ranking in ranking_history %}
                      <tr>
                        <td>{{ ranking.date }}</td>
                        <td>{{ ranking.average_position|floatformat:1 }}</td>
                        <td>{{ ranking.impressions }}</td>
                        <td>{{ ranking.clicks }}</td>
                        <td>{{ ranking.ctr|floatformat:2 }}%</td>
                      </tr>
                      {% endfor %}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="{% static 'assets/js/plugins/chartjs.min.js' %}"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize DataTable
    $('#ranking-history-table').DataTable({
      order: [[0, 'desc']],
      dom: 'Bfrtip',
      buttons: ['copy', 'csv', 'excel', 'pdf']
    });

    // Initialize Chart
    const ctx = document.getElementById("ranking-history-chart").getContext("2d");
    const chartData = JSON.parse('{{ chart_data|escapejs }}');
    
    new Chart(ctx, {
      type: "line",
      data: {
        labels: chartData.labels,
        datasets: [{
          label: "Position",
          tension: 0.4,
          borderWidth: 0,
          pointRadius: 2,
          pointBackgroundColor: "#cb0c9f",
          borderColor: "#cb0c9f",
          borderWidth: 3,
          data: chartData.positions,
          maxBarThickness: 6,
          fill: false
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false,
          }
        },
        interaction: {
          intersect: false,
          mode: 'index',
        },
        scales: {
          y: {
            grid: {
              drawBorder: false,
              display: true,
              drawOnChartArea: true,
              drawTicks: false,
              borderDash: [5, 5]
            },
            ticks: {
              display: true,
              padding: 10,
              color: '#b2b9bf',
              font: {
                size: 11,
                family: "Open Sans",
                style: 'normal',
                lineHeight: 2
              },
            },
            reverse: true
          },
          x: {
            grid: {
              drawBorder: false,
              display: true,
              drawOnChartArea: true,
              drawTicks: false,
              borderDash: [5, 5]
            },
            ticks: {
              display: true,
              color: '#b2b9bf',
              padding: 10,
              font: {
                size: 11,
                family: "Open Sans",
                style: 'normal',
                lineHeight: 2
              },
            }
          },
        },
      },
    });
  });
</script>
{% endblock %}

================
File: seo_manager/templates/seo_manager/keywords/search_console_keywords.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Import Search Console Keywords - {{ client.name }} {% endblock %}

{% block content %}
{% csrf_token %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h5 class="mb-0">Import Keywords from Search Console</h5>
              <p class="text-sm mb-0 text-muted">
                <i class="fab fa-google me-1"></i> Import keywords from Google Search Console
              </p>
            </div>
            <a href="{% url 'seo_manager:client_detail' client.id %}" class="btn btn-sm bg-gradient-secondary">
              <i class="fas fa-arrow-left me-2"></i>Back to Client
            </a>
          </div>
        </div>
        
        <div class="card-body">
          {% if not client.sc_credentials %}
            <div class="text-center py-4">
              <div class="icon icon-shape icon-sm bg-gradient-warning shadow text-center mb-3">
                <i class="fas fa-exclamation-triangle opacity-10"></i>
              </div>
              <h6 class="text-dark">Search Console Not Connected</h6>
              <p class="text-secondary text-sm">Please connect Search Console first to import keywords.</p>
              <a href="{% url 'seo_manager:add_sc_credentials' client.id %}" class="btn btn-sm bg-gradient-info mt-3">
                <i class="fab fa-google me-2"></i>Connect Search Console
              </a>
            </div>
          {% elif not search_console_data %}
            <div class="text-center py-4">
              <div class="icon icon-shape icon-sm bg-gradient-info shadow text-center mb-3">
                <i class="fas fa-search opacity-10"></i>
              </div>
              <h6 class="text-dark">No Search Console Data</h6>
              <p class="text-secondary text-sm">No keyword data found in Search Console for the last 90 days.</p>
            </div>
          {% else %}
            <div class="table-responsive">
              <table class="table table-flush" id="search-console-keywords-table">
                <thead class="thead-light">
                  <tr>
                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">
                      <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="select-all-keywords">
                      </div>
                    </th>
                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Keyword</th>
                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Position</th>
                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Clicks</th>
                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Impressions</th>
                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">CTR</th>
                  </tr>
                </thead>
                <tbody>
                  {% for keyword in search_console_data %}
                    <tr>
                      <td>
                        <div class="form-check">
                          <input class="form-check-input keyword-checkbox" type="checkbox" 
                                 value="{{ keyword.query }}" 
                                 data-position="{{ keyword.position }}"
                                 data-clicks="{{ keyword.clicks }}"
                                 data-impressions="{{ keyword.impressions }}"
                                 data-ctr="{{ keyword.ctr }}">
                        </div>
                      </td>
                      <td>
                        <p class="text-xs font-weight-bold mb-0">{{ keyword.query }}</p>
                      </td>
                      <td>
                        <p class="text-xs font-weight-bold mb-0">{{ keyword.position|floatformat:1 }}</p>
                      </td>
                      <td>
                        <p class="text-xs font-weight-bold mb-0">{{ keyword.clicks }}</p>
                      </td>
                      <td>
                        <p class="text-xs font-weight-bold mb-0">{{ keyword.impressions }}</p>
                      </td>
                      <td>
                        <p class="text-xs font-weight-bold mb-0">{{ keyword.ctr|floatformat:2 }}%</p>
                      </td>
                    </tr>
                  {% endfor %}
                </tbody>
              </table>
            </div>
            
            <div class="text-end mt-4">
              <button type="button" class="btn bg-gradient-primary" id="import-selected-keywords">
                <i class="fas fa-file-import me-2"></i>Import Selected Keywords
              </button>
            </div>
          {% endif %}
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock content %}

{% block extra_js %}
{{ block.super }}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize DataTable
    if (document.getElementById('search-console-keywords-table')) {
      new simpleDatatables.DataTable("#search-console-keywords-table", {
        searchable: true,
        fixedHeight: true,
        perPage: 25
      });
    }

    // Handle "Select All" checkbox
    const selectAllCheckbox = document.getElementById('select-all-keywords');
    if (selectAllCheckbox) {
      selectAllCheckbox.addEventListener('change', function() {
        const checkboxes = document.querySelectorAll('.keyword-checkbox');
        checkboxes.forEach(checkbox => {
          checkbox.checked = this.checked;
        });
      });
    }

    // Handle Import button
    const importButton = document.getElementById('import-selected-keywords');
    if (importButton) {
      importButton.addEventListener('click', handleImport);
    }
  });

  function handleImport() {
    const selectedKeywords = [];
    const checkboxes = document.querySelectorAll('.keyword-checkbox:checked');
    
    checkboxes.forEach(checkbox => {
      selectedKeywords.push({
        keyword: checkbox.value,
        position: parseFloat(checkbox.dataset.position),
        clicks: parseInt(checkbox.dataset.clicks),
        impressions: parseInt(checkbox.dataset.impressions),
        ctr: parseFloat(checkbox.dataset.ctr)
      });
    });

    if (selectedKeywords.length === 0) {
      Swal.fire({
        icon: 'warning',
        title: 'No Keywords Selected',
        text: 'Please select at least one keyword to import.'
      });
      return;
    }

    Swal.fire({
      title: 'Importing Keywords',
      text: 'Please wait...',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });

    fetch("{% url 'seo_manager:import_from_search_console' client.id %}", {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
      },
      body: JSON.stringify(selectedKeywords)
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: data.message
        }).then(() => {
          window.location.href = "{% url 'seo_manager:client_detail' client.id %}";
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: data.error || 'Failed to import keywords'
        });
      }
    })
    .catch(error => {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'An error occurred while importing keywords'
      });
    });
  }
</script>
{% endblock extra_js %}

================
File: seo_manager/templates/seo_manager/meta_tags/meta_tags_dashboard.html
================
{% extends "layouts/base.html" %}
{% load static %}
{% load seo_manager_filters %}

{% block title %} Meta Tags Monitor - {{ client.name }} {% endblock %}

{% block extrastyle %}
{{ block.super }}
<!-- SweetAlert2 CSS -->
<link href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-default@4/default.css" rel="stylesheet">
{% endblock extrastyle %}

{% block content %}
{% csrf_token %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h5 class="mb-0">Meta Tags Monitor</h5>
              <p class="text-sm mb-0 text-muted">
                <i class="fas fa-code me-1"></i> Track and analyze website meta tags
              </p>
            </div>
            <button type="button" class="btn bg-gradient-dark btn-sm" id="createSnapshotBtn" data-client-id="{{ client.id }}">
              <i class="fas fa-camera me-2"></i>Create Snapshot
            </button>
          </div>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-4">
              <div class="card card-body border-0 shadow-sm">
                <div class="d-flex">
                  <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                    <i class="fas fa-history text-lg opacity-10" aria-hidden="true"></i>
                  </div>
                  <div class="ms-3">
                    <h6 class="mb-0">Latest Snapshot</h6>
                    <span class="text-sm text-muted">
                      {% if meta_tags_files %}
                        {{ meta_tags_files.0|basename }}
                        <br>
                        <small class="text-xs">{{ latest_stats.total_pages }} pages scanned</small>
                      {% else %}
                        No snapshots yet
                      {% endif %}
                    </span>
                  </div>
                </div>
              </div>
            </div>
            <div class="col-md-4">
              <div class="card card-body border-0 shadow-sm">
                <div class="d-flex">
                  <div class="icon icon-shape bg-gradient-success shadow text-center border-radius-md">
                    <i class="fas fa-tag text-lg opacity-10" aria-hidden="true"></i>
                  </div>
                  <div class="ms-3">
                    <h6 class="mb-0">Total Tags Tracked</h6>
                    <span class="text-sm text-muted">
                      {% if latest_stats %}
                        {{ latest_stats.total_tags }}
                      {% else %}
                        No data available
                      {% endif %}
                    </span>
                  </div>
                </div>
              </div>
            </div>
            <div class="col-md-4">
              <div class="card card-body border-0 shadow-sm">
                <div class="d-flex">
                  <div class="icon icon-shape bg-gradient-warning shadow text-center border-radius-md">
                    <i class="fas fa-exclamation-triangle text-lg opacity-10" aria-hidden="true"></i>
                  </div>
                  <div class="ms-3">
                    <h6 class="mb-0">Issues Found</h6>
                    <span class="text-sm text-muted">
                      {% if latest_stats %}
                        {{ latest_stats.issues }}
                      {% else %}
                        No data available
                      {% endif %}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {% if meta_tags_files %}
            <div class="table-responsive mt-4">
              <table class="table table-flush" id="snapshots-table">
                <thead class="thead-light">
                  <tr>
                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Date</th>
                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Pages Scanned</th>
                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Status</th>
                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {% for file in meta_tags_files %}
                    <tr>
                      <td>
                        <div class="d-flex px-2 py-1">
                          <div class="d-flex flex-column justify-content-center">
                            <h6 class="mb-0 text-sm">{{ file|basename }}</h6>
                          </div>
                        </div>
                      </td>
                      <td>
                        <span class="text-xs font-weight-bold" id="pages-count-{{ forloop.counter }}">Loading...</span>
                      </td>
                      <td>
                        <span class="badge badge-sm bg-gradient-success">Completed</span>
                      </td>
                      <td>
                        <div class="dropdown">
                          <button class="btn btn-link text-secondary mb-0" data-bs-toggle="dropdown">
                            <i class="fa fa-ellipsis-v text-xs"></i>
                          </button>
                          <ul class="dropdown-menu">
                            <li>
                              <a class="dropdown-item" href="#" onclick="viewSnapshot('{{ file }}')">
                                <i class="fas fa-eye me-2"></i>View Report
                              </a>
                            </li>
                            <li>
                              <a class="dropdown-item" href="{% url 'file_manager' %}file/{{ user.id }}/meta-tags/{{ file }}">
                                <i class="fas fa-download me-2"></i>Download JSON
                              </a>
                            </li>
                            <li>
                              <a class="dropdown-item" href="#" onclick="compareWithPrevious('{{ file }}')">
                                <i class="fas fa-code-branch me-2"></i>Compare Changes
                              </a>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li>
                              <a class="dropdown-item text-danger" href="#" data-bs-toggle="modal" data-bs-target="#delete-{{ forloop.counter }}">
                                <i class="fas fa-trash me-2"></i>Delete
                              </a>
                            </li>
                          </ul>
                        </div>
                      </td>
                    </tr>
                  {% endfor %}
                </tbody>
              </table>
            </div>
          {% else %}
            <div class="text-center py-4">
              <div class="icon icon-shape icon-sm bg-gradient-secondary shadow text-center mb-3 mx-auto">
                <i class="fas fa-code text-white opacity-10"></i>
              </div>
              <h6 class="text-dark">No Snapshots Available</h6>
              <p class="text-secondary text-sm">Create your first snapshot to start tracking meta tags.</p>
            </div>
          {% endif %}
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Meta Tags View Modal -->
<div class="modal fade" id="viewMetaTagsModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Meta Tags Report</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="metaTagsReport"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn bg-gradient-primary" onclick="downloadReport()">
          <i class="fas fa-download me-2"></i>Download Report
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Delete Modals -->
{% for file in meta_tags_files %}
  <div class="modal fade" id="delete-{{ forloop.counter }}" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="exampleModalLabel">Delete File</h1>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          Are you sure you want to delete {{ file|urlencode }}?
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <a class="btn btn-danger" href="/delete-file/meta-tags/{{ file|basename|urlencode }}/">Delete</a>
        </div>
      </div>
    </div>
  </div>
{% endfor %}

{% endblock content %}

{% block extra_js %}
{{ block.super }}
<!-- SweetAlert2 -->
<script src="{% static 'assets/js/plugins/sweetalert.min.js' %}"></script>
<!-- DataTables -->
<script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
<script src="{% static 'seo_manager/js/meta_tags_dashboard.js' %}?v={% now 'YmdHis' %}"></script>
{% endblock extra_js %}

================
File: seo_manager/templates/seo_manager/projects/edit_project.html
================
{% extends "layouts/base.html" %}

{% block title %} Edit Project {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0">
          <h6>Edit Project</h6>
        </div>
        <div class="card-body">
          <form method="post">
            {% csrf_token %}
            
            {% for field in form %}
            <div class="form-group">
              <label for="{{ field.id_for_label }}" class="form-control-label">{{ field.label }}</label>
              {{ field }}
              {% if field.help_text %}
                <small class="form-text text-muted">{{ field.help_text }}</small>
              {% endif %}
              {% if field.errors %}
                {% for error in field.errors %}
                  <div class="text-danger">{{ error }}</div>
                {% endfor %}
              {% endif %}
            </div>
            {% endfor %}
            
            <div class="d-flex justify-content-end mt-4">
              <a href="{% url 'seo_manager:client_detail' client_id %}" class="btn btn-light m-0">Cancel</a>
              <button type="submit" class="btn bg-gradient-primary m-0 ms-2">Save Changes</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block extra_js %}
<script>
  // Initialize any special form widgets here if needed
  document.addEventListener('DOMContentLoaded', function() {
    // Example: Initialize date pickers
    flatpickr('.datepicker', {
      dateFormat: 'Y-m-d'
    });
  });
</script>
{% endblock extra_js %}

================
File: seo_manager/templates/seo_manager/projects/project_detail.html
================
{% extends 'layouts/base.html' %}
{% load static %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12 col-xl-8">
      <div class="card">
        <div class="card-header pb-0">
          <div class="d-flex align-items-center">
            <h5 class="mb-0">{{ project.title }}</h5>
            <a href="{% url 'seo_manager:project_edit' project.id %}" class="btn bg-gradient-primary btn-sm ms-auto">
              Edit Project
            </a>
          </div>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-control-label">Status</label>
                <div>
                  <span class="badge bg-gradient-{% if project.status == 'completed' %}success{% elif project.status == 'in_progress' %}info{% elif project.status == 'planned' %}secondary{% else %}warning{% endif %}">
                    {{ project.get_status_display }}
                  </span>
                </div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-control-label">Implementation Date</label>
                <p>{{ project.implementation_date }}</p>
              </div>
            </div>
            <div class="col-md-12">
              <div class="form-group">
                <label class="form-control-label">Description</label>
                <p>{{ project.description }}</p>
              </div>
            </div>
          </div>

          {% if project.documentation_file %}
          <div class="row mt-4">
            <div class="col-12">
              <div class="card card-body border card-plain border-radius-lg">
                <h6 class="mb-0">Documentation</h6>
                <a href="{{ project.documentation_file.url }}" class="text-sm" target="_blank">
                  <i class="fas fa-file-pdf me-2"></i>
                  View Documentation
                </a>
              </div>
            </div>
          </div>
          {% endif %}
        </div>
      </div>
    </div>

    <div class="col-12 col-xl-4">
      <!-- Targeted Keywords Card -->
      <div class="card">
        <div class="card-header pb-0">
          <h6>Targeted Keywords</h6>
        </div>
        <div class="card-body p-3">
          <div class="table-responsive">
            <table class="table align-items-center mb-0">
              <thead>
                <tr>
                  <th>Keyword</th>
                  <th>Initial Rank</th>
                  <th>Current Rank</th>
                </tr>
              </thead>
              <tbody>
                {% for keyword in project.targeted_keywords.all %}
                <tr>
                  <td>{{ keyword.keyword }}</td>
                  <td>
                    {% with initial_rank=project.initial_rankings|get_item:keyword.keyword %}
                      {{ initial_rank|default:"-" }}
                    {% endwith %}
                  </td>
                  <td>
                    {% with latest_ranking=keyword.ranking_history.first %}
                      {% if latest_ranking %}
                        {{ latest_ranking.average_position|floatformat:1 }}
                      {% else %}
                        -
                      {% endif %}
                    {% endwith %}
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Ranking History Chart -->
  <div class="row mt-4">
    <div class="col-12">
      <div class="card z-index-2">
        <div class="card-header pb-0">
          <h6>Keyword Rankings Over Time</h6>
        </div>
        <div class="card-body p-3">
          <div class="chart">
            <canvas id="ranking-history-chart" class="chart-canvas" height="300"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Add this section after the project details -->
  <div class="row mt-4">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0">
          <h6>Project Impact Analysis</h6>
          <p class="text-sm mb-0">
            Comparing keyword performance 30 days before and after implementation
          </p>
        </div>
        <div class="card-body p-3">
          <div class="table-responsive">
            <table class="table align-items-center mb-0">
              <thead>
                <tr>
                  <th>Keyword</th>
                  <th>Pre-Implementation Avg</th>
                  <th>Post-Implementation Avg</th>
                  <th>Position Improvement</th>
                  <th>Current Position</th>
                </tr>
              </thead>
              <tbody>
                {% for metric in performance_metrics %}
                <tr>
                  <td>{{ metric.keyword }}</td>
                  <td>{{ metric.pre_avg|default:"-" }}</td>
                  <td>{{ metric.post_avg|default:"-" }}</td>
                  <td>
                    {% if metric.improvement %}
                      <span class="text-{% if metric.improvement > 0 %}success{% elif metric.improvement < 0 %}danger{% else %}secondary{% endif %}">
                        {{ metric.improvement|floatformat:1 }}
                      </span>
                    {% else %}
                      -
                    {% endif %}
                  </td>
                  <td>{{ metric.current_position|floatformat:1|default:"-" }}</td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="{% static 'assets/js/plugins/chartjs.min.js' %}"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const ctx = document.getElementById("ranking-history-chart").getContext("2d");
    const chartData = JSON.parse('{{ ranking_history_data|escapejs }}');
    
    new Chart(ctx, {
      type: "line",
      data: {
        labels: chartData.labels,
        datasets: chartData.datasets
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: true,
          }
        },
        interaction: {
          intersect: false,
          mode: 'index',
        },
        scales: {
          y: {
            grid: {
              drawBorder: false,
              display: true,
              drawOnChartArea: true,
              drawTicks: false,
              borderDash: [5, 5]
            },
            ticks: {
              display: true,
              padding: 10,
              color: '#b2b9bf',
              font: {
                size: 11,
                family: "Open Sans",
                style: 'normal',
                lineHeight: 2
              },
            },
            reverse: true
          },
          x: {
            grid: {
              drawBorder: false,
              display: true,
              drawOnChartArea: true,
              drawTicks: false,
              borderDash: [5, 5]
            },
            ticks: {
              display: true,
              color: '#b2b9bf',
              padding: 10,
              font: {
                size: 11,
                family: "Open Sans",
                style: 'normal',
                lineHeight: 2
              },
            }
          },
        },
      },
    });
  });
</script>
{% endblock %}

================
File: seo_manager/templates/seo_manager/projects/project_list_table.html
================
<table class="table table-flush" id="projects-table">
  <thead class="thead-light">
    <tr>
      <th>Project</th>
      <th>Status</th>
      <th>Implementation Date</th>
      <th>Completion Date</th>
      <th>Keywords</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    {% for project in projects %}
    <tr>
      <td>
        <div class="d-flex flex-column">
          <h6 class="mb-0 text-sm">{{ project.title }}</h6>
          <p class="text-xs text-secondary mb-0">{{ project.description|truncatechars:50 }}</p>
        </div>
      </td>
      <td>
        <span class="badge bg-gradient-{% if project.status == 'completed' %}success{% elif project.status == 'in_progress' %}info{% elif project.status == 'planned' %}secondary{% else %}warning{% endif %}">
          {{ project.get_status_display }}
        </span>
      </td>
      <td>{{ project.implementation_date }}</td>
      <td>{{ project.completion_date|default:"-" }}</td>
      <td>
        <span class="text-sm">{{ project.targeted_keywords.count }} keywords</span>
      </td>
      <td>
        <a href="#" class="text-secondary font-weight-bold text-xs" data-bs-toggle="modal" data-bs-target="#view-project-{{ project.id }}">
          View Details
        </a>
      </td>
    </tr>
    {% endfor %}
  </tbody>
</table>

================
File: seo_manager/templates/seo_manager/projects/project_list.html
================
{% extends 'layouts/base.html' %}
{% load static %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0">
          <div class="d-lg-flex">
            <div>
              <h5 class="mb-0">SEO Projects - {{ client.name }}</h5>
              <p class="text-sm mb-0">
                Track and manage SEO implementation projects
              </p>
            </div>
            <div class="ms-auto my-auto mt-lg-0 mt-4">
              <div class="ms-auto my-auto">
                <a href="{% url 'seo_manager:project_create' client.id %}" class="btn bg-gradient-primary btn-sm mb-0">
                  <i class="fas fa-plus"></i>&nbsp;&nbsp;New Project
                </a>
              </div>
            </div>
          </div>
        </div>
        <div class="card-body px-0 pb-0">
          <div class="table-responsive">
            <table class="table table-flush" id="projects-list">
              <thead class="thead-light">
                <tr>
                  <th>Project</th>
                  <th>Status</th>
                  <th>Implementation Date</th>
                  <th>Completion Date</th>
                  <th>Keywords</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {% for project in projects %}
                <tr>
                  <td>
                    <div class="d-flex flex-column">
                      <h6 class="mb-0 text-sm">{{ project.title }}</h6>
                      <p class="text-xs text-secondary mb-0">{{ project.description|truncatechars:50 }}</p>
                    </div>
                  </td>
                  <td>
                    <span class="badge bg-gradient-{% if project.status == 'completed' %}success{% elif project.status == 'in_progress' %}info{% elif project.status == 'planned' %}secondary{% else %}warning{% endif %}">
                      {{ project.get_status_display }}
                    </span>
                  </td>
                  <td>{{ project.implementation_date }}</td>
                  <td>{{ project.completion_date|default:"-" }}</td>
                  <td>
                    <span class="text-sm">{{ project.targeted_keywords.count }} keywords</span>
                  </td>
                  <td>
                    <a href="{% url 'seo_manager:project_detail' project.id %}" class="text-secondary font-weight-bold text-xs">
                      View Details
                    </a>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
  $(document).ready(function() {
    $('#projects-list').DataTable({
      dom: 'Bfrtip',
      buttons: [
        'copy', 'csv', 'excel', 'pdf'
      ]
    });
  });
</script>
{% endblock %}

================
File: seo_manager/templates/seo_manager/reports/monthly_report.html
================
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h4 class="text-dark mb-2">SEO Performance Report - {{ report.period }}</h4>
            <p class="text-secondary mb-4">Generated for {{ client.name }}</p>
        </div>
    </div>

    <!-- Stats Cards Row -->
    <div class="row g-3">
        <!-- Total Keywords Card -->
        <div class="col-md-3">
            <div class="card h-100">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="text-secondary mb-1">Total Keywords</h6>
                            <h3 class="font-weight-bold mb-0">{{ report.keywords.total }}</h3>
                        </div>
                        <div class="icon icon-shape bg-gradient-dark text-white rounded-circle shadow">
                            <i class="fas fa-key"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Improved Card -->
        <div class="col-md-3">
            <div class="card h-100">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="text-secondary mb-1">Improved</h6>
                            <h3 class="font-weight-bold mb-0">{{ report.keywords.improved }}</h3>
                        </div>
                        <div class="icon icon-shape bg-gradient-success text-white rounded-circle shadow">
                            <i class="fas fa-arrow-up"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Declined Card -->
        <div class="col-md-3">
            <div class="card h-100">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="text-secondary mb-1">Declined</h6>
                            <h3 class="font-weight-bold mb-0">{{ report.keywords.declined }}</h3>
                        </div>
                        <div class="icon icon-shape bg-gradient-danger text-white rounded-circle shadow">
                            <i class="fas fa-arrow-down"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Unchanged Card -->
        <div class="col-md-3">
            <div class="card h-100">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="text-secondary mb-1">Unchanged</h6>
                            <h3 class="font-weight-bold mb-0">{{ report.keywords.unchanged }}</h3>
                        </div>
                        <div class="icon icon-shape bg-gradient-info text-white rounded-circle shadow">
                            <i class="fas fa-equals"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tables Row -->
    <div class="row mt-4">
        <!-- Top Improvements Table -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body p-3">
                    <h6 class="text-dark mb-3">Top Improvements</h6>
                    <div class="table-responsive">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Keyword</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Improvement</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for item in report.top_improvements %}
                                <tr>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{ item.keyword }}</p>
                                    </td>
                                    <td>
                                        <span class="text-success text-sm font-weight-bold">
                                            <i class="fas fa-arrow-up me-1"></i>{{ item.improvement }}
                                        </span>
                                    </td>
                                </tr>
                                {% empty %}
                                <tr>
                                    <td colspan="2" class="text-center text-sm text-secondary">
                                        No improvements to report
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Needs Attention Table -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body p-3">
                    <h6 class="text-dark mb-3">Needs Attention</h6>
                    <div class="table-responsive">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Keyword</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Decline</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for item in report.needs_attention %}
                                <tr>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0">{{ item.keyword }}</p>
                                    </td>
                                    <td>
                                        <span class="text-danger text-sm font-weight-bold">
                                            <i class="fas fa-arrow-down me-1"></i>{{ item.decline }}
                                        </span>
                                    </td>
                                </tr>
                                {% empty %}
                                <tr>
                                    <td colspan="2" class="text-center text-sm text-secondary">
                                        No keywords need immediate attention
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.icon-shape {
    width: 48px;
    height: 48px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    flex-shrink: 0;
    margin-left: 1rem;
}

.icon-shape i {
    font-size: 1.25rem;
    line-height: 1;
    position: relative;
    top: 1px;
}

.card-body {
    padding: 1rem 1.5rem !important;
}

.d-flex.align-items-center {
    min-height: 48px;
}

.card {
    box-shadow: 0 0 2rem 0 rgba(136, 152, 170, .15);
    border: 0;
}

.text-secondary {
    color: #8392ab !important;
}

.font-weight-bold {
    font-weight: 600 !important;
}

.table > :not(caption) > * > * {
    padding: 0.75rem 1.5rem;
}

.bg-gradient-dark {
    background: linear-gradient(310deg, #141727, #3A416F);
}

.bg-gradient-success {
    background: linear-gradient(310deg, #17AD37, #98EC2D);
}

.bg-gradient-danger {
    background: linear-gradient(310deg, #EA0606, #FF667C);
}

.bg-gradient-info {
    background: linear-gradient(310deg, #2152FF, #21D4FD);
}
</style>

================
File: seo_manager/templates/seo_manager/activity_log.html
================
{% extends 'layouts/base.html' %}
{% load static %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Activity Log</h6>
                </div>
                <div class="card-body p-3">
                    <div class="timeline timeline-one-side" data-timeline-axis-style="dotted">
                        {% for activity in activities %}
                            <div class="timeline-block mb-0">
                                <span class="timeline-step">
                                    <i class="ni ni-bell-55 text-success text-gradient"></i>
                                </span>
                                <div class="timeline-content">
                                    <p class="text-sm mb-0">
                                        <span class="font-weight-bold">{{ activity.timestamp|date:"d M Y H:i" }}</span> - 
                                        <span class="text-primary">{{ activity.user.username }}</span> 
                                        {{ activity.action }} 
                                        {% if activity.client %}
                                            for client <span class="text-info">{{ activity.client.name }}</span>
                                        {% endif %}
                                        <span class="badge badge-sm bg-gradient-{{ activity.category }}">{{ activity.get_category_display }}</span>
                                    </p>
                                    {% if activity.details %}
                                        <div class="mt-0">
                                            <pre class="text-xs">{{ activity.details|pprint }}</pre>
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock content %}

{% block extra_js %}
{{ block.super }}
<script>
    // Any additional JavaScript for the activity log page can be added here
</script>
{% endblock extra_js %}

================
File: seo_manager/templates/seo_manager/add_client.html
================
{% extends "layouts/base.html" %}

{% block title %} Add Client {% endblock %}

{% block content %}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Add New Client</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <div class="card-body">
                            <form method="post">
                                {% csrf_token %}
                                {% for field in form %}
                                    <div class="form-group">
                                        <label for="{{ field.id_for_label }}">{{ field.label }}</label><br>
                                        {{ field }}
                                        {% if field.help_text %}
                                            <small class="form-text text-muted">{{ field.help_text }}</small>
                                        {% endif %}
                                        {% for error in field.errors %}
                                            <div class="invalid-feedback d-block">
                                                {{ error }}
                                            </div>
                                        {% endfor %}
                                    </div>
                                {% endfor %}
                                <button type="submit" class="btn btn-primary">Add Client</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    {% include 'includes/footer.html' %}
</div>

{% endblock content %}

{% block extra_js %}
<script>
    // Any additional JavaScript can be added here
</script>
{% endblock extra_js %}

================
File: seo_manager/templates/seo_manager/add_ga_credentials_service_account.html
================
{% extends "layouts/base.html" %}

{% block title %} Add GA Credentials (Service Account) - {{ client.name }} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Add Google Analytics Credentials (Service Account) for {{ client.name }}</h6>
        </div>
        <div class="card-body">
          <form method="post" enctype="multipart/form-data">
            {% csrf_token %}
            <div class="form-group">
              <label for="service_account_file">Upload Service Account JSON File</label>
              <input type="file" class="form-control-file" id="service_account_file" name="service_account_file" required>
            </div>
            <button type="submit" class="btn btn-primary">Upload and Add Credentials</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock content %}

================
File: seo_manager/templates/seo_manager/add_sc_credentials_service_account.html
================
{% extends "layouts/base.html" %}

{% block title %} Add Search Console Credentials (Service Account) - {{ client.name }} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Add Search Console Credentials (Service Account) for {{ client.name }}</h6>
        </div>
        <div class="card-body">
          <form method="post" enctype="multipart/form-data">
            {% csrf_token %}
            <div class="form-group">
              <label for="service_account_file">Upload Service Account JSON File</label>
              <input type="file" class="form-control-file" id="service_account_file" name="service_account_file" required>
            </div>
            <button type="submit" class="btn btn-primary">Upload and Add Credentials</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock content %}

================
File: seo_manager/templates/seo_manager/base.html
================
{% extends "layouts/base.html" %}

{% block title %}SEO Client Manager{% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            {% block seo_content %}{% endblock %}
        </div>
    </div>
</div>
{% endblock content %}

================
File: seo_manager/templates/seo_manager/client_analytics.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Analytics - {{ client.name }} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-md-6">
                            <h1 class="mb-0">Analytics for {{ client.name }}</h1>
                        </div>
                        <div class="col-md-6">
                            {% if analytics_data %}
                            <div class="d-flex justify-content-end">
                                <select id="dateRangeSelect" class="form-control">
                                    <option value="7" {% if selected_ga_range == '7' %}selected{% endif %}>Last 7 Days</option>
                                    <option value="14" {% if selected_ga_range == '14' %}selected{% endif %}>Last 14 Days</option>
                                    <option value="30" {% if selected_ga_range == '30' %}selected{% endif %}>Last 30 Days</option>
                                    <option value="60" {% if selected_ga_range == '60' %}selected{% endif %}>Last 60 Days</option>
                                    <option value="90" {% if selected_ga_range == '90' %}selected{% endif %}>Last 90 Days</option>
                                    <option value="365" {% if selected_ga_range == '365' %}selected{% endif %}>Last Year</option>
                                    <option value="custom" {% if selected_ga_range == 'custom' %}selected{% endif %}>Custom Range</option>
                                </select>
                            </div>
                            <!-- Custom Date Range Inputs (initially hidden) -->
                            <div id="customDateInputs" class="mt-2 d-none">
                                <div class="row">
                                    <div class="col-6">
                                        <input type="text" id="startDate" class="form-control datepicker" placeholder="Start Date">
                                    </div>
                                    <div class="col-6">
                                        <input type="text" id="endDate" class="form-control datepicker" placeholder="End Date">
                                    </div>
                                </div>
                                <div class="text-end mt-2">
                                    <button id="applyCustomDates" class="btn btn-primary btn-sm">Apply</button>
                                </div>
                            </div>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Google Analytics Section -->
    {% if analytics_data %}
    <!-- First Row -->
    <div class="row">
        <!-- Active Users Card -->
        <div class="col-xl-4 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-2">
                    <div class="row mb-0">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Active Users</p>
                                <div class="d-flex align-items-center">
                                    <h5 class="font-weight-bolder mb-0" id="active-users-count">Loading...</h5>
                                    <span class="text-sm ms-1" id="active-users-change"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="active-users-chart" style="min-height: 250px;"></div>
                </div>
            </div>
        </div>

        <!-- Sessions Card -->
        <div class="col-xl-4 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-2">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Sessions</p>
                                <div class="d-flex align-items-center">
                                    <h5 class="font-weight-bolder mb-0" id="sessions-count">Loading...</h5>
                                    <span class="text-sm ms-1" id="sessions-change"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="sessions-chart" class="mt-2 h-50"></div>
                </div>
            </div>
        </div>

        <!-- Average Session Duration Card -->
        <div class="col-xl-4 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-2">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Average Session Duration</p>
                                <div class="d-flex align-items-center">
                                    <h5 class="font-weight-bolder mb-0" id="avg-duration-count">Loading...</h5>
                                    <span class="text-sm ms-1" id="avg-duration-change"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="avg-duration-chart" class="mt-2 h-50"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Second Row -->
    <div class="row">
        <!-- Page Views Card -->
        <div class="col-xl-4 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-2">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Page Views</p>
                                <div class="d-flex align-items-center">
                                    <h5 class="font-weight-bolder mb-0" id="page-views-count">Loading...</h5>
                                    <span class="text-sm ms-1" id="page-views-change"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="page-views-chart" class="mt-2 h-50"></div>
                </div>
            </div>
        </div>

        <!-- Pages/Session Card -->
        <div class="col-xl-4 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-2">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Pages/Session</p>
                                <div class="d-flex align-items-center">
                                    <h5 class="font-weight-bolder mb-0" id="pages-per-session-count">Loading...</h5>
                                    <span class="text-sm ms-1" id="pages-per-session-change"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="pages-per-session-chart" class="mt-2 h-50"></div>
                </div>
            </div>
        </div>

        <!-- New Users Card -->
        <div class="col-xl-4 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-2">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">New Users</p>
                                <div class="d-flex align-items-center">
                                    <h5 class="font-weight-bolder mb-0" id="new-users-count">Loading...</h5>
                                    <span class="text-sm ms-1" id="new-users-change"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="new-users-chart" class="mt-2 h-50"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Third Row -->
    <div class="row">
        <!-- Bounce Rate Card -->
        <div class="col-xl-6 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-2">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Bounce Rate</p>
                                <div class="d-flex align-items-center">
                                    <h5 class="font-weight-bolder mb-0" id="bounce-rate-count">Loading...</h5>
                                    <span class="text-sm ms-1" id="bounce-rate-change"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="bounce-rate-chart" class="mt-2 h-50"></div>
                </div>
            </div>
        </div>

        <!-- Engaged Sessions Card -->
        <div class="col-xl-6 col-sm-6 mb-4">
            <div class="card">
                <div class="card-body p-2">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Engaged Sessions</p>
                                <div class="d-flex align-items-center">
                                    <h5 class="font-weight-bolder mb-0" id="engaged-sessions-count">Loading...</h5>
                                    <span class="text-sm ms-1" id="engaged-sessions-change"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="engaged-sessions-chart" class="mt-2 h-50"></div>
                </div>
            </div>
        </div>
    </div>
    {% else %}
    <div class="card mb-4">
        <div class="card-body">
            <div class="d-flex align-items-center">
                <div class="icon icon-shape icon-sm bg-gradient-warning shadow text-center me-2">
                    <i class="fas fa-exclamation-triangle opacity-10"></i>
                </div>
                <div>
                    <h6 class="mb-0">Google Analytics Data Unavailable</h6>
                    <p class="text-sm mb-0">Analytics data is not available for this client.</p>
                </div>
            </div>
        </div>
    </div>
    {% endif %}

    <!-- Search Console Section -->
    {% if search_console_data %}
    <div class="card mb-4">
        <div class="card-header pb-0">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h6>Search Console Performance Data</h6>
                </div>
                <div class="col-md-6">
                    <div class="d-flex justify-content-end">
                        <select id="scDateRangeSelect" class="form-control">
                            <option value="7" {% if selected_sc_range == '7' %}selected{% endif %}>Last 7 Days</option>
                            <option value="14" {% if selected_sc_range == '14' %}selected{% endif %}>Last 14 Days</option>
                            <option value="30" {% if selected_sc_range == '30' %}selected{% endif %}>Last 30 Days</option>
                            <option value="60" {% if selected_sc_range == '60' %}selected{% endif %}>Last 60 Days</option>
                            <option value="90" {% if selected_sc_range == '90' %}selected{% endif %}>Last 90 Days</option>
                            <option value="365" {% if selected_sc_range == '365' %}selected{% endif %}>Last Year</option>
                            <option value="custom" {% if selected_sc_range == 'custom' %}selected{% endif %}>Custom Range</option>
                        </select>
                    </div>
                    <!-- Custom Date Range Inputs for Search Console (initially hidden) -->
                    <div id="scCustomDateInputs" class="mt-2 d-none">
                        <div class="row">
                            <div class="col-6">
                                <input type="text" id="scStartDate" class="form-control datepicker" placeholder="Start Date">
                            </div>
                            <div class="col-6">
                                <input type="text" id="scEndDate" class="form-control datepicker" placeholder="End Date">
                            </div>
                        </div>
                        <div class="text-end mt-2">
                            <button id="scApplyCustomDates" class="btn btn-primary btn-sm">Apply</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
            <div class="table-responsive p-0">
                <table class="table table-flush table-striped text-xs table-sm" id="search-console-table">
                    <thead class="thead-light">
                        <tr>
                            <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">Query</th>
                            <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">Impressions</th>
                            <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">Clicks</th>
                            <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">CTR</th>
                            <th class="text-uppercase text-secondary text-xs font-weight-bolder opacity-7">Position</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for item in search_console_data %}
                        <tr>
                            <td class="text-xs font-weight-normal">{{ item.query }}</td>
                            <td class="text-xs font-weight-normal">{{ item.impressions }}</td>
                            <td class="text-xs font-weight-normal">{{ item.clicks }}</td>
                            <td class="text-xs font-weight-normal">{{ item.ctr|floatformat:2 }}%</td>
                            <td class="text-xs font-weight-normal">{{ item.position|floatformat:1 }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    {% else %}
    <div class="card mb-4">
        <div class="card-body">
            <div class="d-flex align-items-center">
                <div class="icon icon-shape icon-sm bg-gradient-warning shadow text-center me-2">
                    <i class="fas fa-exclamation-triangle opacity-10"></i>
                </div>
                <div>
                    <h6 class="mb-0">Search Console Data Unavailable</h6>
                    <p class="text-sm mb-0">Search Console data is not available for this client.</p>
                </div>
            </div>
        </div>
    </div>
    {% endif %}

    {% if not analytics_data and not search_console_data %}
    <div class="card">
        <div class="card-body text-center py-5">
            <div class="icon icon-shape icon-xl bg-gradient-info shadow text-center mb-3">
                <i class="fas fa-chart-line opacity-10"></i>
            </div>
            <h4>No Data Available</h4>
            <p class="text-muted">No analytics or search console data is currently available for this client.</p>
        </div>
    </div>
    {% endif %}
</div>
{% endblock content %}
{% block extra_css %}
{% endblock extra_css %}
{% block extra_js %}
{% if analytics_data or search_console_data %}
    <script src="{% static 'assets/js/plugins/choices.min.js' %}"></script>
    <script src="{% static 'assets/js/plugins/flatpickr.min.js' %}"></script>
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script src="{% static 'assets/js/plugins/datatables.js' %}"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            {% if analytics_data %}
            // Initialize Analytics components
            const dateRangeSelect = new Choices('#dateRangeSelect', {
                searchEnabled: false,
                itemSelectText: '',
                shouldSort: false,
                classNames: {
                    containerOuter: 'choices w-50',
                    containerInner: 'choices__inner w-100'
                }
            });

            // Initialize Flatpickr for date inputs
            const dateConfig = {
                maxDate: "today",
                dateFormat: "Y-m-d"
            };
            const startDatePicker = flatpickr("#startDate", dateConfig);
            const endDatePicker = flatpickr("#endDate", dateConfig);

            // Handle date range changes
            document.getElementById('dateRangeSelect').addEventListener('change', function(e) {
                const customDateInputs = document.getElementById('customDateInputs');
                if (e.target.value === 'custom') {
                    customDateInputs.classList.remove('d-none');
                } else {
                    customDateInputs.classList.add('d-none');
                    fetchAnalyticsData(e.target.value);
                }
            });

            // Handle custom date range submission
            document.getElementById('applyCustomDates').addEventListener('click', function() {
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                
                if (startDate && endDate) {
                    fetchAnalyticsData('custom', startDate, endDate);
                } else {
                    alert('Please select both start and end dates');
                }
            });

            function fetchAnalyticsData(range, startDate = null, endDate = null) {
                const url = new URL(window.location.href);
                url.searchParams.set('ga_range', range);
                if (startDate && endDate) {
                    url.searchParams.set('ga_start_date', startDate);
                    url.searchParams.set('ga_end_date', endDate);
                }
                window.location.href = url.toString();
            }

            (function setupAnalyticsCharts() {
                const analyticsData = JSON.parse('{{ analytics_data|escapejs }}');
                
                // Common chart options
                const commonChartOptions = {
                    chart: {
                        type: 'area',
                        height: 250,
                        sparkline: false,
                        toolbar: {
                            show: false
                        },
                        animations: {
                            enabled: true,
                            easing: 'easeinout',
                            speed: 1000,
                            animateGradually: {
                                enabled: true,
                                delay: 150
                            },
                            dynamicAnimation: {
                                enabled: true,
                                speed: 350
                            }
                        },
                        dropShadow: {
                            enabled: true,
                            top: 3,
                            left: 2,
                            blur: 4,
                            opacity: 0.1
                        }
                    },
                    stroke: {
                        curve: 'smooth',
                        width: 3,
                        lineCap: 'round',
                        colors: ['#5e72e4']
                    },
                    grid: {
                        show: true,
                        borderColor: '#f8f9fa',
                        strokeDashArray: 5,
                        position: 'back',
                        xaxis: {
                            lines: {
                                show: true
                            }
                        },
                        yaxis: {
                            lines: {
                                show: true
                            }
                        },
                        padding: {
                            top: 0,
                            right: 0,
                            bottom: 0,
                            left: 10
                        }
                    },
                    fill: {
                        type: 'gradient',
                        gradient: {
                            shade: 'light',
                            type: 'vertical',
                            shadeIntensity: 0.5,
                            gradientToColors: ['#fff'],
                            inverseColors: false,
                            opacityFrom: 0.7,
                            opacityTo: 0.1,
                            stops: [0, 100]
                        }
                    },
                    colors: ['#5e72e4'],
                    dataLabels: {
                        enabled: false
                    },
                    xaxis: {
                        type: 'datetime',
                        labels: {
                            show: true,
                            format: 'MMM dd',
                            style: {
                                colors: '#8392ab',
                                fontSize: '12px',
                                fontFamily: 'Open Sans, sans-serif',
                                fontWeight: 400
                            }
                        },
                        axisBorder: {
                            show: false
                        },
                        axisTicks: {
                            show: false
                        }
                    },
                    yaxis: {
                        show: true,
                        labels: {
                            show: true,
                            style: {
                                colors: '#8392ab',
                                fontSize: '12px',
                                fontFamily: 'Open Sans, sans-serif',
                                fontWeight: 400
                            },
                            formatter: function(value) {
                                return value >= 1000 ? (value / 1000).toFixed(1) + 'k' : value;
                            }
                        }
                    },
                    tooltip: {
                        enabled: true,
                        shared: true,
                        intersect: false,
                        followCursor: true,
                        theme: 'dark',
                        x: {
                            format: 'MMM dd, yyyy'
                        },
                        y: {
                            formatter: function(value) {
                                return value.toLocaleString()
                            }
                        },
                        style: {
                            fontSize: '12px',
                            fontFamily: 'Open Sans, sans-serif'
                        }
                    },
                    markers: {
                        size: 4,
                        colors: ['#5e72e4'],
                        strokeColors: '#fff',
                        strokeWidth: 2,
                        hover: {
                            size: 7,
                            sizeOffset: 3
                        }
                    },
                    states: {
                        hover: {
                            filter: {
                                type: 'lighten',
                                value: 0.04
                            }
                        },
                        active: {
                            allowMultipleDataPointsSelection: false,
                            filter: {
                                type: 'darken',
                                value: 0.2
                            }
                        }
                    }
                };

                // Create charts for each metric
                const metrics = [
                    { 
                        id: 'active-users', 
                        key: 'active_users', 
                        format: value => value.toLocaleString()
                    },
                    { 
                        id: 'sessions', 
                        key: 'sessions', 
                        format: value => value.toLocaleString()
                    },
                    { 
                        id: 'avg-duration', 
                        key: 'avg_session_duration', 
                        format: value => formatDuration(value)
                    },
                    { 
                        id: 'page-views', 
                        key: 'page_views', 
                        format: value => value.toLocaleString()
                    },
                    { 
                        id: 'pages-per-session', 
                        key: 'pages_per_session', 
                        format: value => value.toFixed(2)
                    },
                    { 
                        id: 'new-users', 
                        key: 'new_users', 
                        format: value => value.toLocaleString()
                    },
                    { 
                        id: 'bounce-rate', 
                        key: 'bounce_rate', 
                        format: value => value.toFixed(2) + '%'
                    },
                    { 
                        id: 'engaged-sessions', 
                        key: 'engaged_sessions', 
                        format: value => value.toLocaleString()
                    }
                ];

                metrics.forEach(metric => {
                    const data = analyticsData
                        .map(item => ({
                            x: new Date(item.date).getTime(),
                            y: parseFloat(item[metric.key]) || 0
                        }))
                        .sort((a, b) => a.x - b.x);

                    // Split data into current and previous periods
                    const midPoint = Math.floor(data.length / 2);
                    const previousPeriod = data.slice(0, midPoint);
                    const currentPeriod = data.slice(midPoint);

                    // Calculate period values based on metric type
                    let currentValue, previousValue;
                    if (['bounce_rate', 'pages_per_session', 'avg_session_duration'].includes(metric.key)) {
                        // Use average for rate-based metrics
                        currentValue = currentPeriod.reduce((sum, val) => sum + val.y, 0) / currentPeriod.length;
                        previousValue = previousPeriod.reduce((sum, val) => sum + val.y, 0) / previousPeriod.length;
                    } else {
                        // Use sum for count-based metrics
                        currentValue = currentPeriod.reduce((sum, val) => sum + val.y, 0);
                        previousValue = previousPeriod.reduce((sum, val) => sum + val.y, 0);
                    }

                    // Update the header value with the current value
                    const headerElement = document.getElementById(`${metric.id}-count`);
                    if (headerElement) {
                        headerElement.textContent = metric.format(currentValue);  // Use current value, not summary
                    }

                    // Calculate and display the percentage change
                    if (previousValue) {
                        const change = ((currentValue - previousValue) / previousValue) * 100;
                        const changeElement = document.getElementById(`${metric.id}-change`);
                        if (changeElement) {
                            changeElement.textContent = `${change >= 0 ? '+' : ''}${change.toFixed(2)}%`;
                            changeElement.className = `text-sm font-weight-bolder ${change >= 0 ? 'text-info' : 'text-danger'}`;
                        }
                    }

                    // Calculate nice round number for max value
                    const maxValue = Math.max(...data.map(point => point.y));
                    const orderOfMagnitude = Math.pow(10, Math.floor(Math.log10(maxValue)));
                    const niceMax = Math.ceil(maxValue / orderOfMagnitude) * orderOfMagnitude;

                    // Create chart with dynamic y-axis configuration
                    const chartOptions = {
                        ...commonChartOptions,
                        chart: {
                            ...commonChartOptions.chart,
                            id: metric.id,
                            toolbar: { show: false }
                        },
                        yaxis: {
                            ...commonChartOptions.yaxis,
                            min: 0,
                            max: niceMax,
                            tickAmount: 4,
                            labels: {
                                formatter: function(value) {
                                    if (metric.key === 'avg_session_duration') {
                                        return formatDuration(value);
                                    }
                                    if (metric.key === 'bounce_rate') {
                                        return value.toFixed(0) + '%';
                                    }
                                    if (value >= 1000) {
                                        return (value / 1000).toFixed(1) + 'k';
                                    }
                                    return value.toFixed(0);
                                }
                            }
                        },
                        series: [{
                            name: metric.id,
                            data: data
                        }]
                    };

                    new ApexCharts(document.querySelector(`#${metric.id}-chart`), chartOptions).render();
                });
            })();
            {% endif %}

            {% if search_console_data %}
            // Initialize Search Console components
            const dataTableSearchConsole = new simpleDatatables.DataTable("#search-console-table", {
                searchable: true,
                fixedHeight: true,
                perPage: 25,
                perPageSelect: [25, 50, 100],
                columns: [{
                    select: [3, 4],
                    sortable: true,
                    type: 'number'
                }]
            });

            // Initialize Choices.js for Search Console dropdown
            const scDateRangeSelect = new Choices('#scDateRangeSelect', {
                searchEnabled: false,
                itemSelectText: '',
                shouldSort: false,
                classNames: {
                    containerOuter: 'choices w-100',
                    containerInner: 'choices__inner w-100'
                }
            });

            // Initialize Flatpickr for Search Console date inputs
            const scStartDatePicker = flatpickr("#scStartDate", dateConfig);
            const scEndDatePicker = flatpickr("#scEndDate", dateConfig);

            // Show/hide custom date inputs based on initial selection for Search Console
            const scCustomDateInputs = document.getElementById('scCustomDateInputs');
            if (document.getElementById('scDateRangeSelect').value === 'custom') {
                scCustomDateInputs.classList.remove('d-none');
            }

            // Handle Search Console date range changes
            document.getElementById('scDateRangeSelect').addEventListener('change', function(e) {
                const customDateInputs = document.getElementById('scCustomDateInputs');
                if (e.target.value === 'custom') {
                    customDateInputs.classList.remove('d-none');
                } else {
                    customDateInputs.classList.add('d-none');
                    const url = new URL(window.location.href);
                    url.searchParams.set('sc_range', e.target.value);
                    // Preserve GA parameters
                    const gaRange = url.searchParams.get('ga_range');
                    const gaStartDate = url.searchParams.get('ga_start_date');
                    const gaEndDate = url.searchParams.get('ga_end_date');
                    if (gaRange) url.searchParams.set('ga_range', gaRange);
                    if (gaStartDate) url.searchParams.set('ga_start_date', gaStartDate);
                    if (gaEndDate) url.searchParams.set('ga_end_date', gaEndDate);
                    window.location.href = url.toString();
                }
            });

            // Handle Search Console custom date range submission
            document.getElementById('scApplyCustomDates').addEventListener('click', function() {
                const startDate = document.getElementById('scStartDate').value;
                const endDate = document.getElementById('scEndDate').value;
                
                if (startDate && endDate) {
                    const url = new URL(window.location.href);
                    url.searchParams.set('sc_range', 'custom');
                    url.searchParams.set('sc_start_date', startDate);
                    url.searchParams.set('sc_end_date', endDate);
                    // Preserve GA parameters
                    const gaRange = url.searchParams.get('ga_range');
                    const gaStartDate = url.searchParams.get('ga_start_date');
                    const gaEndDate = url.searchParams.get('ga_end_date');
                    if (gaRange) url.searchParams.set('ga_range', gaRange);
                    if (gaStartDate) url.searchParams.set('ga_start_date', gaStartDate);
                    if (gaEndDate) url.searchParams.set('ga_end_date', gaEndDate);
                    window.location.href = url.toString();
                } else {
                    alert('Please select both start and end dates');
                }
            });
            {% endif %}
        });

        {% if analytics_data %}
        function formatDuration(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = Math.floor(seconds % 60);
            return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        }
        {% endif %}
    </script>
{% endif %}
{% endblock extra_js %}

================
File: seo_manager/templates/seo_manager/client_detail.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% load custom_filters %}

{% block title %} Client Detail - {{ client.name }} {% endblock %}

{% block extrastyle %}
{{ block.super }}
<link rel="stylesheet" type="text/css" href="{% static 'seo_manager/css/client_detail.css' %}?v={% now 'YmdHis' %}" crossorigin="anonymous"/>
<style>
  .ql-editor {
    min-height: 300px;
    max-height: 500px;
    overflow-y: auto;
  }
  
  .modal-dialog-large {
    max-width: 800px;
  }
  
  .h-300 {
    height: 300px !important;
  }
  
  #add-profile-editor, #edit-profile-editor {
    height: 300px;
    margin-bottom: 20px;
  }
  
  .ql-toolbar.ql-snow {
    border-top-left-radius: 0.5rem;
    border-top-right-radius: 0.5rem;
  }
  
  .ql-container.ql-snow {
    border-bottom-left-radius: 0.5rem;
    border-bottom-right-radius: 0.5rem;
  }
</style>
{% endblock extrastyle %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-md-5">
      <div class="card mb-4">
        <div class="card-header pb-0 d-flex justify-content-between align-items-center bg-gradient-primary">
          <div class="d-flex align-items-center">
            <h6 class="mb-0 me-3 text-white"></h6>
            <h6 class="mb-0 text-white">{{ client.name }}</h6>
          </div>
          <a href="{% url 'seo_manager:edit_client' client.id %}" class="btn btn-xxs btn-white ms-3">
            <i class="fas fa-edit"></i> Edit
          </a>
        </div>
        <div class="card-body px-3 pt-3 pb-2">
          <div class="table-responsive p-0">
            <table class="table align-items-center mb-0">
              <tbody>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">
                    <i class="fas fa-globe me-2"></i> Website URL
                  </td>
                  <td>
                    <a href="{{ client.website_url }}" target="_blank" class="text-xs font-weight-bold mb-0 text-primary">
                      {{ client.website_url }} <i class="fas fa-external-link-alt ms-1"></i>
                    </a>
                  </td>
                </tr>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">
                    <i class="fas fa-circle me-2"></i> Status
                  </td>
                  <td>
                    <span class="badge bg-gradient-{% if client.status == 'active' %}success{% elif client.status == 'inactive' %}secondary{% else %}warning{% endif %} text-xs">
                      {{ client.get_status_display }}
                    </span>
                  </td>
                </tr>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">
                    <i class="fas fa-users me-2"></i> Group
                  </td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ client.group.name|default:"N/A" }}</p>
                  </td>
                </tr>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">
                    <i class="fas fa-bullseye me-2"></i> Target Audience
                  </td>
                  <td style="max-width: 250px;">
                    <p class="text-xs font-weight-bold mb-0" style="white-space: normal; word-wrap: break-word;">{{ client.target_audience|default:"N/A" }}</p>
                  </td>
                </tr>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">
                    <i class="fas fa-calendar-plus me-2"></i> Created At
                  </td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ client.created_at|date:"F d, Y H:i" }}</p>
                  </td>
                </tr>
                <tr>
                  <td class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">
                    <i class="fas fa-calendar-check me-2"></i> Last Updated
                  </td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ client.updated_at|date:"F d, Y H:i" }}</p>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <div class="col-md-7">
      <div class="card mb-4">
        <div class="card-header pb-0 p-3 bg-gradient-dark">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h6 class="mb-0 text-white">Business Objectives</h6>
              <p class="text-sm mb-0 text-white opacity-8">Track and manage business goals</p>
            </div>
            <button type="button" class="btn bg-gradient-light" data-bs-toggle="modal" data-bs-target="#add-objective">
              <i class="fas fa-plus me-2"></i>New Objective
            </button>
          </div>
        </div>
        <div class="card-body p-3">
          <div class="timeline timeline-one-side" data-timeline-axis-style="dashed">
            {% for objective in business_objectives %}
              <div class="timeline-block mb-3">
                <span class="timeline-step">
                  {% if objective.status %}
                    <i class="fas fa-check-circle text-success"></i>
                  {% else %}
                    <i class="fas fa-clock text-warning"></i>
                  {% endif %}
                </span>
                <div class="timeline-content">
                  <div class="d-flex justify-content-between">
                    <div>
                      <h6 class="text-dark text-sm font-weight-bold mb-0">{{ objective.goal }}</h6>
                      <div class="d-flex align-items-center mt-2">
                        <div class="me-3">
                          <span class="text-dark text-xs">Metric:</span>
                          <span class="text-xs ms-1 badge bg-gradient-info">{{ objective.metric }}</span>
                        </div>
                        <div class="me-3">
                          <span class="text-dark text-xs">Target:</span>
                          <span class="text-xs ms-1 badge bg-gradient-warning">{{ objective.target_date }}</span>
                        </div>
                        <div>
                          <span class="text-dark text-xs">Status:</span>
                          <span class="text-xs ms-1 badge bg-gradient-{% if objective.status %}success{% else %}secondary{% endif %}">
                            {% if objective.status %}Active{% else %}Inactive{% endif %}
                          </span>
                        </div>
                      </div>
                    </div>
                    <div class="dropdown">
                      <button class="btn btn-link text-secondary mb-0" data-bs-toggle="dropdown" id="objectiveMenu{{ forloop.counter }}">
                        <i class="fa fa-ellipsis-v text-xs"></i>
                      </button>
                      <ul class="dropdown-menu" aria-labelledby="objectiveMenu{{ forloop.counter }}">
                        <li>
                          <a class="dropdown-item objective-status-toggle" href="#"
                             data-client-id="{{ client.id }}"
                             data-objective-index="{{ forloop.counter0 }}"
                             data-new-status="active">
                            <i class="fas fa-check-circle text-success me-2"></i>Mark as Active
                          </a>
                        </li>
                        <li>
                          <a class="dropdown-item objective-status-toggle" href="#"
                             data-client-id="{{ client.id }}"
                             data-objective-index="{{ forloop.counter0 }}"
                             data-new-status="completed">
                            <i class="fas fa-check-double text-info me-2"></i>Mark as Completed
                          </a>
                        </li>
                        <li>
                          <a class="dropdown-item objective-status-toggle" href="#"
                             data-client-id="{{ client.id }}"
                             data-objective-index="{{ forloop.counter0 }}"
                             data-new-status="on_hold">
                            <i class="fas fa-pause-circle text-warning me-2"></i>Put on Hold
                          </a>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                          <a class="dropdown-item edit-objective" href="#" 
                             data-bs-toggle="modal" 
                             data-bs-target="#edit-objective"
                             data-objective-index="{{ forloop.counter0 }}"
                             data-goal="{{ objective.goal }}"
                             data-metric="{{ objective.metric }}"
                             data-target-date="{{ objective.target_date|date:'Y-m-d' }}"
                             data-status="{{ objective.status|yesno:'true,false' }}">
                            <i class="fas fa-edit me-2"></i>Edit
                          </a>
                        </li>
                        <li>
                          <form method="post" action="{% url 'seo_manager:delete_business_objective' client_id=client.id objective_index=forloop.counter0 %}" class="d-inline">
                            {% csrf_token %}
                            <button type="submit" class="dropdown-item text-danger" onclick="return confirm('Are you sure you want to delete this objective?')">
                              <i class="fas fa-trash me-2"></i>Delete
                            </button>
                          </form>
                        </li>
                      </ul>
                    </div>
                  </div>
                  <p class="text-secondary text-xs mt-2 mb-0">
                    <i class="fas fa-history me-1"></i>
                    Created: {{ objective.date_created|format_iso_date:"%Y-%m-%d %H:%M" }} | Modified: {{ objective.date_last_modified|format_iso_date:"%Y-%m-%d %H:%M" }}
                  </p>
                </div>
              </div>
            {% empty %}
              <div class="text-center py-4">
                <div class="icon icon-shape icon-sm bg-gradient-secondary shadow text-center mb-3">
                  <i class="fas fa-tasks text-white opacity-10"></i>
                </div>
                <h6 class="text-dark">No business objectives set</h6>
                <p class="text-secondary text-sm">Click the "New Objective" button to add your first business objective.</p>
              </div>
            {% endfor %}
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- Targeted Keywords Section -->
<div class="row mt-4">
  <div class="col-12">
    <div class="card">
      <div class="card-header pb-0">
        <div class="d-lg-flex justify-content-between align-items-center">
          <div>
            <h5 class="mb-0">Targeted Keywords</h5>
            <p class="text-sm mb-0 text-muted">
              <i class="fas fa-chart-line me-1"></i> Track performance metrics and rankings
            </p>
          </div>
          <div class="ms-auto my-auto mt-lg-0 mt-4">
            <div class="d-flex gap-2">
              <div class="input-group input-group-sm me-2" style="width: 200px;">
                <span class="input-group-text bg-white border-end-0">
                  <i class="fas fa-search text-muted"></i>
                </span>
                <input type="text" class="form-control border-start-0 ps-0" id="keywordSearch" 
                       placeholder="Search keywords..." style="border-left: none;">
              </div>
              <button type="button" class="btn btn-sm bg-gradient-success" data-bs-toggle="modal" data-bs-target="#add-keyword">
                <i class="fas fa-plus me-1"></i>Add
              </button>
              <div class="dropdown">
                <button class="btn btn-sm btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                  <i class="fas fa-file-import me-1"></i>Import
                </button>
                <ul class="dropdown-menu">
                  <li>
                    <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#import-keywords">
                      <i class="fas fa-file-csv me-2"></i>Import CSV
                    </a>
                  </li>
                  <li>
                    <a class="dropdown-item" href="{% url 'seo_manager:search_console_keywords' client.id %}">
                      <i class="fab fa-google me-2"></i>From Search Console
                    </a>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        <div class="row mt-3">
          <div class="col-md-3">
            <div class="card card-sm border">
              <div class="card-body p-3">
                <div class="row">
                  <div class="col-8">
                    <div class="numbers">
                      <p class="text-sm mb-0 text-capitalize font-weight-bold">Total Keywords</p>
                      <h5 class="mb-0 font-weight-bold">
                        {{ client.targeted_keywords.count }}
                      </h5>
                    </div>
                  </div>
                  <div class="col-4 text-end">
                    <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                      <i class="fas fa-key text-lg opacity-10" aria-hidden="true"></i>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card card-sm border">
              <div class="card-body p-3">
                <div class="row">
                  <div class="col-8">
                    <div class="numbers">
                      <p class="text-sm mb-0 text-capitalize font-weight-bold">Avg. Position</p>
                      <h5 class="mb-0 font-weight-bold">
                        {{ avg_position|default:"N/A" }}
                      </h5>
                    </div>
                  </div>
                  <div class="col-4 text-end">
                    <div class="icon icon-shape bg-gradient-success shadow text-center border-radius-md">
                      <i class="fas fa-chart-line text-lg opacity-10" aria-hidden="true"></i>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card card-sm border">
              <div class="card-body p-3">
                <div class="row">
                  <div class="col-8">
                    <div class="numbers">
                      <p class="text-sm mb-0 text-capitalize font-weight-bold">Total Clicks</p>
                      <h5 class="mb-0 font-weight-bold">
                        {{ total_clicks|default:"0" }}
                      </h5>
                    </div>
                  </div>
                  <div class="col-4 text-end">
                    <div class="icon icon-shape bg-gradient-warning shadow text-center border-radius-md">
                      <i class="fas fa-mouse-pointer text-lg opacity-10" aria-hidden="true"></i>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card card-sm border">
              <div class="card-body p-3">
                <div class="row">
                  <div class="col-8">
                    <div class="numbers">
                      <p class="text-sm mb-0 text-capitalize font-weight-bold">Avg. CTR</p>
                      <h5 class="mb-0 font-weight-bold">
                        {{ avg_ctr|default:"0" }}%
                      </h5>
                    </div>
                  </div>
                  <div class="col-4 text-end">
                    <div class="icon icon-shape bg-gradient-info shadow text-center border-radius-md">
                      <i class="fas fa-percentage text-lg opacity-10" aria-hidden="true"></i>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="card-body px-0 pt-0 pb-0">
        <div class="table-responsive p-0">
          {% include 'seo_manager/keywords/keyword_list_table.html' with keywords=client.targeted_keywords.all %}
        </div>
      </div>
    </div>
  </div>
</div>

<!-- SEO Projects Section -->
<div class="row mt-4">
  <div class="col-12">
    <div class="card">
      <div class="card-header pb-0">
        <div class="d-lg-flex justify-content-between align-items-center">
          <div>
            <h5 class="mb-0">SEO Projects</h5>
            <p class="text-sm mb-0 text-muted">
              <i class="fas fa-tasks me-1"></i> Implementation projects and campaigns
            </p>
          </div>
          <div class="ms-auto my-auto mt-lg-0 mt-4">
            <div class="d-flex gap-2">
              <div class="btn-group" role="group">
                <input type="radio" class="btn-check" name="project-view" id="list-view" checked>
                <label class="btn btn-outline-primary btn-sm" for="list-view">
                  <i class="fas fa-list"></i>
                </label>
                <input type="radio" class="btn-check" name="project-view" id="kanban-view">
                <label class="btn btn-outline-primary btn-sm" for="kanban-view">
                  <i class="fas fa-th-large"></i>
                </label>
              </div>
              <button type="button" class="btn btn-sm bg-gradient-dark" data-bs-toggle="modal" data-bs-target="#add-project">
                <i class="fas fa-plus me-1"></i>New Project
              </button>
            </div>
          </div>
        </div>
      </div>
      <div class="card-body">
        <div class="row mb-4">
          <div class="col-md-3">
            <div class="card card-sm border">
              <div class="card-body p-3">
                <div class="row">
                  <div class="col-8">
                    <div class="numbers">
                      <p class="text-sm mb-0 text-capitalize font-weight-bold">Total Projects</p>
                      <h5 class="mb-0 font-weight-bold">{{ client.seo_projects.count }}</h5>
                    </div>
                  </div>
                  <div class="col-4 text-end">
                    <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                      <i class="fas fa-project-diagram text-lg opacity-10" aria-hidden="true"></i>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card card-sm border">
              <div class="card-body p-3">
                <div class="row">
                  <div class="col-8">
                    <div class="numbers">
                      <p class="text-sm mb-0 text-capitalize font-weight-bold">In Progress</p>
                      <h5 class="mb-0 font-weight-bold">{{ in_progress_count|default:"0" }}</h5>
                    </div>
                  </div>
                  <div class="col-4 text-end">
                    <div class="icon icon-shape bg-gradient-info shadow text-center border-radius-md">
                      <i class="fas fa-spinner text-lg opacity-10" aria-hidden="true"></i>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card card-sm border">
              <div class="card-body p-3">
                <div class="row">
                  <div class="col-8">
                    <div class="numbers">
                      <p class="text-sm mb-0 text-capitalize font-weight-bold">Completed</p>
                      <h5 class="mb-0 font-weight-bold">{{ completed_count|default:"0" }}</h5>
                    </div>
                  </div>
                  <div class="col-4 text-end">
                    <div class="icon icon-shape bg-gradient-success shadow text-center border-radius-md">
                      <i class="fas fa-check text-lg opacity-10" aria-hidden="true"></i>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card card-sm border">
              <div class="card-body p-3">
                <div class="row">
                  <div class="col-8">
                    <div class="numbers">
                      <p class="text-sm mb-0 text-capitalize font-weight-bold">Success Rate</p>
                      <h5 class="mb-0 font-weight-bold">{{ success_rate|default:"0" }}%</h5>
                    </div>
                  </div>
                  <div class="col-4 text-end">
                    <div class="icon icon-shape bg-gradient-warning shadow text-center border-radius-md">
                      <i class="fas fa-chart-pie text-lg opacity-10" aria-hidden="true"></i>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- List View -->
        <div id="projects-list-view">
          <div class="table-responsive">
            <table class="table table-flush" id="projects-table">
              <thead class="thead-light">
                <tr>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Project</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Status</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Progress</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Timeline</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
                </tr>
              </thead>
              <tbody>
                {% for project in client.seo_projects.all %}
                <tr>
                  <td>
                    <div class="d-flex px-2 py-1">
                      <div class="d-flex flex-column justify-content-center">
                        <h6 class="mb-0 text-sm">{{ project.title }}</h6>
                        <p class="text-xs text-secondary mb-0">{{ project.description|truncatechars:100 }}</p>
                      </div>
                    </div>
                  </td>
                  <td>
                    <span class="badge badge-sm bg-gradient-{% if project.status == 'completed' %}success{% elif project.status == 'in_progress' %}info{% elif project.status == 'planned' %}secondary{% else %}warning{% endif %}">
                      {{ project.get_status_display }}
                    </span>
                  </td>
                  <td>
                    <div class="d-flex align-items-center">
                      <span class="me-2 text-xs font-weight-bold">{{ project.progress|default:"0" }}%</span>
                      <div>
                        <div class="progress">
                          <div class="progress-bar bg-gradient-info" role="progressbar" 
                               aria-valuenow="{{ project.progress|default:'0' }}" 
                               aria-valuemin="0" 
                               aria-valuemax="100" 
                               style="width: {{ project.progress|default:'0' }}%"></div>
                        </div>
                      </div>
                    </div>
                  </td>
                  <td>
                    <div class="d-flex flex-column">
                      <span class="text-xs text-secondary mb-0">Start: {{ project.implementation_date|date:"M d, Y" }}</span>
                      <span class="text-xs text-secondary">End: {{ project.completion_date|date:"M d, Y"|default:"Ongoing" }}</span>
                    </div>
                  </td>
                  <td>
                    <div class="dropdown">
                      <button class="btn btn-link text-secondary mb-0" data-bs-toggle="dropdown">
                        <i class="fa fa-ellipsis-v text-xs"></i>
                      </button>
                      <ul class="dropdown-menu">
                        <li>
                          <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#view-project-{{ project.id }}">
                            <i class="fas fa-eye me-2"></i>View Details
                          </a>
                        </li>
                        <li>
                          <a class="dropdown-item" href="{% url 'seo_manager:edit_project' client.id project.id %}">
                            <i class="fas fa-edit me-2"></i>Edit
                          </a>
                        </li>
                        <li>
                          <hr class="dropdown-divider">
                        </li>
                        <li>
                          <form method="post" action="{% url 'seo_manager:delete_project' client.id project.id %}" class="d-inline">
                            {% csrf_token %}
                            <button type="submit" class="dropdown-item text-danger" onclick="return confirm('Are you sure you want to delete this project?')">
                              <i class="fas fa-trash me-2"></i>Delete
                            </button>
                          </form>
                        </li>
                      </ul>
                    </div>
                  </td>
                </tr>
                {% empty %}
                <tr>
                  <td colspan="5" class="text-center py-4">
                    <div class="icon icon-shape icon-sm bg-gradient-secondary shadow text-center mb-3 mx-auto">
                      <i class="fas fa-tasks text-white opacity-10"></i>
                    </div>
                    <h6 class="text-dark">No projects yet</h6>
                    <p class="text-secondary text-sm">Start by creating your first SEO project.</p>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>

        <!-- Kanban View (Initially Hidden) -->
        <div id="projects-kanban-view" style="display: none;">
          <div class="row">
            <div class="col-md-4">
              <div class="card">
                <div class="card-header bg-gradient-secondary p-3">
                  <h6 class="mb-0 text-white">Planned</h6>
                </div>
                <div class="card-body">
                  {% for project in client.seo_projects.all %}
                    {% if project.status == 'planned' %}
                      <div class="card mb-3">
                        <div class="card-body p-3">
                          <h6 class="mb-0">{{ project.title }}</h6>
                          <p class="text-sm text-muted mb-2">{{ project.description|truncatechars:100 }}</p>
                          <div class="d-flex align-items-center">
                            <span class="text-sm me-auto">{{ project.implementation_date|date:"M d, Y" }}</span>
                            <button class="btn btn-link text-secondary p-0" data-bs-toggle="modal" data-bs-target="#view-project-{{ project.id }}">
                              <i class="fas fa-eye"></i>
                            </button>
                          </div>
                        </div>
                      </div>
                    {% endif %}
                  {% endfor %}
                </div>
              </div>
            </div>
            <div class="col-md-4">
              <div class="card">
                <div class="card-header bg-gradient-info p-3">
                  <h6 class="mb-0 text-white">In Progress</h6>
                </div>
                <div class="card-body">
                  {% for project in client.seo_projects.all %}
                    {% if project.status == 'in_progress' %}
                      <div class="card mb-3">
                        <div class="card-body p-3">
                          <h6 class="mb-0">{{ project.title }}</h6>
                          <p class="text-sm text-muted mb-2">{{ project.description|truncatechars:100 }}</p>
                          <div class="d-flex align-items-center">
                            <div class="progress w-100 me-2" style="height: 5px;">
                              <div class="progress-bar bg-gradient-info" role="progressbar" style="width: {{ project.progress }}%"></div>
                            </div>
                            <span class="text-sm text-muted">{{ project.progress }}%</span>
                          </div>
                        </div>
                      </div>
                    {% endif %}
                  {% endfor %}
                </div>
              </div>
            </div>
            <div class="col-md-4">
              <div class="card">
                <div class="card-header bg-gradient-success p-3">
                  <h6 class="mb-0 text-white">Completed</h6>
                </div>
                <div class="card-body">
                  {% for project in client.seo_projects.all %}
                    {% if project.status == 'completed' %}
                      <div class="card mb-3">
                        <div class="card-body p-3">
                          <h6 class="mb-0">{{ project.title }}</h6>
                          <p class="text-sm text-muted mb-2">{{ project.description|truncatechars:100 }}</p>
                          <div class="d-flex align-items-center">
                            <span class="text-sm me-auto">Completed: {{ project.completion_date|date:"M d, Y" }}</span>
                            <button class="btn btn-link text-secondary p-0" data-bs-toggle="modal" data-bs-target="#view-project-{{ project.id }}">
                              <i class="fas fa-eye"></i>
                            </button>
                          </div>
                        </div>
                      </div>
                    {% endif %}
                  {% endfor %}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add Keyword Modal -->
<div class="modal fade" id="add-keyword" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add Keyword</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:keyword_create' client.id %}">
        {% csrf_token %}
        <div class="modal-body">
          {{ keyword_form.as_p }}
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Add Keyword</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Import Keywords Modal -->
<div class="modal fade" id="import-keywords" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Import Keywords</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:keyword_import' client.id %}" enctype="multipart/form-data">
        {% csrf_token %}
        <div class="modal-body">
          {{ import_form.as_p }}
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Import</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Add Project Modal -->
<div class="modal fade" id="add-project" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">New SEO Project</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:project_create' client.id %}" enctype="multipart/form-data">
        {% csrf_token %}
        <div class="modal-body">
          {{ project_form.as_p }}
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Create Project</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Add this after the client details card and before the business objectives -->
<div class="col-md-12">
  <div class="card mb-4 mt-4">
    <div class="card-header pb-0 d-flex justify-content-between align-items-center">
      <div>
        <h5>Client Profile</h5>
        <p class="text-sm text-muted mb-0">Background information on client</p>
      </div>
      <div>
        <button type="button" class="btn bg-gradient-primary btn-sm" id="magicallyFillBtn">
          Magically Fill In
        </button>
        {% if client.client_profile %}
          <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#edit-profile">
            Edit Profile
          </button>
        {% else %}
          <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#add-profile">
            Add Profile
          </button>
        {% endif %}
      </div>
    </div>
    
    <div class="card-body">
      {% if client_profile_html %}
        <div class="markdown-content">
          {{ client_profile_html|safe }}
        </div>
      {% else %}
        <p class="text-sm text-muted">No profile has been added for this client yet.</p>
      {% endif %}
    </div>
  </div>
</div>

<!-- Add Profile Modal -->
<div class="modal fade" id="add-profile" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-dialog-large" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add Client Profile</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:update_client_profile' client.id %}" id="addProfileForm">
        {% csrf_token %}
        <div class="modal-body">
          <div id="add-profile-editor">
            {{ client.client_profile|default:"" }}
          </div>
          <input type="hidden" name="client_profile" id="add-profile-content">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Save Profile</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Edit Profile Modal -->
<div class="modal fade" id="edit-profile" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-dialog-large" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Client Profile</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:update_client_profile' client.id %}" id="editProfileForm">
        {% csrf_token %}
        <div class="modal-body">
          <div id="edit-profile-editor">
            {{ client.client_profile|safe }}
          </div>
          <input type="hidden" name="client_profile" id="edit-profile-content">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Update Profile</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Project Details Modals -->
{% for project in client.seo_projects.all %}
<div class="modal fade" id="view-project-{{ project.id }}" tabindex="-1" role="dialog" aria-labelledby="project-modal-{{ project.id }}" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="project-modal-{{ project.id }}">{{ project.title }}</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row">
          <div class="col-md-12">
            <h6 class="text-sm">Description</h6>
            <p class="text-sm text-muted">{{ project.description }}</p>
          </div>
        </div>
        
        <div class="row mt-3">
          <div class="col-md-12">
            <h6 class="text-sm">Status</h6>
            <span class="badge bg-gradient-{% if project.status == 'completed' %}success{% elif project.status == 'in_progress' %}info{% elif project.status == 'planned' %}secondary{% else %}warning{% endif %}">
              {{ project.get_status_display }}
            </span>
          </div>
        </div>

        <div class="row mt-3">
          <div class="col-md-6">
            <h6 class="text-sm">Implementation Date</h6>
            <p class="text-sm">{{ project.implementation_date }}</p>
          </div>
          <div class="col-md-6">
            <h6 class="text-sm">Completion Date</h6>
            <p class="text-sm">{{ project.completion_date|default:"Not set" }}</p>
          </div>
        </div>

        <div class="row mt-3">
          <div class="col-md-12">
            <h6 class="text-sm">Targeted Keywords</h6>
            <div class="d-flex flex-wrap gap-2">
              {% for keyword in project.targeted_keywords.all %}
                <span class="badge bg-light text-dark">{{ keyword.keyword }}</span>
              {% empty %}
                <p class="text-sm text-muted">No keywords assigned</p>
              {% endfor %}
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <a href="{% url 'seo_manager:edit_project' client.id project.id %}" class="btn bg-gradient-primary btn-sm">Edit Project</a>
        <form method="post" action="{% url 'seo_manager:delete_project' client.id project.id %}" class="d-inline">
          {% csrf_token %}
          <button type="submit" class="btn bg-gradient-danger btn-sm" onclick="return confirm('Are you sure you want to delete this project?')">Delete Project</button>
        </form>
        <button type="button" class="btn bg-gradient-secondary btn-sm" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>
{% endfor %}

<!-- Add this after the Targeted Keywords Section -->
<div class="row mt-4">
  <div class="col-12">
    <div class="card">
      <div class="card-header pb-0">
        <div class="d-lg-flex">
          <div>
            <h5 class="mb-0">Ranking Data Management</h5>
            <p class="text-sm mb-0">
              Manage Search Console data collection and reporting
              <a href="{% url 'seo_manager:ranking_data_management' client.id %}" class="text-primary">View Details</a>
            </p>
          </div>
        </div>
      </div>
      <div class="card-body px-0 pb-0">
        <div class="table-responsive">
          <table class="table align-items-center mb-0">
            <thead>
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-3">Last Collection</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-3">Data Coverage</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-3">Keywords Tracked</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-3">Status</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td class="ps-3">
                  <span class="text-sm">
                    {% if latest_collection_date %}
                      {{ latest_collection_date|date:"F d, Y" }}
                    {% else %}
                      No data collected yet
                    {% endif %}
                  </span>
                </td>
                <td class="ps-3">
                  <span class="text-sm">
                    {% if data_coverage_months %}
                      {{ data_coverage_months }} month{{ data_coverage_months|pluralize }}
                    {% else %}
                      -
                    {% endif %}
                  </span>
                </td>
                <td class="ps-3">
                  <span class="text-sm">
                    {% if tracked_keywords_count %}
                      {{ tracked_keywords_count }}
                    {% else %}
                      0
                    {% endif %}
                  </span>
                </td>
                <td class="ps-3">
                  {% if latest_collection_date %}
                    <span class="badge badge-sm bg-gradient-success">Active</span>
                  {% else %}
                    <span class="badge badge-sm bg-gradient-warning">No Data</span>
                  {% endif %}
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add the Report Modal -->
<div class="modal fade" id="reportModal" tabindex="-1" aria-labelledby="reportModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-xl">
      <div class="modal-content">
          <div class="modal-header">
              <h5 class="modal-title" id="reportModalLabel">Rankings Report</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
              <div id="reportContent"></div>
          </div>
          <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button type="button" class="btn btn-primary" onclick="window.print()">Print Report</button>
          </div>
      </div>
  </div>
</div>

<!-- Client Activity Timeline --> 
<div class="row mt-4">
  <div class="col-12">
    <div class="card">
      <div class="card-header pb-0">
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <h5 class="mb-0">Activity Timeline</h5>
            <p class="text-sm mb-0 text-muted">
              <i class="fas fa-history me-1"></i> Track all changes and activities
            </p>
          </div>
          <div class="d-flex gap-2">
            <div class="btn-group">
              <button type="button" class="btn btn-outline-primary btn-sm dropdown-toggle" data-bs-toggle="dropdown">
                <i class="fas fa-filter me-1"></i>Filter
              </button>
              <ul class="dropdown-menu">
                <li><a class="dropdown-item active" href="#" data-filter="all">All Activities</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="#" data-filter="keyword">Keywords</a></li>
                <li><a class="dropdown-item" href="#" data-filter="project">Projects</a></li>
                <li><a class="dropdown-item" href="#" data-filter="ranking">Rankings</a></li>
                <li><a class="dropdown-item" href="#" data-filter="analytics">Analytics</a></li>
              </ul>
            </div>
            <button type="button" class="btn btn-sm bg-gradient-dark" id="exportActivityBtn">
              <i class="fas fa-download me-1"></i>Export
            </button>
          </div>
        </div>
      </div>
      <div class="card-body pt-4">
        <div class="timeline timeline-one-side" data-timeline-axis-style="dashed">
          {% include 'seo_manager/includes/activity_items.html' %}
          {% if not client_activities %}
            <div class="text-center py-4">
              <div class="icon icon-shape icon-sm bg-gradient-secondary shadow text-center mb-3 mx-auto">
                <i class="fas fa-history text-white opacity-10"></i>
              </div>
              <h6 class="text-dark">No activity recorded</h6>
              <p class="text-secondary text-sm">Activities will appear here as changes are made.</p>
            </div>
          {% endif %}
        </div>

        <!-- Load More Button -->
        {% if client_activities.count > 10 %}
          <div class="text-center mt-4">
            <button type="button" class="btn btn-outline-primary btn-sm" id="loadMoreActivities">
              <i class="fas fa-sync me-1"></i>Load More
            </button>
          </div>
        {% endif %}
      </div>
    </div>
  </div>
</div>

    <div class="col-md-6">


      <!-- Add this section below the Search Console Credentials section -->



  <!-- Add Delete Client Button -->
  <div class="row mt-4">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-body">
          <button id="deleteClientBtn" class="btn btn-danger" 
                  data-client-id="{{ client.id }}" 
                  data-client-name="{{ client.name }}">
            Delete Client
          </button>
        </div>
      </div>
    </div>
  </div>

</div>

<!-- Add this after the existing cards in client_detail.html -->

<!-- Add Business Objective Modal -->
<div class="modal fade" id="add-objective" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add Business Objective</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:add_business_objective' client.id %}" id="addObjectiveForm">
        {% csrf_token %}
        <div class="modal-body">
          <!-- Goal Field -->
          <div class="form-group mb-3">
            <label class="form-control-label">Goal</label>
            <textarea class="form-control" name="goal" rows="3" required></textarea>
            <small class="text-muted">What specific outcome do you want to achieve?</small>
          </div>
          
          <!-- Metric Field -->
          <div class="form-group mb-3">
            <label class="form-control-label">Metric</label>
            <textarea class="form-control" name="metric" rows="2" required></textarea>
            <small class="text-muted">Define the key metrics that will track progress</small>
          </div>
          
          <!-- Target Date Field -->
          <div class="form-group mb-3">
            <label class="form-control-label">Target Date</label>
            <input type="text" class="form-control datepicker" name="target_date" id="target_date" required>
            <small class="text-muted">When do you aim to achieve this objective?</small>
          </div>
          
          <!-- Status Field -->
          <div class="form-check form-switch mb-3">
            <input type="checkbox" class="form-check-input" name="status" checked>
            <label class="form-check-label ms-3">Active</label>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Add Objective</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Edit Business Objective Modal -->
<div class="modal fade" id="edit-objective" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Business Objective</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:edit_business_objective' client.id 0 %}" id="editObjectiveForm">
        {% csrf_token %}
        <div class="modal-body">
          <!-- Goal Field -->
          <div class="form-group mb-3">
            <label class="form-control-label">Goal</label>
            <textarea class="form-control" name="goal" rows="3" required id="edit_goal"></textarea>
            <small class="text-muted">What specific outcome do you want to achieve?</small>
          </div>
          
          <!-- Metric Field -->
          <div class="form-group mb-3">
            <label class="form-control-label">Metric</label>
            <textarea class="form-control" name="metric" rows="2" required id="edit_metric"></textarea>
            <small class="text-muted">Define the key metrics that will track progress</small>
          </div>
          
          <!-- Target Date Field -->
          <div class="form-group mb-3">
            <label class="form-control-label">Target Date</label>
            <input type="text" class="form-control datepicker" name="target_date" id="edit_target_date" required>
            <small class="text-muted">When do you aim to achieve this objective?</small>
          </div>
          
          <!-- Status Field -->
          <div class="form-check form-switch mb-3">
            <input type="checkbox" class="form-check-input" name="status" id="edit_status">
            <label class="form-check-label ms-3">Active</label>
          </div>
          
          <input type="hidden" name="objective_index" id="edit_objective_index">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Update Objective</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Meta Tags Section -->
<div class="row mt-4">
  <div class="col-12">
    <div class="card">
      <div class="card-header pb-0">
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <h5 class="mb-0">Meta Tags Monitor</h5>
            <p class="text-sm mb-0 text-muted">
              <i class="fas fa-code me-1"></i> Track and analyze website meta tags
            </p>
          </div>
          <button type="button" class="btn bg-gradient-dark btn-sm" id="createSnapshotBtn" data-client-id="{{ client.id }}">
            <i class="fas fa-camera me-2"></i>Create Snapshot
          </button>
        </div>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-4">
            <div class="card card-body border-0 shadow-sm">
              <div class="d-flex">
                <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                  <i class="fas fa-history text-lg opacity-10" aria-hidden="true"></i>
                </div>
                <div class="ms-3">
                  <h6 class="mb-0">Latest Snapshot</h6>
                  <span class="text-sm text-muted">
                    {% if meta_tags_files %}
                      {{ meta_tags_files.0|slice:"11:" }}
                    {% else %}
                      No snapshots yet
                    {% endif %}
                  </span>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="card card-body border-0 shadow-sm">
              <div class="d-flex">
                <div class="icon icon-shape bg-gradient-success shadow text-center border-radius-md">
                  <i class="fas fa-tag text-lg opacity-10" aria-hidden="true"></i>
                </div>
                <div class="ms-3">
                  <h6 class="mb-0">Total Tags Tracked</h6>
                  <span class="text-sm text-muted" id="totalTagsCount">Calculating...</span>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="card card-body border-0 shadow-sm">
              <div class="d-flex">
                <div class="icon icon-shape bg-gradient-warning shadow text-center border-radius-md">
                  <i class="fas fa-exclamation-triangle text-lg opacity-10" aria-hidden="true"></i>
                </div>
                <div class="ms-3">
                  <h6 class="mb-0">Issues Found</h6>
                  <span class="text-sm text-muted" id="issuesCount">Analyzing...</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {% if meta_tags_files %}
          <div class="table-responsive mt-4">
            <table class="table table-flush" id="snapshots-table">
              <thead class="thead-light">
                <tr>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Date</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Pages Scanned</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Status</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
                </tr>
              </thead>
              <tbody>
                {% for file in meta_tags_files %}
                  <tr>
                    <td>
                      <div class="d-flex px-2 py-1">
                        <div class="d-flex flex-column justify-content-center">
                          <h6 class="mb-0 text-sm">{{ file|slice:"11:21" }}</h6>
                          <p class="text-xs text-secondary mb-0">{{ file|slice:"22:27" }}</p>
                        </div>
                      </div>
                    </td>
                    <td>
                      <span class="text-xs font-weight-bold" id="pages-count-{{ forloop.counter }}">Loading...</span>
                    </td>
                    <td>
                      <span class="badge badge-sm bg-gradient-success">Completed</span>
                    </td>
                    <td>
                      <div class="dropdown">
                        <button class="btn btn-link text-secondary mb-0" data-bs-toggle="dropdown">
                          <i class="fa fa-ellipsis-v text-xs"></i>
                        </button>
                        <ul class="dropdown-menu">
                          <li>
                            <a class="dropdown-item" href="#" onclick="viewSnapshot('{{ file }}')">
                              <i class="fas fa-eye me-2"></i>View Report
                            </a>
                          </li>
                          <li>
                            <a class="dropdown-item" href="{% url 'file_manager' %}/meta-tags/{{ file }}">
                              <i class="fas fa-download me-2"></i>Download JSON
                            </a>
                          </li>
                          <li>
                            <a class="dropdown-item" href="#" onclick="compareWithPrevious('{{ file }}')">
                              <i class="fas fa-code-branch me-2"></i>Compare Changes
                            </a>
                          </li>
                          <li><hr class="dropdown-divider"></li>
                          <li>
                            <a class="dropdown-item text-danger" href="#" onclick="deleteSnapshot('{{ file }}')">
                              <i class="fas fa-trash me-2"></i>Delete
                            </a>
                          </li>
                        </ul>
                      </div>
                    </td>
                  </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        {% else %}
          <div class="text-center py-4">
            <div class="icon icon-shape icon-sm bg-gradient-secondary shadow text-center mb-3 mx-auto">
              <i class="fas fa-code text-white opacity-10"></i>
            </div>
            <h6 class="text-dark">No Snapshots Available</h6>
            <p class="text-secondary text-sm">Create your first snapshot to start tracking meta tags.</p>
          </div>
        {% endif %}
      </div>
    </div>
  </div>
</div>

<!-- Meta Tags View Modal -->
<div class="modal fade" id="viewMetaTagsModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Meta Tags Report</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="metaTagsReport"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn bg-gradient-primary" onclick="downloadReport()">
          <i class="fas fa-download me-2"></i>Download Report
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Replace the existing keyword modals with this include -->
{% include 'seo_manager/includes/keyword_modals.html' %}

{% endblock content %}
{% block extra_js %}
{{ block.super }}
<!-- Core Libraries - Load these first -->
<!-- SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Simple DataTables -->
<script src="{% static "assets/js/plugins/datatables.js" %}"></script>

<!-- Chart.js -->
<script src="{% static 'assets/js/plugins/chartjs.min.js' %}"></script>

<!-- Existing libraries -->
<script src="{% static 'assets/js/plugins/quill.min.js' %}"></script>

<!-- Add Flatpickr CSS and JS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<script>
  // Pass any Django template variables needed by the JS file
  window.clientData = {
    clientId: {{ client.id }},
    urls: {
      collectRankings: "{% url 'seo_manager:collect_rankings' client.id %}",
      generateReport: "{% url 'seo_manager:generate_report' client.id %}",
      backfillRankings: "{% url 'seo_manager:backfill_rankings' client.id %}",
      generateMagicProfile: "{% url 'seo_manager:generate_magic_profile' client.id %}",
      getToolStatus: "{% url 'agents:get_tool_status' 'TASK_ID' %}",
      deleteClient: "{% url 'seo_manager:delete_client' client.id %}",
      clientList: "{% url 'seo_manager:client_list' %}",
      loadMoreActivities: "{% url 'seo_manager:load_more_activities' client.id %}",
      exportActivities: "{% url 'seo_manager:export_activities' client.id %}",
      importFromSearchConsole: "{% url 'seo_manager:import_from_search_console' client.id %}"
    },
    keywords: [
      {% for keyword in client.targeted_keywords.all %}
        {
          id: {{ keyword.id }},
          history: [
            {% for entry in keyword.ranking_history.all %}
              {
                date: '{{ entry.date|date:"M d, Y" }}',
                position: {{ entry.average_position }},
                impressions: {{ entry.impressions }},
                clicks: {{ entry.clicks }},
                ctr: {{ entry.ctr }}
              }{% if not forloop.last %},{% endif %}
            {% endfor %}
          ]
        }{% if not forloop.last %},{% endif %}
      {% endfor %}
    ]
  };
</script>
<script src="{% static 'seo_manager/js/client_detail.js' %}?v={% now 'YmdHis' %}"></script>
{% endblock extra_js %}

================
File: seo_manager/templates/seo_manager/client_form.html
================
{% extends "layouts/base.html" %}

{% block title %} Create New Client {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0">
          <h6>Create New Client</h6>
        </div>
        <div class="card-body">
          <form method="post">
            {% csrf_token %}
            {% for field in form %}
              <div class="form-group">
                <label for="{{ field.id_for_label }}" class="form-control-label">{{ field.label }}</label>
                {{ field }}
                {% if field.errors %}
                  <div class="text-danger">
                    {% for error in field.errors %}
                      {{ error }}
                    {% endfor %}
                  </div>
                {% endif %}
                {% if field.help_text %}
                  <small class="form-text text-muted">{{ field.help_text }}</small>
                {% endif %}
              </div>
            {% endfor %}
            <div class="form-group">
              <button type="submit" class="btn btn-primary">Create Client</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  {% include 'includes/footer.html' %}

</div>
{% endblock content %}

{% block extra_js %}
<!-- Remove any unnecessary JavaScript here -->
{% endblock extra_js %}

================
File: seo_manager/templates/seo_manager/client_integrations.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Client Integrations - {{ client.name }} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h5 class="mb-0">Integrations</h5>
              <p class="text-sm mb-0 text-muted">
                <i class="fas fa-plug me-1"></i> Connected services and data sources
              </p>
            </div>
          </div>
        </div>
        <div class="card-body">
          <div class="row">
            <!-- Google Analytics Card -->
            <div class="col-md-6">
              <div class="card card-plain">
                <div class="card-body p-3">
                  <div class="d-flex align-items-center mb-3">
                    <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md me-3">
                      <i class="fab fa-google text-lg opacity-10" aria-hidden="true"></i>
                    </div>
                    <div class="d-flex flex-column">
                      <h6 class="mb-1">Google Analytics</h6>
                      <span class="text-xs text-muted">Track website traffic and user behavior</span>
                    </div>
                    {% if client.ga_credentials %}
                      <span class="badge badge-sm bg-gradient-success ms-auto">Connected</span>
                    {% else %}
                      <span class="badge badge-sm bg-gradient-secondary ms-auto">Not Connected</span>
                    {% endif %}
                  </div>
                  
                  {% if client.ga_credentials %}
                    <div class="p-3 bg-gray-100 rounded-3 mb-3">
                      <div class="d-flex align-items-center mb-2">
                        <i class="fas fa-chart-bar text-primary me-2"></i>
                        <span class="text-sm">View ID: {{ client.ga_credentials.view_id }}</span>
                      </div>
                      <div class="d-flex align-items-center">
                        <i class="fas fa-user text-primary me-2"></i>
                        <span class="text-sm">Client ID: {{ client.ga_credentials.ga_client_id }}</span>
                      </div>
                    </div>
                    <div class="d-flex gap-2">
                      <button class="btn btn-sm bg-gradient-light" data-bs-toggle="modal" data-bs-target="#update-ga">
                        <i class="fas fa-sync me-2"></i>Update
                      </button>
                      <a href="{% url 'seo_manager:remove_ga_credentials' client.id %}" 
                         class="btn btn-sm btn-outline-danger"
                         onclick="return confirm('Are you sure you want to remove these credentials?')">
                        <i class="fas fa-unlink me-2"></i>Disconnect
                      </a>
                    </div>
                  {% else %}
                    <div class="d-grid gap-2">
                      <a href="{% url 'seo_manager:add_ga_credentials_oauth' client.id %}" class="btn btn-primary btn-sm">
                        <i class="fas fa-key me-2"></i>Connect with OAuth
                      </a>
                      <a href="{% url 'seo_manager:add_ga_credentials_service_account' client.id %}" class="btn btn-outline-primary btn-sm">
                        <i class="fas fa-user-shield me-2"></i>Use Service Account
                      </a>
                    </div>
                  {% endif %}
                </div>
              </div>
            </div>

            <!-- Search Console Card -->
            <div class="col-md-6">
              <div class="card card-plain">
                <div class="card-body p-3">
                  <div class="d-flex align-items-center mb-3">
                    <div class="icon icon-shape bg-gradient-success shadow text-center border-radius-md me-3">
                      <i class="fas fa-search text-lg opacity-10" aria-hidden="true"></i>
                    </div>
                    <div class="d-flex flex-column">
                      <h6 class="mb-1">Search Console</h6>
                      <span class="text-xs text-muted">Monitor search performance and rankings</span>
                    </div>
                    {% if client.sc_credentials %}
                      <span class="badge badge-sm bg-gradient-success ms-auto">Connected</span>
                    {% else %}
                      <span class="badge badge-sm bg-gradient-secondary ms-auto">Not Connected</span>
                    {% endif %}
                  </div>

                  {% if client.sc_credentials %}
                    <div class="p-3 bg-gray-100 rounded-3 mb-3">
                      <div class="d-flex align-items-center">
                        <i class="fas fa-globe text-success me-2"></i>
                        <span class="text-sm">{{ client.sc_credentials.property_url }}</span>
                      </div>
                    </div>
                    <div class="d-flex gap-2">
                      <button class="btn btn-sm bg-gradient-light" data-bs-toggle="modal" data-bs-target="#update-sc">
                        <i class="fas fa-sync me-2"></i>Update
                      </button>
                      <a href="{% url 'seo_manager:remove_sc_credentials' client.id %}" 
                         class="btn btn-sm btn-outline-danger"
                         onclick="return confirm('Are you sure you want to remove these credentials?')">
                        <i class="fas fa-unlink me-2"></i>Disconnect
                      </a>
                    </div>
                  {% else %}
                    <div class="d-grid gap-2">
                      <a href="{% url 'seo_manager:add_sc_credentials' client.id %}" class="btn btn-success btn-sm">
                        <i class="fas fa-key me-2"></i>Connect with OAuth
                      </a>
                      <a href="{% url 'seo_manager:add_sc_credentials_service_account' client.id %}" class="btn btn-outline-success btn-sm">
                        <i class="fas fa-user-shield me-2"></i>Use Service Account
                      </a>
                    </div>
                  {% endif %}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock content %}

{% block extra_js %}
{{ block.super }}
<!-- Add any integration-specific JavaScript here -->
{% endblock extra_js %}

================
File: seo_manager/templates/seo_manager/client_list.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Clients {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <!-- Card header -->
        <div class="card-header d-flex justify-content-between align-items-center">
          <div>
            <h5 class="mb-0">Clients</h5>
            <p class="text-sm mb-0">
              View and manage your SEO clients.
            </p>
          </div>
          <a href="#" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#add-client">Add Client</a>
        </div>
        <div class="table-responsive">
          <table class="table table-flush" id="clients-table">
            <thead class="thead-light">
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Client Name</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Website URL</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Status</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Group</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Created</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for client in clients %}
              <tr data-id="{{ client.id }}">
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'seo_manager:client_detail' client.id %}">{{ client.name }}</a>
                </td>
                <td class="text-sm font-weight-normal">
                  <a href="{{ client.website_url }}" target="_blank" rel="noopener noreferrer">{{ client.website_url }}</a>
                </td>
                <td class="text-sm font-weight-normal">{{ client.status }}</td>
                <td class="text-sm font-weight-normal">{{ client.group }}</td>
                <td class="text-sm font-weight-normal" data-order="{{ client.created_at|date:'Y-m-d' }}">
                  {{ client.created_at|date:"Y-m-d" }}
                </td>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'seo_manager:client_detail' client.id %}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit client">
                    Edit
                  </a>
                </td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  {% include 'includes/footer.html' %}
</div>

<!-- Add this modal markup just before the closing content block -->
<div class="modal fade" id="add-client" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add New Client</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:add_client' %}" id="addClientForm">
        {% csrf_token %}
        <div class="modal-body">
          <div class="form-group">
            <label for="{{ form.name.id_for_label }}" class="form-control-label">Client Name</label>
            {{ form.name }}
            {% if form.name.errors %}
            <div class="text-danger text-xs">{{ form.name.errors }}</div>
            {% endif %}
          </div>
          
          <div class="form-group mt-3">
            <label for="{{ form.website_url.id_for_label }}" class="form-control-label">Website URL</label>
            {{ form.website_url }}
            {% if form.website_url.errors %}
            <div class="text-danger text-xs">{{ form.website_url.errors }}</div>
            {% endif %}
          </div>
          
          <div class="row mt-3">
            <div class="col-md-6">
              <div class="form-group">
                <label for="{{ form.status.id_for_label }}" class="form-control-label">Status</label>
                {{ form.status }}
                {% if form.status.errors %}
                <div class="text-danger text-xs">{{ form.status.errors }}</div>
                {% endif %}
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label for="{{ form.group.id_for_label }}" class="form-control-label">Group</label>
                {{ form.group }}
                {% if form.group.errors %}
                <div class="text-danger text-xs">{{ form.group.errors }}</div>
                {% endif %}
              </div>
            </div>
          </div>
          
          <div class="form-group mt-3">
            <label for="{{ form.target_audience.id_for_label }}" class="form-control-label">Target Audience</label>
            {{ form.target_audience }}
            {% if form.target_audience.errors %}
            <div class="text-danger text-xs">{{ form.target_audience.errors }}</div>
            {% endif %}
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Add Client</button>
        </div>
      </form>
    </div>
  </div>
</div>
{% endblock content %}

{% block extra_js %}
  <script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
  <script>
    const dataTableSearch = new simpleDatatables.DataTable("#clients-table", {
      searchable: true,
      fixedHeight: true,
      perPage: 25,
      perPageSelect: [25, 50, 100, 150]
    });
  </script>
{% endblock extra_js %}

================
File: seo_manager/templates/seo_manager/dashboard.html
================
{% extends "layouts/base.html" %}
{% load static %}

{% block title %} Dashboard {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
      <div class="card h-100">
        <div class="card-body p-3 d-flex flex-column justify-content-between">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-capitalize font-weight-bold">Total Clients</p>
                <h5 class="font-weight-bolder mb-0">
                  {{ clients.count }}
                </h5>
              </div>
            </div>
            <div class="col-4 text-end">
              <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Updated Meta-Tags Snapshot Card -->
    <div class="col-xl-4 col-sm-6 mb-xl-0 mb-2">
      <div class="card h-100">
        <div class="card-body p-3 d-flex flex-column justify-content-between">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-capitalize font-weight-bold">Meta-Tags Snapshot</p>
                <div class="input-group input-group-sm mt-2">
                  <input type="url" id="snapshotUrl" class="form-control" placeholder="Enter URL">
                </div>
              </div>
            </div>
            <div class="col-4 text-end">
              <div id="createSnapshotBtn" class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md" style="cursor: pointer;">
                <i class="ni ni-paper-diploma text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- Add more summary cards here -->
  </div>
  
  <!-- Clients Table -->
  <div class="row mt-2">
    <div class="col-12">
      <div class="card">
        <!-- Card header -->
        <div class="card-header d-flex justify-content-between align-items-center">
          <div>
            <h5 class="mb-0">Clients</h5>
            <p class="text-sm mb-0">
              View and manage your SEO clients.
            </p>
          </div>
          <a href="#" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#add-client">Add Client</a>
        </div>
        <div class="table-responsive">
          <table class="table table-flush" id="clients-table">
            <thead class="thead-light">
              <tr>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Client Name</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Website URL</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Status</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Group</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Created</th>
                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for client in clients %}
              <tr data-id="{{ client.id }}">
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'seo_manager:client_detail' client.id %}" class="text-primary font-weight-bold">{{ client.name }}</a>
                </td>
                <td class="text-sm font-weight-normal">
                  <a href="{{ client.website_url }}" target="_blank" rel="noopener noreferrer">{{ client.website_url }}</a>
                </td>
                <td class="text-sm font-weight-normal">{{ client.status }}</td>
                <td class="text-sm font-weight-normal">{{ client.group }}</td>
                <td class="text-sm font-weight-normal" data-order="{{ client.created_at|date:'Y-m-d' }}">
                  {{ client.created_at|date:"Y-m-d" }}
                </td>
                <td class="text-sm font-weight-normal">
                  <a href="{% url 'seo_manager:client_detail' client.id %}" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit client">
                    Edit
                  </a>
                </td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  {% include 'includes/footer.html' %}
</div>

<!-- Add the same modal markup just before the closing content block -->
<div class="modal fade" id="add-client" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add New Client</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="post" action="{% url 'seo_manager:add_client' %}" id="addClientForm">
        {% csrf_token %}
        <div class="modal-body">
          <div class="form-group">
            <label for="{{ form.name.id_for_label }}" class="form-control-label">Client Name</label>
            {{ form.name }}
            {% if form.name.errors %}
            <div class="text-danger text-xs">{{ form.name.errors }}</div>
            {% endif %}
          </div>
          
          <div class="form-group mt-3">
            <label for="{{ form.website_url.id_for_label }}" class="form-control-label">Website URL</label>
            {{ form.website_url }}
            {% if form.website_url.errors %}
            <div class="text-danger text-xs">{{ form.website_url.errors }}</div>
            {% endif %}
          </div>
          
          <div class="row mt-3">
            <div class="col-md-6">
              <div class="form-group">
                <label for="{{ form.status.id_for_label }}" class="form-control-label">Status</label>
                {{ form.status }}
                {% if form.status.errors %}
                <div class="text-danger text-xs">{{ form.status.errors }}</div>
                {% endif %}
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label for="{{ form.group.id_for_label }}" class="form-control-label">Group</label>
                {{ form.group }}
                {% if form.group.errors %}
                <div class="text-danger text-xs">{{ form.group.errors }}</div>
                {% endif %}
              </div>
            </div>
          </div>
          
          <div class="form-group mt-3">
            <label for="{{ form.target_audience.id_for_label }}" class="form-control-label">Target Audience</label>
            {{ form.target_audience }}
            {% if form.target_audience.errors %}
            <div class="text-danger text-xs">{{ form.target_audience.errors }}</div>
            {% endif %}
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn bg-gradient-primary">Add Client</button>
        </div>
      </form>
    </div>
  </div>
</div>
{% endblock content %}

{% block extra_css %}
<style>
  .card.h-100 {
    display: flex;
    flex-direction: column;
  }
  .card-body {
    flex: 1 0 auto;
  }
</style>
{% endblock extra_css %}

{% block extra_js %}
  {{ block.super }}
  <script src="{% static 'assets/js/plugins/datatables.js' %}"></script>
  <script>
    const dataTableSearch = new simpleDatatables.DataTable("#clients-table", {
      searchable: true,
      fixedHeight: true,
      perPage: 25,
      perPageSelect: [25, 50, 100, 150]
    });

    // Meta-Tags Snapshot functionality
    document.addEventListener('DOMContentLoaded', function() {
      var createSnapshotBtn = document.getElementById('createSnapshotBtn');
      var snapshotUrlInput = document.getElementById('snapshotUrl');

      if (createSnapshotBtn && snapshotUrlInput) {
        createSnapshotBtn.addEventListener('click', function(e) {
          e.preventDefault();
          
          var url = snapshotUrlInput.value.trim();
          if (!url) {
            Swal.fire({
              title: 'Error!',
              text: 'Please enter a valid URL.',
              icon: 'error',
              confirmButtonText: 'OK'
            });
            return;
          }

          // Show a loading message
          Swal.fire({
            title: 'Creating snapshot...',
            text: 'This may take a few minutes.',
            allowOutsideClick: false,
            allowEscapeKey: false,
            showConfirmButton: false,
            willOpen: () => {
              Swal.showLoading();
            }
          });
          
          // Send the request to create the snapshot
          fetch('{% url "seo_manager:create_meta_tags_snapshot_url" %}', {
            method: 'POST',
            headers: {
              'X-CSRFToken': '{{ csrf_token }}',
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ url: url })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire({
                title: 'Success!',
                text: data.message,
                icon: 'success',
                confirmButtonText: 'OK'
              });
            } else {
              Swal.fire({
                title: 'Error!',
                text: data.message,
                icon: 'error',
                confirmButtonText: 'OK'
              });
            }
          })
          .catch(error => {
            console.error('Error:', error);
            Swal.fire({
              title: 'Error!',
              text: 'An error occurred while creating the snapshot.',
              icon: 'error',
              confirmButtonText: 'OK'
            });
          });
        });
      }
    });
  </script>
{% endblock extra_js %}

================
File: seo_manager/templates/seo_manager/edit_business_objective.html
================
{% extends "layouts/base.html" %}

{% block title %} Edit Business Objective - {{ client.name }} {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header pb-0">
          <div class="d-flex align-items-center">
            <h6 class="mb-0">Edit Business Objective</h6>
          </div>
          <p class="text-sm mb-0">Update business objective details for {{ client.name }}</p>
        </div>
        <div class="card-body">
          <form method="post">
            {% csrf_token %}
            <div class="row">
              <div class="col-md-12 mb-4">
                <label class="form-label">Business Objective</label>
                {{ form.goal }}
                {% if form.goal.help_text %}
                  <div class="form-text text-muted">{{ form.goal.help_text }}</div>
                {% endif %}
              </div>
              
              <div class="col-md-12 mb-4">
                <label class="form-label">Success Metrics</label>
                {{ form.metric }}
                {% if form.metric.help_text %}
                  <div class="form-text text-muted">{{ form.metric.help_text }}</div>
                {% endif %}
              </div>

              <div class="col-md-6 mb-4">
                <label class="form-label">Target Date</label>
                {{ form.target_date }}
                {% if form.target_date.help_text %}
                  <div class="form-text text-muted">{{ form.target_date.help_text }}</div>
                {% endif %}
              </div>

              <div class="col-md-6 mb-4">
                <div class="form-check form-switch mt-4">
                  {{ form.status }}
                  <label class="form-check-label" for="{{ form.status.id_for_label }}">
                    Active Objective
                  </label>
                </div>
              </div>
            </div>

            <div class="d-flex justify-content-end mt-4">
              <a href="{% url 'seo_manager:client_detail' client.id %}" class="btn btn-light m-0 me-2">Cancel</a>
              <button type="submit" class="btn bg-gradient-primary m-0">Update Objective</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block extra_js %}
{{ block.super }}
<script>
  document.addEventListener("DOMContentLoaded", function() {
    flatpickr(".flatpickr-date", {
      dateFormat: "Y-m-d",
      allowInput: true
    });
  });
</script>
{% endblock extra_js %}

================
File: seo_manager/templates/seo_manager/edit_client.html
================
{% extends "layouts/base.html" %}

{% block title %} Edit Client - {{ client.name }} {% endblock %}

{% block content %}

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mt-4" id="basic-info">
        <div class="card-header">
          <h5>Edit Client: {{ client.name }}</h5>
        </div>
        <div class="card-body pt-0">
          <form method="post">
            {% csrf_token %}
            <div class="row">
              <div class="col-6">
                <label class="form-label">Name</label><br>
                <div class="input-group">
                  {{ form.name }}
                </div>
              </div>
              <div class="col-6">
                <label class="form-label">Website URL</label><br>
                <div class="input-group">
                  {{ form.website_url }}
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-6">
                <label class="form-label mt-4">Status</label><br>
                {{ form.status }}
              </div>
              <div class="col-6">
                <label class="form-label mt-4">Group</label><br>
                {{ form.group }}
              </div>
            </div>
            <div class="row">
              <div class="col-12">
                <label class="form-label mt-4">Target Audience</label><br>
                <div class="input-group">
                  {{ form.target_audience }}
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-12 mt-4">
                <button type="submit" class="btn bg-gradient-dark btn-sm float-end mt-6 mb-0">Update Client</button>
                <a href="{% url 'seo_manager:client_detail' client.id %}" class="btn btn-outline-secondary btn-sm float-end mt-6 mb-0 me-2">Cancel</a>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock content %}

{% block extra_js %}
<script>
  // Add any necessary JavaScript for the edit client form
</script>
{% endblock extra_js %}

================
File: seo_manager/templates/seo_manager/input_view_id.html
================
{% extends "layouts/base.html" %}

{% block title %} Input Google Analytics View ID {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Input Google Analytics View ID for {{ client.name }}</h6>
        </div>
        <div class="card-body">
          <form method="post">
            {% csrf_token %}
            <div class="form-group">
              <label for="view_id">Google Analytics View ID</label>
              <input type="text" class="form-control" id="view_id" name="view_id" required>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock content %}

================
File: seo_manager/templates/seo_manager/ranking_data_management.html
================
{% extends "layouts/base.html" %}
{% load static %}
{% load seo_manager_filters %}

{% block title %} Ranking Data Management - {{ client.name }} {% endblock %}

{% block content %}

<div class="container-fluid py-4">
    <div class="row">
        <div class="d-flex justify-content-between mb-4">
            <div>
                <h5 class="mb-0">Ranking Data Management - {{ client.name }}</h5>
                <p class="text-sm mb-0">Detailed view of Search Console ranking data</p>
            </div>
            <div class="d-flex gap-2">
                <button type="button" class="btn bg-gradient-primary btn-sm" id="collectRankingsBtn">
                    <i class="fas fa-sync"></i>&nbsp;&nbsp;Collect Latest Rankings
                </button>
                <button type="button" class="btn bg-gradient-info btn-sm" id="generateReportBtn">
                    <i class="fas fa-file-alt"></i>&nbsp;&nbsp;Generate Report
                </button>
                <button type="button" class="btn btn-outline-primary btn-sm" id="backfillRankingsBtn">
                    Backfill Historical Data
                </button>
            </div>
        </div>

        <!-- Stats Cards Row -->
        <div class="row mb-4">
            <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
                <div class="card">
                    <div class="card-body p-3">
                        <div class="row">
                            <div class="col-8">
                                <div class="numbers">
                                    <p class="text-sm mb-0 text-capitalize font-weight-bold">Last Collection</p>
                                    <h5 class="font-weight-bolder mb-0">
                                        {% if latest_collection_date %}
                                            {{ latest_collection_date|date:"M d, Y" }}
                                        {% else %}
                                            No Data
                                        {% endif %}
                                    </h5>
                                </div>
                            </div>
                            <div class="col-4 text-end">
                                <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                                    <i class="ni ni-calendar-grid-58 text-lg opacity-10" aria-hidden="true"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
                <div class="card">
                    <div class="card-body p-3">
                        <div class="row">
                            <div class="col-8">
                                <div class="numbers">
                                    <p class="text-sm mb-0 text-capitalize font-weight-bold">Data Coverage</p>
                                    <h5 class="font-weight-bolder mb-0">
                                        {{ data_coverage_months }} months
                                    </h5>
                                </div>
                            </div>
                            <div class="col-4 text-end">
                                <div class="icon icon-shape bg-gradient-info shadow text-center border-radius-md">
                                    <i class="ni ni-chart-bar-32 text-lg opacity-10" aria-hidden="true"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
                <div class="card">
                    <div class="card-body p-3">
                        <div class="row">
                            <div class="col-8">
                                <div class="numbers">
                                    <p class="text-sm mb-0 text-capitalize font-weight-bold">Keywords Tracked</p>
                                    <h5 class="font-weight-bolder mb-0">
                                        {{ tracked_keywords_count }}
                                    </h5>
                                </div>
                            </div>
                            <div class="col-4 text-end">
                                <div class="icon icon-shape bg-gradient-success shadow text-center border-radius-md">
                                    <i class="ni ni-collection text-lg opacity-10" aria-hidden="true"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-sm-6">
                <div class="card">
                    <div class="card-body p-3">
                        <div class="row">
                            <div class="col-8">
                                <div class="numbers">
                                    <p class="text-sm mb-0 text-capitalize font-weight-bold">Status</p>
                                    <h5 class="font-weight-bolder mb-0">
                                        {% if latest_collection_date %}
                                            <span class="text-success">Active</span>
                                        {% else %}
                                            <span class="text-warning">No Data</span>
                                        {% endif %}
                                    </h5>
                                </div>
                            </div>
                            <div class="col-4 text-end">
                                <div class="icon icon-shape bg-gradient-warning shadow text-center border-radius-md">
                                    <i class="ni ni-check-bold text-lg opacity-10" aria-hidden="true"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Add this section for search and controls -->
        <div class="d-flex justify-content-between mb-4">
            <form class="search">
                <div class="d-flex gap-3 align-items-start">
                    <input type="text" placeholder="Search for keywords" name="search" value="{{ search_query }}" class="form-control">
                    <button type="submit" class="btn btn-primary px-3">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </form>
            <div class="hide-show">
                <form method="post">
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Hide / Show Column
                        </button>
                        <div id="dropdownDefaultCheckbox">
                            <ul class="dropdown-menu hide-show-dropdown px-3">
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" data-target="keyword_text" value="" id="checkbox-keyword">
                                    <label class="form-check-label" for="checkbox-keyword">Keyword</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" data-target="position" value="" id="checkbox-position">
                                    <label class="form-check-label" for="checkbox-position">Position</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" data-target="change" value="" id="checkbox-change">
                                    <label class="form-check-label" for="checkbox-change">Change</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" data-target="impressions" value="" id="checkbox-impressions">
                                    <label class="form-check-label" for="checkbox-impressions">Impressions</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" data-target="clicks" value="" id="checkbox-clicks">
                                    <label class="form-check-label" for="checkbox-clicks">Clicks</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" data-target="ctr" value="" id="checkbox-ctr">
                                    <label class="form-check-label" for="checkbox-ctr">CTR</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" data-target="date" value="" id="checkbox-date">
                                    <label class="form-check-label" for="checkbox-date">Date</label>
                                </div>
                            </ul>
                        </div>
                    </div>
                </form>
            </div>
            <div class="page-size">
                <div class="d-flex gap-2">
                    <form method="post">
                        {% csrf_token %}
                        <select onchange="getPageItems(this)" name="" id="" class="form-select">
                            <option {% if items == 25 %} selected {% endif %} value="25">25 Items</option>
                            <option {% if items == 100 %} selected {% endif %} value="100">100 Items</option>
                            <option {% if items == 250 %} selected {% endif %} value="250">250 Items</option>
                            <option {% if items == 500 %} selected {% endif %} value="500">500 Items</option>
                            <option {% if items == 1000 %} selected {% endif %} value="1000">1000 Items</option>
                        </select>
                    </form>
                    <div class="d-flex">
                        <a data-bs-toggle="modal" data-bs-target="#exportCSV">
                            <img class="export-csv-img" src="{% static 'assets/img/csv.png' %}" alt="">
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Update your table section -->
        <div class="card">
            <div class="card-header">
                <h5>Rankings History</h5>
                <small>Complete history of keyword rankings with filtering and sorting capabilities.</small>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table id="rankings-table" class="table align-items-center mb-0">
                        <thead>
                            <tr>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Keyword</th>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Position</th>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Change</th>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Impressions</th>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Clicks</th>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">CTR</th>
                                <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for ranking in rankings %}
                            <tr>
                                <td>
                                    <div class="d-flex px-2 py-1">
                                        <div class="d-flex flex-column justify-content-center">
                                            <h6 class="mb-0 text-sm">{{ ranking.keyword_text }}</h6>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <p class="text-sm font-weight-bold mb-0">{{ ranking.average_position|floatformat:1 }}</p>
                                </td>
                                <td>
                                    {% with change=ranking.position_change %}
                                        {% if change > 0 %}
                                            <span class="text-success text-sm font-weight-bolder">
                                                <i class="fas fa-arrow-up"></i> {{ change|floatformat:1 }}
                                            </span>
                                        {% elif change < 0 %}
                                            <span class="text-danger text-sm font-weight-bolder">
                                                <i class="fas fa-arrow-down"></i> {{ change|floatformat:1|slice:"1:" }}
                                            </span>
                                        {% else %}
                                            <span class="text-secondary text-sm">
                                                <i class="fas fa-minus"></i>
                                            </span>
                                        {% endif %}
                                    {% endwith %}
                                </td>
                                <td>
                                    <p class="text-sm font-weight-bold mb-0">{{ ranking.impressions }}</p>
                                </td>
                                <td>
                                    <p class="text-sm font-weight-bold mb-0">{{ ranking.clicks }}</p>
                                </td>
                                <td>
                                    <p class="text-sm font-weight-bold mb-0">{{ ranking.ctr|floatformat:2 }}%</p>
                                </td>
                                <td>
                                    <p class="text-sm font-weight-bold mb-0">{{ ranking.date|date:"M d, Y" }}</p>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add the export CSV modal -->
<div class="modal fade" id="exportCSV" tabindex="-1" aria-labelledby="exportCSVLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <div class="d-flex justify-content-between">
                    <div>
                        <h1 class="modal-title fs-5" id="exportCSVLabel">Export as CSV</h1>
                    </div>
                    <div>
                        <a href="{% url 'seo_manager:export_rankings_csv' client.id %}{% if search_query %}?search={{ search_query }}{% endif %}">
                            <img class="export-img" src="{% static 'assets/img/export.png' %}" alt="">
                        </a>
                    </div>
                    <div>
                        <button type="button" class="btn-close text-dark" data-bs-dismiss="modal" aria-label="Close">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="modal-body">
                <!-- Add a preview table here -->
            </div>
        </div>
    </div>
</div>

<!-- Add the report modal -->
<div class="modal fade" id="reportModal" tabindex="-1" aria-labelledby="reportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reportModalLabel">Rankings Report</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="reportContent"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="window.print()">Print Report</button>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block extra_js %}
{{ block.super }}
<!-- DataTables -->
<script src="{% static "assets/js/plugins/datatables.js" %}"></script>

<!-- SweetAlert2 -->
<script src="{% static "assets/js/plugins/sweetalert.min.js" %}"></script>

<!-- Pass URLs to JavaScript -->
<script>
    const urls = {
        collectRankings: "{% url 'seo_manager:collect_rankings' client.id %}",
        generateReport: "{% url 'seo_manager:generate_report' client.id %}",
        backfillRankings: "{% url 'seo_manager:backfill_rankings' client.id %}"
    };
    // Make urls globally available
    Object.defineProperty(window, 'urls', {
        value: urls,
        writable: false,
        configurable: false
    });
</script>

<!-- Custom JS -->
<script src="{% static 'seo_manager/js/ranking_data_management.js' %}?v={% now 'YmdHis' %}"></script>
{% endblock extra_js %}

{% block extrastyle %}
<style>
    .hide-show-dropdown {
        max-height: 350px;
        overflow-y: scroll;
    }
    .page-size .export-csv-img {
        width: 35px;
        cursor: pointer;
    }
    .export-img {
        width: 30px;
    }
    .modal-header {
        display: block !important;
    }
    .height {
        height: 40px !important;
    }
    th a {
        display: flex;
        align-items: center;
        justify-content: space-between;
        text-decoration: none;
    }
    th a:hover {
        text-decoration: none;
        opacity: 0.8;
    }
    th a i {
        margin-left: 5px;
    }
    .fa-sort {
        color: #ccc;
    }
    .fa-sort-up, .fa-sort-down {
        color: #344767;
    }
    #reportContent {
        padding: 20px;
    }
    @media print {
        body * {
            visibility: hidden;
        }
        #reportModal, #reportModal * {
            visibility: visible;
        }
        #reportModal {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
        }
    }
    .dataTables_wrapper .dataTables_filter {
        float: left;
        margin-bottom: 1rem;
    }
    .dataTables_wrapper .dataTables_filter input {
        width: 300px;
    }
    .dataTables_wrapper .dataTables_length {
        float: right;
    }
    .dataTables_wrapper .dataTables_info {
        clear: both;
        padding-top: 1rem;
    }
    .dataTables_wrapper .dataTables_paginate {
        padding-top: 1rem;
    }
</style>
{% endblock %}

================
File: seo_manager/templates/seo_manager/select_analytics_account.html
================
{% extends "layouts/base.html" %}

{% block title %} Select Analytics Account - {{ client.name }} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <div class="d-lg-flex">
            <div>
              <h5 class="mb-0">Select Google Analytics Account</h5>
              <p class="text-sm mb-0">Choose the Analytics property to connect for {{ client.name }}</p>
            </div>
          </div>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
          <div class="table-responsive p-0">
            <table class="table align-items-center mb-0" id="analytics-properties-table">
              <thead>
                <tr>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Property Name</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Property ID</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Account</th>
                  <th class="text-secondary opacity-7"></th>
                </tr>
              </thead>
              <tbody>
                {% for account in accounts %}
                <tr>
                  <td>
                    <div class="d-flex px-2 py-1">
                      <div class="d-flex flex-column justify-content-center">
                        <h6 class="mb-0 text-sm">{{ account.property_name }}</h6>
                      </div>
                    </div>
                  </td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ account.property_id }}</p>
                  </td>
                  <td>
                    <p class="text-xs text-secondary mb-0">{{ account.account_name }}</p>
                  </td>
                  <td class="align-middle text-center">
                    <form method="post" class="d-inline">
                      {% csrf_token %}
                      <input type="hidden" name="selected_account" value="{{ account.property_id }}">
                      <button type="submit" class="btn btn-link text-secondary mb-0">
                        <span class="bg-gradient-primary btn px-3 mb-0 text-white">Select</span>
                      </button>
                    </form>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
      <div class="d-flex justify-content-end">
        <a href="{% url 'seo_manager:client_detail' client.id %}" class="btn btn-light m-0">
          <span class="btn-inner--icon"><i class="fas fa-times"></i></span>
          <span class="btn-inner--text">Cancel</span>
        </a>
      </div>
    </div>
  </div>
</div>
{% endblock content %}

{% block extra_js %}
{{ block.super }}
<script src="/static/assets/js/plugins/datatables.js"></script>
<script>
  if (document.getElementById('analytics-properties-table')) {
    const dataTableSearch = new simpleDatatables.DataTable("#analytics-properties-table", {
      searchable: true,
      fixedHeight: false,
      perPage: 10,
      columns: [
        { select: [3], sortable: false }
      ]
    });
  }
</script>
{% endblock extra_js %}

{% block extra_css %}
{{ block.super }}
<style>
  .dataTable-wrapper .dataTable-container {
    font-size: 0.875rem;
  }
  
  .dataTable-wrapper .dataTable-top {
    padding: 1rem 1.5rem;
  }
  
  .dataTable-wrapper .dataTable-search {
    float: right;
  }
  
  .dataTable-wrapper .dataTable-input {
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    border: 1px solid #d2d6da;
  }
  
  .dataTable-wrapper .dataTable-info {
    margin: 0;
    font-size: 0.75rem;
  }
  
  .table tbody tr:last-child td {
    border-bottom: none;
  }
  
  .dataTable-pagination .active a, 
  .dataTable-pagination .active a:hover {
    background-color: #cb0c9f;
    border-color: #cb0c9f;
    color: white;
  }
  
  .dataTable-pagination a {
    border-radius: 0.5rem;
    margin: 0 3px;
  }
  
  .dataTable-pagination a:hover {
    background-color: #f8f9fa;
    border-color: #dee2e6;
  }
</style>
{% endblock extra_css %}

================
File: seo_manager/templates/seo_manager/select_search_console_property.html
================
{% extends "layouts/base.html" %}

{% block title %} Select Search Console Property - {{ client.name }} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <div class="d-lg-flex">
            <div>
              <h5 class="mb-0">Select Google Search Console Property</h5>
              <p class="text-sm mb-0">Choose the Search Console property to connect for {{ client.name }}</p>
            </div>
          </div>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
          <div class="table-responsive p-0">
            <table class="table align-items-center mb-0" id="search-console-properties-table">
              <thead>
                <tr>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Property URL</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Permission Level</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Owner Verified</th>
                  <th class="text-secondary opacity-7"></th>
                </tr>
              </thead>
              <tbody>
                {% for property in properties %}
                <tr>
                  <td>
                    <div class="d-flex px-2 py-1">
                      <div class="d-flex flex-column justify-content-center">
                        <h6 class="mb-0 text-sm">{{ property.url }}</h6>
                      </div>
                    </div>
                  </td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ property.permission_level }}</p>
                  </td>
                  <td>
                    <p class="text-xs text-secondary mb-0">{{ property.owner_verified|yesno:"Yes,No" }}</p>
                  </td>
                  <td class="align-middle text-center">
                    <form method="post" class="d-inline">
                      {% csrf_token %}
                      <input type="hidden" name="selected_property" value="{{ property.url }}">
                      <button type="submit" class="btn btn-link text-secondary mb-0">
                        <span class="bg-gradient-primary btn px-3 mb-0 text-white">Select</span>
                      </button>
                    </form>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
      <div class="d-flex justify-content-end">
        <a href="{% url 'seo_manager:client_detail' client.id %}" class="btn btn-light m-0">
          <span class="btn-inner--icon"><i class="fas fa-times"></i></span>
          <span class="btn-inner--text">Cancel</span>
        </a>
      </div>
    </div>
  </div>
</div>
{% endblock content %}

{% block extra_js %}
{{ block.super }}
<script src="/static/assets/js/plugins/datatables.js"></script>
<script>
  if (document.getElementById('search-console-properties-table')) {
    const dataTableSearch = new simpleDatatables.DataTable("#search-console-properties-table", {
      searchable: true,
      fixedHeight: false,
      perPage: 10,
      columns: [
        { select: [3], sortable: false }
      ]
    });
  }
</script>
{% endblock extra_js %}

{% block extra_css %}
{{ block.super }}
<style>
  .dataTable-wrapper .dataTable-container {
    font-size: 0.875rem;
  }
  
  .dataTable-wrapper .dataTable-top {
    padding: 1rem 1.5rem;
  }
  
  .dataTable-wrapper .dataTable-search {
    float: right;
  }
  
  .dataTable-wrapper .dataTable-input {
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    border: 1px solid #d2d6da;
  }
  
  .dataTable-wrapper .dataTable-info {
    margin: 0;
    font-size: 0.75rem;
  }
  
  .table tbody tr:last-child td {
    border-bottom: none;
  }
  
  .dataTable-pagination .active a, 
  .dataTable-pagination .active a:hover {
    background-color: #cb0c9f;
    border-color: #cb0c9f;
    color: white;
  }
  
  .dataTable-pagination a {
    border-radius: 0.5rem;
    margin: 0 3px;
  }
  
  .dataTable-pagination a:hover {
    background-color: #f8f9fa;
    border-color: #dee2e6;
  }
</style>
{% endblock extra_css %}

================
File: seo_manager/templates/seo_manager/select_search_console.html
================
{% extends "layouts/base.html" %}

{% block title %} Select Search Console Property - {{ client.name }} {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <div class="d-lg-flex">
            <div>
              <h5 class="mb-0">Select Search Console Property</h5>
              <p class="text-sm mb-0">Choose the Search Console property to connect for {{ client.name }}</p>
            </div>
          </div>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
          <div class="table-responsive p-0">
            <table class="table align-items-center mb-0" id="search-console-table">
              <thead>
                <tr>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Website URL</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Permission Level</th>
                  <th class="text-secondary opacity-7"></th>
                </tr>
              </thead>
              <tbody>
                {% for property in properties %}
                <tr>
                  <td>
                    <div class="d-flex px-2 py-1">
                      <div class="d-flex flex-column justify-content-center">
                        <h6 class="mb-0 text-sm">{{ property.url }}</h6>
                      </div>
                    </div>
                  </td>
                  <td>
                    <p class="text-xs font-weight-bold mb-0">{{ property.permission_level }}</p>
                  </td>
                  <td class="align-middle text-center">
                    <form method="post" class="d-inline">
                      {% csrf_token %}
                      <input type="hidden" name="selected_property" value="{{ property.url }}">
                      <button type="submit" class="btn btn-link text-secondary mb-0">
                        <span class="bg-gradient-primary btn-sm px-3 mb-0 text-white">Select</span>
                      </button>
                    </form>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
      <div class="d-flex justify-content-end">
        <a href="{% url 'seo_manager:client_detail' client.id %}" class="btn btn-light m-0">
          <span class="btn-inner--icon"><i class="fas fa-times"></i></span>
          <span class="btn-inner--text">Cancel</span>
        </a>
      </div>
    </div>
  </div>
</div>
{% endblock content %}

{% block extra_js %}
{{ block.super }}
<script src="/static/assets/js/plugins/datatables.js"></script>
<script>
  if (document.getElementById('search-console-table')) {
    const dataTableSearch = new simpleDatatables.DataTable("#search-console-table", {
      searchable: true,
      fixedHeight: false,
      perPage: 10,
      columns: [
        { select: [2], sortable: false }
      ]
    });
  }
</script>
{% endblock extra_js %}

{% block extra_css %}
{{ block.super }}
<style>
  .dataTable-wrapper .dataTable-container {
    font-size: 0.875rem;
  }
  
  .dataTable-wrapper .dataTable-top {
    padding: 1rem 1.5rem;
  }
  
  .dataTable-wrapper .dataTable-search {
    float: right;
  }
  
  .dataTable-wrapper .dataTable-input {
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    border: 1px solid #d2d6da;
  }
  
  .dataTable-wrapper .dataTable-info {
    margin: 0;
    font-size: 0.75rem;
  }
  
  .table tbody tr:last-child td {
    border-bottom: none;
  }
  
  .dataTable-pagination .active a, 
  .dataTable-pagination .active a:hover {
    background-color: #cb0c9f;
    border-color: #cb0c9f;
    color: white;
  }
  
  .dataTable-pagination a {
    border-radius: 0.5rem;
    margin: 0 3px;
  }
  
  .dataTable-pagination a:hover {
    background-color: #f8f9fa;
    border-color: #dee2e6;
  }
</style>
{% endblock extra_css %}

================
File: seo_manager/templates/seo_manager/setup_service_account.html
================
{% extends "layouts/base.html" %}

{% block title %} Setup Google Analytics Service Account {% endblock %}

{% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Setup Google Analytics Service Account for {{ client.name }}</h6>
        </div>
        <div class="card-body">
          <form method="post">
            {% csrf_token %}
            <div class="form-group">
              <label for="service_account_json">Service Account JSON</label>
              <textarea class="form-control" id="service_account_json" name="service_account_json" rows="10" required></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock content %}

================
File: seo_manager/templatetags/__init__.py
================
# Empty file, just needs to exist

================
File: seo_manager/templatetags/custom_filters.py
================
from django import template
from datetime import datetime

register = template.Library()

@register.filter(name='format_iso_date')
def format_iso_date(value, format_string):
  try:
      date = datetime.fromisoformat(value)
      return date.strftime(format_string)
  except (ValueError, TypeError):
      return value  # Return the original value if parsing fails

================
File: seo_manager/templatetags/form_tags.py
================
from django import template

register = template.Library()

@register.filter(name='addclass')
def addclass(field, css_class):
    return field.as_widget(attrs={"class": css_class})

================
File: seo_manager/templatetags/seo_manager_filters.py
================
from django import template
import os

register = template.Library()

@register.filter
def abs_value(value):
    try:
        return abs(value)
    except (TypeError, ValueError):
        return value

@register.filter
def basename(value):
    """Get the basename of a file path"""
    return os.path.basename(value)

@register.filter
def split(value, arg):
    return value.split(arg)

================
File: seo_manager/templatetags/seo_tags.py
================
from django import template

register = template.Library()

@register.filter
def get_item(dictionary, key):
    """Get an item from a dictionary using bracket notation"""
    return dictionary.get(key)

================
File: seo_manager/utils/meta_tags_analyzer.py
================
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import xml.etree.ElementTree as ET

def analyze_website_meta_tags(website_url):
    try:
        # Get sitemap URL
        sitemap_url = urljoin(website_url, 'sitemap.xml')
        
        # Fetch sitemap
        response = requests.get(sitemap_url)
        root = ET.fromstring(response.content)
        
        urls = []
        for url in root.findall('.//{http://www.sitemaps.org/schemas/sitemap/0.9}loc'):
            urls.append(url.text)
        
        total_tags = 0
        issues = []
        meta_data = []
        
        # Analyze each URL
        for url in urls[:10]:  # Limit to first 10 URLs for performance
            response = requests.get(url)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Collect meta tags
            meta_tags = soup.find_all('meta')
            total_tags += len(meta_tags)
            
            page_meta = {
                'url': url,
                'title': soup.title.string if soup.title else None,
                'meta_tags': []
            }
            
            for tag in meta_tags:
                tag_data = {
                    'name': tag.get('name', tag.get('property', '')),
                    'content': tag.get('content', '')
                }
                page_meta['meta_tags'].append(tag_data)
                
                # Check for common issues
                if not tag.get('content'):
                    issues.append(f"Empty content in meta tag {tag_data['name']} on {url}")
            
            meta_data.append(page_meta)
        
        return {
            'total_tags': total_tags,
            'issues_count': len(issues),
            'issues': issues,
            'pages': meta_data
        }
        
    except Exception as e:
        raise Exception(f"Error analyzing meta tags: {str(e)}")

================
File: seo_manager/views/__init__.py
================
from .client_views import *
from .keyword_views import *
from .project_views import *
from .analytics_views import *
from .search_console_views import *
from .business_objective_views import *
from .ranking_views import *
from .report_views import *
from .activity_views import *
from .meta_tags_views import *

================
File: seo_manager/views/activity_views.py
================
from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from ..models import UserActivity

@login_required
def activity_log(request):
    activities = UserActivity.objects.all().order_by('-timestamp')
    return render(request, 'seo_manager/activity_log.html', {'activities': activities})

================
File: seo_manager/views/analytics_views.py
================
import json
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.exceptions import ValidationError
from ..models import Client, GoogleAnalyticsCredentials, OAuthManager, SearchConsoleCredentials
from ..google_auth import (
    get_analytics_accounts_oauth, 
    get_analytics_accounts_service_account,
    get_search_console_properties
)
from apps.common.tools.user_activity_tool import user_activity_tool
from ..exceptions import AuthError
from django.views.decorators.http import require_http_methods
from django.http import JsonResponse
import logging
import google.oauth2.credentials
from google_auth_oauthlib.flow import Flow
from django.conf import settings

logger = logging.getLogger(__name__)

@login_required
def client_ads(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    # Add page_title to the context
    context = {
        'client': client,
        'page_title': 'Google Ads',
    }
    return render(request, 'seo_manager/client_ads.html', context)

@login_required
def client_dataforseo(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    # Add page_title to the context
    context = {
        'client': client,
        'page_title': 'DataforSEO',
    }
    return render(request, 'seo_manager/client_dataforseo.html', context)

@login_required
def initiate_google_oauth(request, client_id, service_type):
    """Start OAuth flow for Google services"""
    client = get_object_or_404(Client, id=client_id)
    
    try:
        # Create state key
        state_key = f"{client_id}_{service_type}"
        
        # Get the current domain and scheme
        scheme = request.scheme
        domain = request.get_host()
        redirect_uri = f'{scheme}://{domain}/google/login/callback/'
        
        # Create OAuth flow with correct callback URL
        flow = Flow.from_client_secrets_file(
            settings.GOOGLE_CLIENT_SECRETS_FILE,
            scopes=[
                'https://www.googleapis.com/auth/analytics.readonly',
                'https://www.googleapis.com/auth/webmasters.readonly',
                'openid',
                'https://www.googleapis.com/auth/userinfo.email',
                'https://www.googleapis.com/auth/userinfo.profile'
            ],
            state=state_key,
            redirect_uri=redirect_uri
        )
        
        # Store both state and redirect URI in session
        request.session['oauth_state'] = state_key
        request.session['oauth_redirect_uri'] = redirect_uri
        request.session['oauth_service_type'] = service_type
        request.session.modified = True
        
        # Get authorization URL with proper parameters
        authorization_url, _ = flow.authorization_url(
            access_type='offline',
            include_granted_scopes='true',
            prompt='select_account'
        )
        
        logger.info(f"Initiating OAuth flow for client {client.name} ({service_type})")
        logger.debug(f"Using redirect URI: {redirect_uri}")
        
        return redirect(authorization_url)
        
    except Exception as e:
        logger.error(f"OAuth initiation error: {str(e)}", exc_info=True)
        messages.error(request, "Failed to start authentication process")
        return redirect('seo_manager:client_detail', client_id=client_id)

@login_required
def google_oauth_callback(request):
    """Handle OAuth callback"""
    try:
        # Verify state
        state = request.GET.get('state')
        stored_state = request.session.get('oauth_state')
        
        if not state or state != stored_state:
            logger.error("Invalid OAuth state")
            messages.error(request, "Invalid authentication state. Please try again.")
            return redirect('seo_manager:dashboard')
        
        # Extract client_id from state
        try:
            client_id = int(state.split('_')[0])
            service_type = state.split('_')[1]
        except (IndexError, ValueError):
            logger.error(f"Invalid state format: {state}")
            messages.error(request, "Invalid authentication data. Please try again.")
            return redirect('seo_manager:dashboard')
        
        client = get_object_or_404(Client, id=client_id)
        logger.info(f"Processing OAuth callback for client {client.name} ({service_type})")
        
        # Get the current domain and scheme for redirect URI
        scheme = request.scheme
        domain = request.get_host()
        redirect_uri = f'{scheme}://{domain}/google/login/callback/'
        
        # Complete OAuth flow
        try:
            flow = Flow.from_client_secrets_file(
                settings.GOOGLE_CLIENT_SECRETS_FILE,
                scopes=[
                    'https://www.googleapis.com/auth/analytics.readonly',
                    'https://www.googleapis.com/auth/webmasters.readonly',
                    'openid',
                    'https://www.googleapis.com/auth/userinfo.email',
                    'https://www.googleapis.com/auth/userinfo.profile'
                ],
                state=state,
                redirect_uri=redirect_uri
            )
            
            # Fetch token
            token = flow.fetch_token(code=request.GET.get('code'))
            
            # Convert token to Google Credentials
            credentials = google.oauth2.credentials.Credentials(
                token=token['access_token'],
                refresh_token=token.get('refresh_token'),
                token_uri='https://oauth2.googleapis.com/token',
                client_id=flow.client_config['client_id'],
                client_secret=flow.client_config['client_secret'],
                scopes=token.get('scope', '').split(' ') if isinstance(token.get('scope'), str) else token.get('scope', [])
            )
            
            # Store credentials in session
            request.session['oauth_credentials'] = OAuthManager.credentials_to_dict(credentials)
            
            if service_type == 'ga':
                try:
                    # Get available accounts using the Google Credentials
                    accounts = get_analytics_accounts_oauth(credentials)
                    
                    if not accounts:
                        logger.warning(f"No GA4 properties found for client {client.name}")
                        messages.warning(request, "No Google Analytics 4 properties were found.")
                        return redirect('seo_manager:client_detail', client_id=client_id)
                    
                    request.session['accounts'] = accounts
                    return redirect('seo_manager:select_analytics_account', client_id=client_id)
                    
                except Exception as e:
                    logger.error(f"Error fetching GA4 properties: {str(e)}", exc_info=True)
                    messages.error(request, "Failed to fetch Google Analytics properties.")
                    return redirect('seo_manager:client_detail', client_id=client_id)
            
            elif service_type == 'sc':
                try:
                    # Get available Search Console properties
                    properties = get_search_console_properties(credentials)
                    if not properties:
                        messages.warning(request, "No Search Console properties found. Please verify your permissions.")
                        return redirect('seo_manager:client_detail', client_id=client_id)
                    
                    request.session['sc_properties'] = properties
                    return redirect('seo_manager:select_search_console_property', client_id=client_id)
                    
                except Exception as e:
                    logger.error(f"Error fetching Search Console properties: {str(e)}", exc_info=True)
                    messages.error(request, "Failed to fetch Search Console properties. Please verify your permissions.")
                    return redirect('seo_manager:client_detail', client_id=client_id)
            
        except Exception as e:
            logger.error(f"OAuth flow error: {str(e)}", exc_info=True)
            messages.error(request, "Authentication failed. Please try again.")
            return redirect('seo_manager:client_detail', client_id=client_id)
            
    except Exception as e:
        logger.error(f"OAuth callback error: {str(e)}", exc_info=True)
        messages.error(request, "Authentication failed. Please try again.")
        return redirect('seo_manager:dashboard')
    
    return redirect('seo_manager:client_detail', client_id=client_id)

@login_required
def add_ga_credentials_oauth(request, client_id):
    """Handle Google Analytics OAuth credential addition"""
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'GET':
        try:
            # Create state key
            state_key = f"{client_id}_ga"
            
            # Create OAuth flow
            flow = OAuthManager.create_oauth_flow(
                request=request, 
                state_key=state_key
            )
            
            # Get authorization URL with proper parameters
            authorization_url, _ = flow.authorization_url(
                access_type='offline',
                include_granted_scopes='true',
                prompt='consent'
            )
            
            # Store state in session
            request.session['oauth_state'] = state_key
            request.session['oauth_service_type'] = 'ga'
            request.session['oauth_client_id'] = client_id
            
            logger.info(f"Starting GA OAuth flow for client {client.name}")
            return redirect(authorization_url)
            
        except Exception as e:
            logger.error(f"Error starting GA OAuth flow: {str(e)}")
            messages.error(request, "Failed to start authentication process")
            return redirect('seo_manager:client_detail', client_id=client_id)
    
    return redirect('seo_manager:client_detail', client_id=client_id)

@login_required
def add_ga_credentials_service_account(request, client_id):
    """Handle Google Analytics service account credential addition"""
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'GET':
        return render(request, 'seo_manager/credentials/add_ga_service_account.html', {
            'client': client
        })
        
    elif request.method == 'POST':
        try:
            if 'service_account_file' not in request.FILES:
                raise AuthError("No service account file provided")
                
            service_account_file = request.FILES['service_account_file']
            service_account_json = json.load(service_account_file)
            
            ga_credentials, created = GoogleAnalyticsCredentials.objects.get_or_create(
                client=client,
                defaults={'user_email': request.user.email}
            )
            
            ga_credentials.handle_service_account(json.dumps(service_account_json))
            
            messages.success(request, "Service account credentials added successfully")
            return redirect('seo_manager:client_detail', client_id=client.id)
            
        except AuthError as e:
            messages.error(request, str(e))
        except json.JSONDecodeError:
            messages.error(request, "Invalid JSON file")
        except Exception as e:
            logger.error(f"Error adding service account: {str(e)}")
            messages.error(request, "Failed to add service account credentials")
            
        return redirect('seo_manager:client_detail', client_id=client.id)

@login_required
def remove_ga_credentials(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    if client.ga_credentials:
        client.ga_credentials.delete()
        user_activity_tool.run(request.user, 'delete', f"Removed Google Analytics credentials for client: {client.name}", client=client)
        messages.success(request, "Google Analytics credentials removed successfully.")
    return redirect('seo_manager:client_detail', client_id=client.id)

@login_required
def client_detail(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    try:
        # Handle GA credentials check
        ga_credentials = getattr(client, 'ga_credentials', None)
        if ga_credentials:
            try:
                ga_credentials.validate_credentials()
            except AuthError:
                messages.warning(request, "Google Analytics credentials need to be re-authenticated.")
                ga_credentials.delete()
        
        # Handle SC credentials check similarly
        sc_credentials = getattr(client, 'sc_credentials', None)
        if sc_credentials:
            try:
                sc_credentials.validate_credentials()
            except AuthError:
                messages.warning(request, "Search Console credentials need to be re-authenticated.")
                sc_credentials.delete()
                
    except Exception as e:
        logger.error(f"Error checking credentials: {str(e)}")
        messages.error(request, "Error validating credentials")

    return render(request, 'seo_manager/client_detail.html', {'client': client})

@login_required
def add_sc_credentials(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    # Start OAuth flow
    try:
        flow = OAuthManager.create_oauth_flow(
            request, 
            state=f"{client_id}_sc"
        )
        authorization_url, _ = flow.authorization_url(
            access_type='offline',
            include_granted_scopes='true',
            prompt='consent'
        )
        request.session['oauth_state'] = f"{client_id}_sc"
        return redirect(authorization_url)
        
    except Exception as e:
        logger.error(f"Error initiating Search Console OAuth: {str(e)}")
        messages.error(request, "Failed to start authentication process")
        return redirect('seo_manager:client_detail', client_id=client_id)

@login_required
def select_analytics_account(request, client_id):
    """Handle Analytics account selection"""
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'POST':
        try:
            selected_account = request.POST.get('selected_account')
            if not selected_account:
                raise ValidationError("No account selected")
                
            credentials_dict = request.session.get('oauth_credentials')
            if not credentials_dict:
                raise AuthError("No OAuth credentials found in session")
            
            logger.info(f"Creating/updating GA credentials for client {client.name}")
            logger.debug(f"Credentials dict: {credentials_dict}")
                
            ga_credentials, created = GoogleAnalyticsCredentials.objects.get_or_create(
                client=client,
                defaults={'user_email': request.user.email}
            )
            
            # Save credentials and account info
            ga_credentials.handle_oauth_response(credentials_dict)
            ga_credentials.view_id = selected_account
            ga_credentials.save()
            
            logger.info(f"Successfully saved GA credentials for client {client.name}")
            
            # Clean up session
            for key in ['oauth_credentials', 'accounts', 'oauth_state', 'oauth_service_type', 'oauth_client_id']:
                request.session.pop(key, None)
            
            messages.success(request, "Google Analytics credentials added successfully")
            return redirect('seo_manager:client_detail', client_id=client.id)
            
        except Exception as e:
            logger.error(f"Error saving GA credentials: {str(e)}", exc_info=True)
            messages.error(request, f"Failed to save Google Analytics credentials: {str(e)}")
            return redirect('seo_manager:client_detail', client_id=client.id)
    
    # Handle GET request
    accounts = request.session.get('accounts', [])
    if not accounts:
        messages.error(request, "No Analytics accounts found in session. Please try authenticating again.")
        return redirect('seo_manager:client_detail', client_id=client.id)
        
    return render(request, 'seo_manager/select_analytics_account.html', {
        'client': client,
        'accounts': accounts
    })

@login_required
def select_search_console_property(request, client_id):
    """Handle Search Console property selection"""
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'POST':
        try:
            selected_property = request.POST.get('selected_property')
            if not selected_property:
                raise ValidationError("No property selected")
                
            credentials_dict = request.session.get('oauth_credentials')
            if not credentials_dict:
                raise AuthError("No OAuth credentials found in session")
            
            logger.info(f"Creating/updating SC credentials for client {client.name}")
            logger.debug(f"Credentials dict: {credentials_dict}")
                
            sc_credentials, created = SearchConsoleCredentials.objects.get_or_create(
                client=client,
                defaults={}
            )
            
            # Save credentials and property info
            sc_credentials.handle_oauth_response(credentials_dict)
            sc_credentials.property_url = selected_property
            if request.user.email:
                sc_credentials.user_email = request.user.email
            sc_credentials.save()
            
            logger.info(f"Successfully saved SC credentials for client {client.name}")
            
            # Clean up session
            for key in ['oauth_credentials', 'sc_properties', 'oauth_state']:
                request.session.pop(key, None)
            
            messages.success(request, "Search Console credentials added successfully")
            return redirect('seo_manager:client_detail', client_id=client.id)
            
        except Exception as e:
            logger.error(f"Error saving SC credentials: {str(e)}", exc_info=True)
            messages.error(request, f"Failed to save Search Console credentials: {str(e)}")
            return redirect('seo_manager:client_detail', client_id=client.id)
    
    # Handle GET request
    properties = request.session.get('sc_properties', [])
    if not properties:
        messages.error(request, "No Search Console properties found in session. Please try authenticating again.")
        return redirect('seo_manager:client_detail', client_id=client.id)
        
    return render(request, 'seo_manager/select_search_console_property.html', {
        'client': client,
        'properties': properties
    })

@login_required
def add_sc_credentials_service_account(request, client_id):
    """Handle Search Console service account credential addition"""
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'GET':
        return render(request, 'seo_manager/credentials/add_sc_service_account.html', {
            'client': client
        })
        
    elif request.method == 'POST':
        try:
            if 'service_account_file' not in request.FILES:
                raise AuthError("No service account file provided")
                
            service_account_file = request.FILES['service_account_file']
            service_account_json = json.load(service_account_file)
            
            sc_credentials, created = SearchConsoleCredentials.objects.get_or_create(
                client=client,
                defaults={'user_email': request.user.email}
            )
            
            sc_credentials.handle_service_account(json.dumps(service_account_json))
            
            messages.success(request, "Service account credentials added successfully")
            return redirect('seo_manager:client_detail', client_id=client.id)
            
        except AuthError as e:
            messages.error(request, str(e))
        except json.JSONDecodeError:
            messages.error(request, "Invalid JSON file")
        except Exception as e:
            logger.error(f"Error adding service account: {str(e)}")
            messages.error(request, "Failed to add service account credentials")
            
        return redirect('seo_manager:client_detail', client_id=client.id)

================
File: seo_manager/views/auth_views.py
================


================
File: seo_manager/views/business_objective_views.py
================
from datetime import datetime
from django.shortcuts import get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.shortcuts import render
from ..models import Client
from ..forms import BusinessObjectiveForm
from apps.common.tools.user_activity_tool import user_activity_tool
import json
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods

@login_required
def add_business_objective(request, client_id):
    if request.method == 'POST':
        client = get_object_or_404(Client, id=client_id)
        form = BusinessObjectiveForm(request.POST)
        
        if form.is_valid():
            new_objective = {
                'goal': form.cleaned_data['goal'],
                'metric': form.cleaned_data['metric'],
                'target_date': form.cleaned_data['target_date'].isoformat(),
                'status': form.cleaned_data['status'],
                'date_created': datetime.now().isoformat(),
                'date_last_modified': datetime.now().isoformat(),
            }
            
            if not client.business_objectives:
                client.business_objectives = []
            
            client.business_objectives.append(new_objective)
            client.save()
            
            user_activity_tool.run(
                request.user, 
                'create', 
                f"Added business objective for client: {client.name}", 
                client=client,
                details=new_objective
            )
            
            messages.success(request, "Business objective added successfully.")
        else:
            messages.error(request, "Error adding business objective. Please check the form.")
            
    return redirect('seo_manager:client_detail', client_id=client_id)

@login_required
def edit_business_objective(request, client_id, objective_index):
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'POST':
        form = BusinessObjectiveForm(request.POST)
        if form.is_valid():
            updated_objective = {
                'goal': form.cleaned_data['goal'],
                'metric': form.cleaned_data['metric'],
                'target_date': form.cleaned_data['target_date'].isoformat(),
                'status': form.cleaned_data['status'],
                'date_created': client.business_objectives[objective_index]['date_created'],
                'date_last_modified': datetime.now().isoformat(),
            }
            client.business_objectives[objective_index] = updated_objective
            client.save()
            user_activity_tool.run(request.user, 'update', f"Updated business objective for client: {client.name}", client=client, details=updated_objective)
            messages.success(request, "Business objective updated successfully.")
            return redirect('seo_manager:client_detail', client_id=client.id)
    else:
        objective = client.business_objectives[objective_index]
        initial_data = {
            'goal': objective['goal'],
            'metric': objective['metric'],
            'target_date': datetime.fromisoformat(objective['target_date']),
            'status': objective['status'],
        }
        form = BusinessObjectiveForm(initial=initial_data)
    
    context = {
        'page_title': 'Edit Business Objective',
        'client': client,
        'form': form,
        'objective_index': objective_index,
    }
    
    return render(request, 'seo_manager/edit_business_objective.html', context)

@login_required
def delete_business_objective(request, client_id, objective_index):
    if request.method == 'POST':
        client = get_object_or_404(Client, id=client_id)
        deleted_objective = client.business_objectives.pop(objective_index)
        client.save()
        user_activity_tool.run(request.user, 'delete', f"Deleted business objective for client: {client.name}", client=client, details=deleted_objective)
        messages.success(request, "Business objective deleted successfully.")
    return redirect('seo_manager:client_detail', client_id=client_id)

@require_http_methods(["POST"])
def update_objective_status(request, client_id, objective_index):
    try:
        client = Client.objects.get(id=client_id)
        data = json.loads(request.body)
        new_status = data.get('status')
        
        # Get the objectives list
        objectives = client.business_objectives
        
        # Update the status of the specific objective
        if 0 <= objective_index < len(objectives):
            objectives[objective_index]['status'] = new_status == 'active'
            
            # Update the last modified date
            objectives[objective_index]['date_last_modified'] = datetime.now().isoformat()
            
            # Save the updated objectives
            client.business_objectives = objectives
            client.save()
            
            return JsonResponse({'success': True})
        else:
            return JsonResponse({'success': False, 'error': 'Objective not found'})
            
    except Client.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'Client not found'})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})

================
File: seo_manager/views/client_views.py
================
import json
import logging
import os
import csv
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse, HttpResponse
from django.conf import settings
from django.db.models import Min, Max, Q
from ..models import Client, KeywordRankingHistory, UserActivity, SearchConsoleCredentials
from ..forms import ClientForm, BusinessObjectiveForm, TargetedKeywordForm, KeywordBulkUploadForm, SEOProjectForm, ClientProfileForm
from apps.common.tools.user_activity_tool import user_activity_tool
from apps.agents.tools.client_profile_tool.client_profile_tool import ClientProfileTool
from apps.agents.models import Tool
from datetime import datetime, timedelta
from markdown_it import MarkdownIt  # Import markdown-it
from django.urls import reverse
from .search_console_views import get_search_console_data

logger = logging.getLogger(__name__)
__all__ = [
    'dashboard',
    'client_list',
    'add_client',
    'client_detail',
    'edit_client',
    'delete_client',
    'update_client_profile',
    'generate_magic_profile',
    'load_more_activities',
    'export_activities',
    'client_integrations',
]

@login_required
def dashboard(request):
    clients = Client.objects.all().order_by('name')
    form = ClientForm()
    return render(request, 'seo_manager/dashboard.html', {'page_title': 'Dashboard', 'clients': clients, 'form': form})

@login_required
def client_list(request):
    clients = Client.objects.all().order_by('name').select_related('group')
    form = ClientForm()
    return render(request, 'seo_manager/client_list.html', {'page_title': 'Clients', 'clients': clients, 'form': form})

@login_required
def add_client(request):
    if request.method == 'POST':
        form = ClientForm(request.POST)
        if form.is_valid():
            client = form.save()
            user_activity_tool.run(request.user, 'create', f"Added new client: {client.name}", client=client)
            messages.success(request, f"Client '{client.name}' has been added successfully.")
            
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({
                    'success': True,
                    'message': f"Client '{client.name}' has been added successfully.",
                    'redirect_url': reverse('seo_manager:client_detail', args=[client.id])
                })
            
            return redirect('seo_manager:client_detail', client_id=client.id)
        else:
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({
                    'success': False,
                    'errors': form.errors
                })
    else:
        form = ClientForm()
    
    return render(request, 'seo_manager/add_client.html', {'form': form})

@login_required
def client_detail(request, client_id):
    logger.debug(f"Accessing client_detail view for client_id: {client_id}")

    # Prefetch all related data in a single query
    client = get_object_or_404(
        Client.objects.prefetch_related(
            'targeted_keywords',
            'targeted_keywords__ranking_history',
            'seo_projects',
            'seo_projects__targeted_keywords',
            'seo_projects__targeted_keywords__ranking_history'
        ), 
        id=client_id
    )
    
    # Get keyword history in a single query
    keyword_history = KeywordRankingHistory.objects.filter(
        client_id=client_id
    ).select_related('keyword').order_by('-date')
    
    # Create a dictionary to store history by keyword
    history_by_keyword = {}
    for history in keyword_history:
        if history.keyword_id not in history_by_keyword:
            history_by_keyword[history.keyword_id] = []
        history_by_keyword[history.keyword_id].append(history)
    
    # Attach history to keywords
    for keyword in client.targeted_keywords.all():
        keyword.ranking_data = history_by_keyword.get(keyword.id, [])
    
    # Get client activities
    important_categories = ['create', 'update', 'delete', 'export', 'import', 'other']
    client_activities = UserActivity.objects.filter(
        client=client,
        category__in=important_categories
    ).select_related('user').order_by('-timestamp')[:10]

    # Initialize forms
    keyword_form = TargetedKeywordForm()
    import_form = KeywordBulkUploadForm()
    project_form = SEOProjectForm(client=client)
    business_objective_form = BusinessObjectiveForm()
    
    # Get meta tags files
    meta_tags_dir = os.path.join(settings.MEDIA_ROOT, 'meta-tags', str(client.id))
    meta_tags_files = []
    if os.path.exists(meta_tags_dir):
        meta_tags_files = sorted(
            [f for f in os.listdir(meta_tags_dir) if f.endswith('.json')],
            key=lambda x: os.path.getmtime(os.path.join(meta_tags_dir, x)),
            reverse=True
        )

    # Get ranking stats in a single query
    ranking_stats = keyword_history.aggregate(
        earliest_date=Min('date'),
        latest_date=Max('date')
    )
    
    latest_collection_date = ranking_stats['latest_date']
    logger.debug(f"Latest collection date: {latest_collection_date}")
    
    data_coverage_months = 0
    if ranking_stats['earliest_date'] and ranking_stats['latest_date']:
        date_diff = ranking_stats['latest_date'] - ranking_stats['earliest_date']
        data_coverage_months = round(date_diff.days / 30)
    
    tracked_keywords_count = keyword_history.values('keyword_text').distinct().count()

    # Get Search Console data
    search_console_data = []
    try:
        sc_credentials = getattr(client, 'sc_credentials', None)
        if sc_credentials:
            service = sc_credentials.get_service()
            if service:
                property_url = sc_credentials.get_property_url()
                if property_url:
                    end_date = datetime.now().strftime('%Y-%m-%d')
                    start_date = (datetime.now() - timedelta(days=90)).strftime('%Y-%m-%d')
                    search_console_data = get_search_console_data(
                        service, 
                        property_url,
                        start_date,
                        end_date
                    )
    except Exception as e:
        logger.error(f"Error fetching search console data: {str(e)}")

    context = {
        'page_title': 'Client Detail',
        'client': client,
        'client_activities': client_activities,
        'business_objectives': client.business_objectives,
        'business_objective_form': business_objective_form,
        'keyword_form': keyword_form,
        'import_form': import_form,
        'project_form': project_form,
        'meta_tags_files': meta_tags_files,
        'client_profile_html': client.client_profile,
        'profile_form': ClientProfileForm(initial={'client_profile': client.client_profile}),
        'latest_collection_date': latest_collection_date,
        'data_coverage_months': data_coverage_months,
        'tracked_keywords_count': tracked_keywords_count,
        'search_console_data': search_console_data,
    }
    
    return render(request, 'seo_manager/client_detail.html', context)

@login_required
def edit_client(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    if request.method == 'POST':
        form = ClientForm(request.POST, instance=client)
        if form.is_valid():
            form.save()
            user_activity_tool.run(request.user, 'update', f"Updated client details: {client.name}", client=client)
            
            # Check if request is AJAX
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({
                    'success': True,
                    'message': f"Client '{client.name}' has been updated successfully.",
                })
            
            messages.success(request, f"Client '{client.name}' has been updated successfully.")
            return redirect('seo_manager:client_detail', client_id=client.id)
        else:
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({
                    'success': False,
                    'errors': {field: [str(error) for error in errors] 
                              for field, errors in form.errors.items()}
                })
            
    else:
        form = ClientForm(instance=client)
    
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return JsonResponse({
            'success': False,
            'errors': {'form': ['Invalid form submission']}
        })
        
    return render(request, 'seo_manager/edit_client.html', {'form': form, 'client': client})

@login_required
def delete_client(request, client_id):
    if request.method == 'POST':
        client = get_object_or_404(Client, id=client_id)
        user_activity_tool.run(request.user, 'delete', f"Deleted client: {client.name}", client=client)
        client.delete()
        return JsonResponse({'success': True})
    return JsonResponse({'success': False}, status=400)

@login_required
def update_client_profile(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'POST':
        try:
            client_profile = request.POST.get('client_profile', '')
            if not client_profile:
                raise ValueError("Profile content cannot be empty")
                
            client.client_profile = client_profile
            client.save()
            
            user_activity_tool.run(
                request.user,
                'update',
                f"Updated client profile for: {client.name}",
                client=client
            )
            
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({
                    'success': True,
                    'message': "Client profile updated successfully."
                })
            
            messages.success(request, "Client profile updated successfully.")
            return redirect('seo_manager:client_detail', client_id=client.id)
            
        except Exception as e:
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({
                    'success': False,
                    'error': str(e)
                })
            
            messages.error(request, f"Error updating profile: {str(e)}")
            return redirect('seo_manager:client_detail', client_id=client.id)
    
    messages.error(request, "Invalid form submission.")
    return redirect('seo_manager:client_detail', client_id=client.id)

@login_required
def generate_magic_profile(request, client_id):
    if request.method == 'POST':
        try:
            # Get the tool ID
            tool = get_object_or_404(Tool, tool_subclass='ClientProfileTool')
            
            # Start Celery task
            from apps.agents.tasks import run_tool
            task = run_tool.delay(tool.id, {'client_id': str(client_id)})
            
            return JsonResponse({
                'success': True,
                'task_id': task.id,
                'message': 'Profile generation started'
            })
                
        except Exception as e:
            logger.error(f"Error generating magic profile: {str(e)}")
            return JsonResponse({
                'success': False,
                'error': str(e)
            })
            
    return JsonResponse({'success': False, 'error': 'Invalid request method'})

@login_required
def load_more_activities(request, client_id):
    page = int(request.GET.get('page', 1))
    per_page = 10
    start = (page - 1) * per_page
    end = start + per_page

    client = get_object_or_404(Client, id=client_id)
    important_categories = ['create', 'update', 'delete', 'export', 'import', 'other']
    
    activities = UserActivity.objects.filter(
        client=client,
        category__in=important_categories
    ).order_by('-timestamp')[start:end + 1]  # Get one extra to check if there are more

    has_more = len(activities) > per_page
    activities = activities[:per_page]  # Remove the extra item if it exists

    # Render activities to HTML
    html = render(request, 'seo_manager/includes/activity_items.html', {
        'client_activities': activities
    }).content.decode('utf-8')

    return JsonResponse({
        'success': True,
        'activities': html,
        'has_more': has_more
    })

@login_required
def export_activities(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    filter_type = request.GET.get('filter', 'all')
    
    # Get activities based on filter
    activities = UserActivity.objects.filter(client=client).order_by('-timestamp')
    if filter_type != 'all':
        activities = activities.filter(category=filter_type)
    
    # Create the HttpResponse object with CSV header
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = f'attachment; filename="{client.name}_activities_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv"'
    
    # Create CSV writer
    writer = csv.writer(response)
    writer.writerow(['Timestamp', 'User', 'Category', 'Action', 'Details'])
    
    # Write data
    for activity in activities:
        writer.writerow([
            activity.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
            activity.user.username if activity.user else 'System',
            activity.get_category_display(),
            activity.action,
            activity.details if activity.details else ''
        ])
    
    # Log the export activity
    user_activity_tool.run(
        request.user,
        'export',
        f"Exported {filter_type} activities",
        client=client
    )
    
    return response

@login_required
def client_integrations(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    context = {
        'page_title': 'Client Integrations',
        'client': client,
        'segment': 'clients',
        'subsegment': 'integrations'
    }
    return render(request, 'seo_manager/client_integrations.html', context)

================
File: seo_manager/views/keyword_views.py
================
import csv
import io
import logging
from django.shortcuts import get_object_or_404, redirect, render
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib import messages
from django.views.generic import ListView, CreateView, UpdateView
from django.urls import reverse_lazy
from django.http import JsonResponse
from ..models import Client, TargetedKeyword, KeywordRankingHistory, SearchConsoleCredentials
from ..forms import TargetedKeywordForm, KeywordBulkUploadForm
from apps.common.tools.user_activity_tool import user_activity_tool
import json
from datetime import datetime, timedelta
from .search_console_views import get_search_console_data

logger = logging.getLogger(__name__)

class KeywordListView(LoginRequiredMixin, ListView):
    template_name = 'seo_manager/keywords/keyword_list.html'
    context_object_name = 'keywords'

    def get_queryset(self):
        return TargetedKeyword.objects.filter(client_id=self.kwargs['client_id'])

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['client'] = get_object_or_404(Client, id=self.kwargs['client_id'])
        context['import_form'] = KeywordBulkUploadForm()
        return context

class KeywordCreateView(LoginRequiredMixin, CreateView):
    model = TargetedKeyword
    form_class = TargetedKeywordForm
    template_name = 'seo_manager/keywords/keyword_form.html'

    def form_valid(self, form):
        form.instance.client_id = self.kwargs['client_id']
        response = super().form_valid(form)
        user_activity_tool.run(self.request.user, 'create', f"Added keyword: {form.instance.keyword}", client=form.instance.client)
        return response

    def get_success_url(self):
        return reverse_lazy('seo_manager:client_detail', kwargs={'client_id': self.kwargs['client_id']})

class KeywordUpdateView(LoginRequiredMixin, UpdateView):
    model = TargetedKeyword
    form_class = TargetedKeywordForm
    template_name = 'seo_manager/keywords/keyword_form.html'

    def get_queryset(self):
        # Ensure the keyword belongs to the correct client
        return TargetedKeyword.objects.filter(
            client_id=self.kwargs['client_id']
        )

    def form_valid(self, form):
        response = super().form_valid(form)
        user_activity_tool.run(
            self.request.user, 
            'update', 
            f"Updated keyword: {form.instance.keyword}", 
            client=form.instance.client
        )
        messages.success(self.request, "Keyword updated successfully.")
        return response

    def get_success_url(self):
        return reverse_lazy('seo_manager:client_detail', 
                          kwargs={'client_id': self.kwargs['client_id']})

@login_required
def keyword_import(request, client_id):
    if request.method == 'POST':
        form = KeywordBulkUploadForm(request.POST, request.FILES)
        if form.is_valid():
            client = get_object_or_404(Client, id=client_id)
            csv_file = request.FILES['csv_file']
            decoded_file = csv_file.read().decode('utf-8')
            csv_data = csv.DictReader(io.StringIO(decoded_file))
            
            for row in csv_data:
                TargetedKeyword.objects.create(
                    client=client,
                    keyword=row['keyword'],
                    priority=int(row['priority']),
                    notes=row.get('notes', '')
                )
            
            user_activity_tool.run(request.user, 'import', f"Imported keywords from CSV", client=client)
            messages.success(request, "Keywords imported successfully.")
            return redirect('seo_manager:client_detail', client_id=client_id)
    
    messages.error(request, "Invalid form submission.")
    return redirect('seo_manager:client_detail', client_id=client_id)

@login_required
def debug_keyword_data(request, client_id, keyword_id):
    """Debug view to check keyword data"""
    keyword = get_object_or_404(TargetedKeyword, id=keyword_id, client_id=client_id)
    
    rankings = KeywordRankingHistory.objects.filter(
        keyword=keyword
    ).order_by('-date')
    
    data = {
        'keyword': keyword.keyword,
        'current_position': keyword.current_position,
        'position_change': keyword.get_position_change(),
        'rankings': [
            {
                'date': r.date.strftime('%Y-%m-%d'),
                'position': r.average_position,
                'impressions': r.impressions,
                'clicks': r.clicks,
                'ctr': r.ctr
            }
            for r in rankings
        ]
    }
    
    return JsonResponse(data)

@login_required
def import_from_search_console(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    if request.method == 'POST':
        try:
            keywords_data = json.loads(request.body)
            imported_count = 0
            
            for keyword_data in keywords_data:
                keyword = keyword_data.get('keyword')
                if keyword:
                    # Check if keyword already exists
                    if not TargetedKeyword.objects.filter(client=client, keyword=keyword).exists():
                        # Create the keyword
                        keyword_obj = TargetedKeyword.objects.create(
                            client=client,
                            keyword=keyword,
                            notes=f"""Imported from Search Console
Initial Position: {keyword_data.get('position', 'N/A')}
Clicks: {keyword_data.get('clicks', 0)}
Impressions: {keyword_data.get('impressions', 0)}
CTR: {keyword_data.get('ctr', 0)}%"""
                        )

                        # Create initial ranking history entry
                        KeywordRankingHistory.objects.create(
                            keyword=keyword_obj,
                            client=client,
                            keyword_text=keyword,
                            date=datetime.now().date(),
                            average_position=keyword_data.get('position', 0),
                            clicks=keyword_data.get('clicks', 0),
                            impressions=keyword_data.get('impressions', 0),
                            ctr=keyword_data.get('ctr', 0)
                        )
                        
                        imported_count += 1
            
            user_activity_tool.run(
                request.user, 
                'import', 
                f"Imported {imported_count} keywords from Search Console", 
                client=client
            )
            
            return JsonResponse({
                'success': True,
                'message': f'Successfully imported {imported_count} keywords'
            })
            
        except json.JSONDecodeError:
            return JsonResponse({
                'success': False,
                'error': 'Invalid data format'
            }, status=400)
        except Exception as e:
            logger.error(f"Error importing keywords: {str(e)}")
            return JsonResponse({
                'success': False,
                'error': str(e)
            }, status=500)
            
    return JsonResponse({
        'success': False,
        'error': 'Invalid request method'
    }, status=405)

@login_required
def search_console_keywords(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    search_console_data = []
    
    try:
        sc_credentials = SearchConsoleCredentials.objects.get(client=client)
        if sc_credentials:
            service = sc_credentials.get_service()
            if service:
                property_url = sc_credentials.get_property_url()
                if property_url:
                    # Get last 90 days of data
                    end_date = datetime.now().strftime('%Y-%m-%d')
                    start_date = (datetime.now() - timedelta(days=90)).strftime('%Y-%m-%d')
                    search_console_data = get_search_console_data(
                        service, 
                        property_url,
                        start_date,
                        end_date
                    )
    except SearchConsoleCredentials.DoesNotExist:
        pass
    except Exception as e:
        logger.error(f"Error fetching search console data: {str(e)}")
    
    context = {
        'page_title': 'Search Console Keywords',
        'client': client,
        'search_console_data': search_console_data,
    }
    return render(request, 'seo_manager/keywords/search_console_keywords.html', context)

================
File: seo_manager/views/meta_tags_views.py
================
import json
import os
from django.shortcuts import get_object_or_404, render
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.conf import settings
from ..models import Client
from ..sitemap_extractor import extract_sitemap_and_meta_tags, extract_sitemap_and_meta_tags_from_url

def get_snapshot_stats(file_path):
    """Get statistics from a meta tags snapshot file"""
    try:
        if not os.path.exists(file_path):
            return {
                'total_pages': 0,
                'total_tags': 0,
                'issues': 0
            }

        # Check file extension
        if file_path.endswith('.csv'):
            import csv
            total_pages = 0
            total_tags = 0
            issues = 0
            
            with open(file_path, 'r') as f:
                csv_reader = csv.DictReader(f)
                for row in csv_reader:
                    total_pages += 1
                    # Assuming meta tags are comma-separated in a column
                    if 'meta_tags' in row:
                        tags = row['meta_tags'].split(',')
                        total_tags += len(tags)
                    # Count issues if there's an issues column
                    if 'issues' in row and row['issues']:
                        issues += 1
                        
            return {
                'total_pages': total_pages,
                'total_tags': total_tags,
                'issues': issues
            }
        else:
            # Handle JSON files as before
            with open(file_path, 'r') as f:
                data = json.load(f)
                total_pages = len(data.get('pages', []))
                total_tags = sum(len(page.get('meta_tags', [])) for page in data.get('pages', []))
                issues = sum(1 for page in data.get('pages', []) 
                            for tag in page.get('meta_tags', []) 
                            if tag.get('issues'))
                return {
                    'total_pages': total_pages,
                    'total_tags': total_tags,
                    'issues': issues
                }
    except Exception as e:
        print(f"Error reading meta tags file: {file_path}")
        print(f"Error details: {str(e)}")
        return {
            'total_pages': 0,
            'total_tags': 0,
            'issues': 0
        }

@login_required
def meta_tags_dashboard(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    # Get list of meta tags files for this client
    meta_tags_dir = os.path.join(settings.MEDIA_ROOT, str(request.user.id), 'meta-tags')
    meta_tags_files = []
    latest_stats = None
    
    if os.path.exists(meta_tags_dir):
        meta_tags_files = sorted(
            [os.path.join(str(request.user.id), 'meta-tags', f) 
             for f in os.listdir(meta_tags_dir) if f.endswith('.csv')],
            reverse=True
        )
        
        # Get stats for the latest snapshot
        if meta_tags_files:
            latest_file = os.path.join(settings.MEDIA_ROOT, meta_tags_files[0])
            latest_stats = get_snapshot_stats(latest_file)

    context = {
        'page_title': 'Meta Tags Dashboard',
        'client': client,
        'meta_tags_files': meta_tags_files,
        'latest_stats': latest_stats
    }
    
    return render(request, 'seo_manager/meta_tags/meta_tags_dashboard.html', context)

@login_required
def create_meta_tags_snapshot(request, client_id):
    if request.method == 'POST':
        client = get_object_or_404(Client, id=client_id)
        try:
            file_path = extract_sitemap_and_meta_tags(client, request.user)
            print(f"File being saved at: {file_path}")
            
            # Ensure the directory exists
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            
            return JsonResponse({
                'success': True,
                'message': f"Meta tags snapshot created successfully. File saved as {os.path.basename(file_path)}"
            })
        except Exception as e:
            import traceback
            print(traceback.format_exc())  # This will help debug any errors
            return JsonResponse({
                'success': False,
                'message': f"An error occurred while creating the snapshot: {str(e)}"
            })
    else:
        return JsonResponse({
            'success': False,
            'message': "Invalid request method."
        })

@login_required
@require_http_methods(["POST"])
def create_meta_tags_snapshot_url(request):
    data = json.loads(request.body)
    url = data.get('url')
    if not url:
        return JsonResponse({
            'success': False,
            'message': "URL is required."
        })
    
    try:
        file_path = extract_sitemap_and_meta_tags_from_url(url, request.user)
        return JsonResponse({
            'success': True,
            'message': f"Meta tags snapshot created successfully. File saved as {os.path.basename(file_path)}"
        })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': f"An error occurred while creating the snapshot: {str(e)}"
        })

================
File: seo_manager/views/project_views.py
================
from datetime import timedelta
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib import messages
from django.views.generic import ListView, CreateView, DetailView
from django.urls import reverse_lazy
from django.db.models import Avg
import json
from ..models import Client, SEOProject
from ..forms import SEOProjectForm
from apps.common.tools.user_activity_tool import user_activity_tool

class ProjectListView(LoginRequiredMixin, ListView):
    template_name = 'seo_manager/projects/project_list.html'
    context_object_name = 'projects'

    def get_queryset(self):
        return SEOProject.objects.filter(client_id=self.kwargs['client_id'])

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['client'] = get_object_or_404(Client, id=self.kwargs['client_id'])
        return context

class ProjectCreateView(LoginRequiredMixin, CreateView):
    model = SEOProject
    form_class = SEOProjectForm
    template_name = 'seo_manager/projects/project_form.html'

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['client'] = get_object_or_404(Client, id=self.kwargs['client_id'])
        return kwargs

    def form_valid(self, form):
        form.instance.client_id = self.kwargs['client_id']
        # Capture initial rankings for targeted keywords
        initial_rankings = {}
        for keyword in form.cleaned_data['targeted_keywords']:
            latest_ranking = keyword.ranking_history.first()
            if latest_ranking:
                initial_rankings[keyword.keyword] = latest_ranking.average_position
        form.instance.initial_rankings = initial_rankings
        
        response = super().form_valid(form)
        user_activity_tool.run(self.request.user, 'create', f"Created SEO project: {form.instance.title}", client=form.instance.client)
        return response

    def get_success_url(self):
        return reverse_lazy('seo_manager:client_detail', kwargs={'client_id': self.kwargs['client_id']})

class ProjectDetailView(LoginRequiredMixin, DetailView):
    model = SEOProject
    template_name = 'seo_manager/projects/project_detail.html'
    context_object_name = 'project'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # Get the implementation date
        implementation_date = self.object.implementation_date
        
        # Calculate periods for comparison
        pre_period_start = implementation_date - timedelta(days=30)
        post_period_end = implementation_date + timedelta(days=30)
        
        # Prepare data for the ranking history chart and performance metrics
        ranking_data = {
            'labels': [],
            'datasets': []
        }
        
        performance_metrics = []
        
        for keyword in self.object.targeted_keywords.all():
            # Get rankings for before and after implementation
            rankings = keyword.ranking_history.filter(
                date__range=(pre_period_start, post_period_end)
            ).order_by('date')
            
            # Calculate average positions for before and after
            pre_avg = rankings.filter(
                date__lt=implementation_date
            ).aggregate(Avg('average_position'))['average_position__avg']
            
            post_avg = rankings.filter(
                date__gte=implementation_date
            ).aggregate(Avg('average_position'))['average_position__avg']
            
            # Calculate improvement
            improvement = pre_avg - post_avg if pre_avg and post_avg else None
            
            # Add to performance metrics
            performance_metrics.append({
                'keyword': keyword.keyword,
                'initial_position': self.object.initial_rankings.get(keyword.keyword),
                'current_position': keyword.ranking_history.first().average_position if keyword.ranking_history.exists() else None,
                'pre_avg': round(pre_avg, 1) if pre_avg else None,
                'post_avg': round(post_avg, 1) if post_avg else None,
                'improvement': round(improvement, 1) if improvement else None
            })
            
            # Prepare chart dataset
            dataset = {
                'label': keyword.keyword,
                'data': [],
                'borderColor': f'#{hash(keyword.keyword) % 0xFFFFFF:06x}',
                'tension': 0.4,
                'fill': False
            }
            
            for ranking in rankings:
                if ranking.date.isoformat() not in ranking_data['labels']:
                    ranking_data['labels'].append(ranking.date.isoformat())
                dataset['data'].append(ranking.average_position)
            
            ranking_data['datasets'].append(dataset)
        
        # Add implementation date marker to chart
        ranking_data['implementation_date'] = implementation_date.isoformat()
        
        context.update({
            'ranking_history_data': json.dumps(ranking_data),
            'performance_metrics': performance_metrics,
            'implementation_date': implementation_date,
            'pre_period_start': pre_period_start,
            'post_period_end': post_period_end
        })
        
        return context

@login_required
def edit_project(request, client_id, project_id):
    """View for editing an existing SEO project."""
    project = get_object_or_404(SEOProject, id=project_id, client_id=client_id)
    
    if request.method == 'POST':
        form = SEOProjectForm(request.POST, instance=project, client=project.client)
        if form.is_valid():
            form.save()
            messages.success(request, 'Project updated successfully.')
            return redirect('seo_manager:client_detail', client_id=client_id)
    else:
        form = SEOProjectForm(instance=project, client=project.client)
    
    context = {
        'page_title': 'Edit Project',
        'form': form,
        'project': project,
        'client_id': client_id,
    }
    
    return render(request, 'seo_manager/projects/edit_project.html', context)

@login_required
def delete_project(request, client_id, project_id):
    """View for deleting an SEO project."""
    project = get_object_or_404(SEOProject, id=project_id, client_id=client_id)
    
    if request.method == 'POST':
        project.delete()
        messages.success(request, 'Project deleted successfully.')
        return redirect('seo_manager:client_detail', client_id=client_id)
    
    return redirect('seo_manager:client_detail', client_id=client_id)

================
File: seo_manager/views/ranking_views.py
================
import csv
from django.shortcuts import get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse, HttpResponse
from django.views.decorators.http import require_http_methods
from django.utils import timezone
from datetime import timedelta
from django.core.paginator import Paginator
from django.shortcuts import render
from django.db.models import Min, Max
from ..models import Client, KeywordRankingHistory
from ..forms import RankingImportForm
from apps.agents.tools.google_report_tool.google_rankings_tool import GoogleRankingsTool
import logging

logger = logging.getLogger(__name__)

@login_required
def ranking_import(request, client_id):
    if request.method == 'POST':
        form = RankingImportForm(request.POST, request.FILES)
        if form.is_valid():
            form.process_import(request.user)
            messages.success(request, "Rankings imported successfully.")
            return redirect('seo_manager:client_detail', client_id=client_id)
    else:
        form = RankingImportForm()
    
    return render(request, 'seo_manager/keywords/ranking_import.html', {
        'form': form,
        'client': get_object_or_404(Client, id=client_id)
    })

@login_required
@require_http_methods(["POST"])
def collect_rankings(request, client_id):
    try:
        tool = GoogleRankingsTool()
        # Get just the last 30 days of data
        end_date = timezone.now().date()
        start_date = end_date - timedelta(days=7)
        
        result = tool._run(
            start_date=start_date.strftime('%Y-%m-%d'),
            end_date=end_date.strftime('%Y-%m-%d'),
            client_id=client_id
        )
        
        if result.get('success'):
            # Only show success if we actually stored some data
            if result.get('stored_rankings_count', 0) > 0:
                messages.success(request, "Latest rankings collected successfully")
                return JsonResponse({
                    'success': True,
                    'message': "Latest rankings data has been collected and stored"
                })
            else:
                return JsonResponse({
                    'success': False,
                    'error': "No ranking data was collected. Please check your Search Console credentials."
                })
        else:
            error_msg = result.get('error', 'Failed to collect rankings')
            if 'invalid_grant' in error_msg or 'expired' in error_msg:
                error_msg = "Your Search Console access has expired. Please reconnect your Search Console account."
            
            return JsonResponse({
                'success': False,
                'error': error_msg
            })
    except Exception as e:
        logger.error(f"Error in collect_rankings view: {str(e)}")
        return JsonResponse({
            'success': False,
            'error': str(e)
        })

@login_required
@require_http_methods(["POST"])
def backfill_rankings(request, client_id):
    try:
        tool = GoogleRankingsTool()
        # Pass None for start_date and end_date to trigger 12-month backfill
        result = tool._run(
            start_date=None,
            end_date=None,
            client_id=client_id
        )
        
        if result['success']:
            messages.success(request, "Historical rankings collected successfully")
            return JsonResponse({
                'success': True,
                'message': "12 months of historical ranking data has been collected and stored"
            })
        else:
            return JsonResponse({
                'success': False,
                'error': result.get('error', 'Unknown error occurred')
            })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        })

@login_required
def ranking_data_management(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    # Get ranking data statistics
    ranking_stats = KeywordRankingHistory.objects.filter(
        client_id=client_id
    ).aggregate(
        earliest_date=Min('date'),
        latest_date=Max('date')
    )
    
    latest_collection_date = ranking_stats['latest_date']

    # Calculate data coverage in months
    data_coverage_months = 0
    if ranking_stats['earliest_date'] and ranking_stats['latest_date']:
        date_diff = ranking_stats['latest_date'] - ranking_stats['earliest_date']
        data_coverage_months = round(date_diff.days / 30)
    
    # Get search query
    search_query = request.GET.get('search', '')
    
    # Get sort parameters
    sort_by = request.GET.get('sort', '-date')  # Default sort by date descending
    if sort_by.startswith('-'):
        order_by = sort_by
        sort_dir = 'desc'
    else:
        order_by = sort_by
        sort_dir = 'asc'
    
    # Get items per page
    items_per_page = int(request.GET.get('items', 25))
    
    # Get rankings with filtering, sorting and pagination
    rankings_list = KeywordRankingHistory.objects.filter(client_id=client_id)
    
    # Apply search filter if provided
    if search_query:
        rankings_list = rankings_list.filter(keyword_text__icontains=search_query)
    
    # Apply sorting
    rankings_list = rankings_list.order_by(order_by)
    
    paginator = Paginator(rankings_list, items_per_page)
    page = request.GET.get('page')
    rankings = paginator.get_page(page)
    
    # Count unique keywords
    tracked_keywords_count = KeywordRankingHistory.objects.filter(
        client_id=client_id
    ).values('keyword_text').distinct().count()
    
    context = {
        'page_title': 'Rankings',
        'client': client,
        'latest_collection_date': latest_collection_date,
        'data_coverage_months': data_coverage_months,
        'tracked_keywords_count': tracked_keywords_count,
        'rankings': rankings,
        'sort_by': sort_by,
        'sort_dir': sort_dir,
        'search_query': search_query,
        'items': items_per_page,
    }
    
    return render(request, 'seo_manager/ranking_data_management.html', context)

@login_required
def export_rankings_csv(request, client_id):
    # Get search query
    search_query = request.GET.get('search', '')
    
    # Get rankings
    rankings = KeywordRankingHistory.objects.filter(client_id=client_id)
    if search_query:
        rankings = rankings.filter(keyword_text__icontains=search_query)
    
    # Create CSV response
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = f'attachment; filename="rankings_{client_id}.csv"'
    
    writer = csv.writer(response)
    writer.writerow(['Keyword', 'Position', 'Change', 'Impressions', 'Clicks', 'CTR', 'Date'])
    
    for ranking in rankings:
        writer.writerow([
            ranking.keyword_text,
            ranking.average_position,
            ranking.position_change,
            ranking.impressions,
            ranking.clicks,
            f"{ranking.ctr:.2f}%",
            ranking.date.strftime("%Y-%m-%d")
        ])
    
    return response

================
File: seo_manager/views/report_views.py
================
import logging
from django.shortcuts import get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.template.loader import render_to_string
from django.utils import timezone
from dateutil.relativedelta import relativedelta
from ..models import Client

logger = logging.getLogger(__name__)

@login_required
@require_http_methods(["POST"])
def generate_report(request, client_id):
    try:
        client = get_object_or_404(Client.objects.select_related(), id=client_id)
        
        # Get the report data
        today = timezone.now().date()
        last_month = today - relativedelta(months=1)
        
        # Use select_related to optimize queries
        keywords = client.targeted_keywords.select_related().all()
        
        report = {
            'period': last_month.strftime('%B %Y'),
            'keywords': {
                'total': keywords.count(),
                'improved': 0,
                'declined': 0,
                'unchanged': 0
            },
            'top_improvements': [],
            'needs_attention': []
        }

        # Process keyword data
        for keyword in keywords:
            change = keyword.get_position_change()
            if change:
                if change > 0:
                    report['keywords']['improved'] += 1
                    if change > 5:
                        report['top_improvements'].append({
                            'keyword': keyword.keyword,
                            'improvement': change
                        })
                elif change < 0:
                    report['keywords']['declined'] += 1
                    if change < -5:
                        report['needs_attention'].append({
                            'keyword': keyword.keyword,
                            'decline': abs(change)
                        })
                else:
                    report['keywords']['unchanged'] += 1

        # Sort improvements and needs attention lists
        report['top_improvements'].sort(key=lambda x: x['improvement'], reverse=True)
        report['needs_attention'].sort(key=lambda x: x['decline'], reverse=True)

        # Limit to top 5 for each list
        report['top_improvements'] = report['top_improvements'][:5]
        report['needs_attention'] = report['needs_attention'][:5]

        # Render the report template
        report_html = render_to_string(
            'seo_manager/reports/monthly_report.html',
            {'report': report, 'client': client},
            request=request
        )

        return JsonResponse({
            'success': True,
            'report_html': report_html
        })
        
    except Exception as e:
        logger.error(f"Error generating report: {str(e)}")
        return JsonResponse({
            'success': False,
            'error': f"Error generating report: {str(e)}"
        })

================
File: seo_manager/views/search_console_views.py
================
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from ..models import Client, SearchConsoleCredentials
from ..google_auth import get_google_auth_flow, get_search_console_properties
from apps.common.tools.user_activity_tool import user_activity_tool
import json
import logging

logger = logging.getLogger(__name__)

@login_required
def client_search_console(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    return render(request, 'seo_manager/client_search_console.html', {'client': client})

@login_required
def add_sc_credentials(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    # Check if client already has credentials
    if hasattr(client, 'sc_credentials'):
        messages.warning(request, "Search Console credentials already exist for this client. Remove them first to add new ones.")
        return redirect('seo_manager:client_detail', client_id=client.id)
    
    # Handle POST request for property selection
    if request.method == 'POST':
        selected_property = request.POST.get('selected_property')
        if selected_property:
            try:
                # Extract just the URL
                try:
                    property_data = json.loads(selected_property)
                    logger.info(f"property_data: {property_data}")
                    property_url = property_data['url']
                except (json.JSONDecodeError, KeyError):
                    property_url = selected_property

                logger.info(f"""
                    Storing Search Console credentials for {client.name}:
                    property_url: {property_url}
                    access_token: {bool(request.session.get('access_token'))}
                    refresh_token: {bool(request.session.get('refresh_token'))}
                    token_uri: {bool(request.session.get('token_uri'))}
                    client_id: {bool(request.session.get('client_id'))}
                    client_secret: {bool(request.session.get('client_secret'))}
                """)

                credentials = SearchConsoleCredentials.objects.update_or_create(
                    client=client,
                    defaults={
                        'property_url': property_url,
                        'access_token': request.session.get('access_token'),
                        'refresh_token': request.session.get('refresh_token'),
                        'token_uri': request.session.get('token_uri'),
                        'sc_client_id': request.session.get('client_id'),
                        'client_secret': request.session.get('client_secret'),
                    }
                )[0]
                user_activity_tool.run(request.user, 'create', f"Added Search Console credentials for client: {client.name}", client=client)
                messages.success(request, "Search Console credentials added successfully.")
                
                # Clean up session
                for key in ['properties', 'access_token', 'refresh_token', 'token_uri', 'client_id', 'client_secret']:
                    request.session.pop(key, None)
                
                return redirect('seo_manager:client_detail', client_id=client.id)
            except Exception as e:
                messages.error(request, f"Error saving Search Console credentials: {str(e)}")
        else:
            messages.error(request, "Please select a property.")
    
    # If we have properties in session, show selection page
    if 'properties' in request.session:
        return render(request, 'seo_manager/select_search_console_property.html', {
            'client': client,
            'properties': request.session['properties'],
        })
    
    # Start OAuth flow if no properties in session
    flow = get_google_auth_flow(request)
    authorization_url, state = flow.authorization_url(
        access_type='offline',
        include_granted_scopes='true',
        state=f"{client_id}_sc",
        prompt='consent'
    )
    request.session['oauth_state'] = state
    return redirect(authorization_url)

@login_required
def remove_sc_credentials(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    try:
        if hasattr(client, 'sc_credentials'):
            client.sc_credentials.delete()
            user_activity_tool.run(request.user, 'delete', f"Removed Search Console credentials for client: {client.name}", client=client)
            messages.success(request, "Search Console credentials removed successfully.")
        else:
            messages.warning(request, "No Search Console credentials found for this client.")
    except Exception as e:
        messages.error(request, f"Error removing Search Console credentials: {str(e)}")
    
    for key in ['properties', 'access_token', 'refresh_token', 'token_uri', 'client_id', 'client_secret']:
        request.session.pop(key, None)
    
    return redirect('seo_manager:client_detail', client_id=client.id)

@login_required
def add_sc_credentials_service_account(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    # Clear any existing session data
    for key in ['properties', 'service_account_json']:
        request.session.pop(key, None)
    
    if request.method == 'POST':
        if 'selected_property' in request.POST:
            selected_property = request.POST.get('selected_property')
            if selected_property:
                properties = request.session.get('properties', [])
                property_data = next((prop for prop in properties if prop['url'] == selected_property), None)
                if property_data:
                    SearchConsoleCredentials.objects.update_or_create(
                        client=client,
                        defaults={
                            'service_account_json': request.session.get('service_account_json', ''),
                            'property_url': property_data['url'],
                        }
                    )
                    user_activity_tool.run(request.user, 'create', f"Added Search Console credentials (Service Account) for client: {client.name}", client=client)
                    messages.success(request, "Search Console credentials (Service Account) added successfully.")
                    return redirect('seo_manager:client_detail', client_id=client.id)
                else:
                    messages.error(request, "Selected property not found. Please try again.")
            else:
                messages.error(request, "Please select a property.")
        elif 'service_account_file' in request.FILES:
            service_account_file = request.FILES['service_account_file']
            try:
                service_account_info = json.load(service_account_file)
                service_account_json = json.dumps(service_account_info)
                properties = get_search_console_properties(service_account_json)
                request.session['properties'] = properties
                request.session['service_account_json'] = service_account_json
                return render(request, 'seo_manager/select_search_console_property.html', {
                    'client': client,
                    'properties': properties,
                })
            except json.JSONDecodeError:
                messages.error(request, "Invalid JSON file. Please upload a valid service account JSON file.")
        else:
            messages.error(request, "No file uploaded. Please select a service account JSON file.")
    
    # If no POST or no properties in session, show the upload form
    return render(request, 'seo_manager/add_sc_credentials_service_account.html', {'client': client})

def get_search_console_data(service, property_url, start_date, end_date):
    try:
        response = service.searchanalytics().query(
            siteUrl=property_url,
            body={
                'startDate': start_date,
                'endDate': end_date,
                'dimensions': ['query'],
                'rowLimit': 1000
            }
        ).execute()
        
        search_console_data = []
        for row in response.get('rows', []):
            search_console_data.append({
                'query': row['keys'][0],
                'clicks': row['clicks'],
                'impressions': row['impressions'],
                'ctr': row['ctr'] * 100,  # Convert to percentage
                'position': row['position']
            })
        
        search_console_data.sort(key=lambda x: x['impressions'], reverse=True)
        
        return search_console_data
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        return []

__all__ = [
    'client_search_console',
    'add_sc_credentials',
    'add_sc_credentials_service_account',
    'remove_sc_credentials'
]

================
File: seo_manager/admin.py
================
from django.contrib import admin
from .models import ClientGroup, Client, SEOData, AIProvider

@admin.register(ClientGroup)
class ClientGroupAdmin(admin.ModelAdmin):
    list_display = ('name', 'parent')
    search_fields = ('name',)

@admin.register(Client)
class ClientAdmin(admin.ModelAdmin):
    list_display = ('name', 'website_url', 'status', 'group')
    list_filter = ('status', 'group')
    search_fields = ('name', 'website_url')

@admin.register(SEOData)
class SEODataAdmin(admin.ModelAdmin):
    list_display = ('client', 'date', 'traffic', 'keywords')
    list_filter = ('client', 'date')
    date_hierarchy = 'date'

@admin.register(AIProvider)
class AIProviderAdmin(admin.ModelAdmin):
    list_display = ('name', 'model', 'is_active')
    list_filter = ('is_active',)
    search_fields = ('name', 'model')

================
File: seo_manager/apps.py
================
from django.apps import AppConfig

class SeoManagerConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.seo_manager'

================
File: seo_manager/exceptions.py
================
class AuthError(Exception):
    """Custom exception for authentication errors"""
    pass

================
File: seo_manager/forms.py
================
from django import forms
from django.core.exceptions import ValidationError
from .models import Client, TargetedKeyword, KeywordRankingHistory, SEOProject
import csv
import io
from django.utils import timezone

class ClientForm(forms.ModelForm):
    class Meta:
        model = Client
        fields = ['name', 'website_url', 'status', 'group', 'target_audience']
        widgets = {
            'name': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Enter client name'
            }),
            'website_url': forms.URLInput(attrs={
                'class': 'form-control',
                'placeholder': 'https://example.com'
            }),
            'status': forms.Select(attrs={
                'class': 'form-select'
            }),
            'group': forms.Select(attrs={
                'class': 'form-select'
            }),
            'target_audience': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 3,
                'placeholder': 'Describe the target audience'
            }),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Add any additional field customization here
        for field in self.fields.values():
            if not isinstance(field.widget, forms.CheckboxInput):
                field.widget.attrs.update({
                    'class': field.widget.attrs.get('class', '') + ' form-control'
                })

class BusinessObjectiveForm(forms.Form):
    goal = forms.CharField(required=True)
    metric = forms.CharField(required=True)
    target_date = forms.DateField(required=True)
    status = forms.BooleanField(required=False, initial=True)

    def clean_target_date(self):
        target_date = self.cleaned_data.get('target_date')
        if target_date and target_date < timezone.now().date():
            raise ValidationError("Target date cannot be in the past")
        return target_date

class TargetedKeywordForm(forms.ModelForm):
    class Meta:
        model = TargetedKeyword
        fields = ['keyword', 'priority', 'notes']
        widgets = {
            'keyword': forms.TextInput(attrs={'class': 'form-control'}),
            'priority': forms.Select(attrs={'class': 'form-select'}),
            'notes': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
        }

class KeywordBulkUploadForm(forms.Form):
    csv_file = forms.FileField(
        label='CSV File',
        help_text='Upload a CSV file with columns: keyword, priority (1-5), notes (optional)',
        widget=forms.FileInput(attrs={'class': 'form-control'})
    )

    def clean_csv_file(self):
        csv_file = self.cleaned_data['csv_file']
        if not csv_file.name.endswith('.csv'):
            raise ValidationError('File must be a CSV')
        
        # Validate CSV structure
        try:
            decoded_file = csv_file.read().decode('utf-8')
            csv_data = csv.DictReader(io.StringIO(decoded_file))
            required_fields = ['keyword', 'priority']
            
            if not all(field in csv_data.fieldnames for field in required_fields):
                raise ValidationError('CSV must contain keyword and priority columns')
            
            # Reset file pointer
            csv_file.seek(0)
            return csv_file
        except Exception as e:
            raise ValidationError(f'Invalid CSV file: {str(e)}')

class RankingImportForm(forms.Form):
    IMPORT_SOURCE_CHOICES = [
        ('search_console', 'Google Search Console'),
        ('csv', 'CSV Upload'),
        ('manual', 'Manual Entry'),
    ]

    import_source = forms.ChoiceField(
        choices=IMPORT_SOURCE_CHOICES,
        widget=forms.RadioSelect(attrs={'class': 'form-check-input'})
    )
    
    date_from = forms.DateField(
        widget=forms.DateInput(attrs={
            'class': 'form-control flatpickr-date',
            'data-toggle': 'flatpickr'
        })
    )
    
    date_to = forms.DateField(
        widget=forms.DateInput(attrs={
            'class': 'form-control flatpickr-date',
            'data-toggle': 'flatpickr'
        })
    )
    
    csv_file = forms.FileField(
        required=False,
        widget=forms.FileInput(attrs={'class': 'form-control'})
    )

    def clean(self):
        cleaned_data = super().clean()
        import_source = cleaned_data.get('import_source')
        csv_file = cleaned_data.get('csv_file')

        if import_source == 'csv' and not csv_file:
            raise ValidationError('CSV file is required when importing from CSV')

        return cleaned_data

    def process_import(self, user):
        import_source = self.cleaned_data['import_source']
        
        if import_source == 'search_console':
            return self._process_search_console_import()
        elif import_source == 'csv':
            return self._process_csv_import()
        else:
            return self._process_manual_entry()

    def _process_search_console_import(self):
        # Implementation for Search Console import
        pass

    def _process_csv_import(self):
        # Implementation for CSV import
        pass

    def _process_manual_entry(self):
        # Implementation for manual entry
        pass

class SEOProjectForm(forms.ModelForm):
    class Meta:
        model = SEOProject
        fields = ['title', 'description', 'status', 
                 'implementation_date', 'completion_date', 
                 'targeted_keywords']
        widgets = {
            'implementation_date': forms.DateInput(attrs={
                'class': 'form-control datepicker',
                'type': 'date'
            }),
            'completion_date': forms.DateInput(attrs={
                'class': 'form-control datepicker',
                'type': 'date'
            }),
            'description': forms.Textarea(attrs={
                'rows': 3, 
                'class': 'form-control'
            }),
            'title': forms.TextInput(attrs={
                'class': 'form-control'
            }),
            'status': forms.Select(attrs={
                'class': 'form-control'
            }),
            'targeted_keywords': forms.SelectMultiple(attrs={
                'class': 'form-control'
            }),
        }

    def __init__(self, *args, **kwargs):
        client = kwargs.pop('client', None)
        super().__init__(*args, **kwargs)
        
        if client:
            self.fields['targeted_keywords'].queryset = TargetedKeyword.objects.filter(
                client=client
            ).order_by('keyword')

    def clean(self):
        cleaned_data = super().clean()
        implementation_date = cleaned_data.get('implementation_date')
        completion_date = cleaned_data.get('completion_date')

        if completion_date and implementation_date and completion_date < implementation_date:
            raise ValidationError({
                'completion_date': 'Completion date cannot be earlier than implementation date.'
            })

        return cleaned_data

class ClientProfileForm(forms.Form):
    client_profile = forms.CharField(
        widget=forms.Textarea(attrs={
            'class': 'form-control',
            'rows': 10,
            'placeholder': 'Enter a detailed 300-500 word profile of the client\'s business, goals, and SEO strategy'
        }),
        help_text="Provide a comprehensive overview of the client's business, target market, goals, and SEO strategy."
    )

================
File: seo_manager/google_auth.py
================
from google_auth_oauthlib.flow import Flow
from django.conf import settings
from django.urls import reverse
from google.oauth2.credentials import Credentials
from google.oauth2 import service_account
from googleapiclient.discovery import build
import json
import logging

logger = logging.getLogger(__name__)

def get_google_auth_flow(request):
    """
    Creates OAuth2 flow for Google Analytics and Search Console authentication.
    """
    flow = Flow.from_client_secrets_file(
        settings.GOOGLE_CLIENT_SECRETS_FILE,
        scopes=[
            'https://www.googleapis.com/auth/analytics.readonly',  # GA4 scope
            'https://www.googleapis.com/auth/webmasters.readonly',
            'openid',
            'https://www.googleapis.com/auth/userinfo.email',
            'https://www.googleapis.com/auth/userinfo.profile'
        ],
        redirect_uri=request.build_absolute_uri('/google/login/callback/')
    )
    return flow

def get_analytics_accounts_oauth(credentials):
    """Get GA4 accounts using OAuth credentials"""
    try:
        # Create the Analytics Admin API client
        analytics = build('analyticsadmin', 'v1beta', credentials=credentials)
        
        try:
            # First get accounts
            accounts_request = analytics.accounts().list().execute()
            accounts = []
            
            # For each account, get its properties
            for account in accounts_request.get('accounts', []):
                account_id = account['name']  # Format: "accounts/1234567"
                account_name = account.get('displayName', 'Unknown Account')
                #logger.info(f"Fetching properties for account: {account_name}")
                
                try:
                    # Initialize pagination variables
                    page_token = None
                    page_num = 1
                    properties_count = 0
                    
                    while True:
                        # List properties for this account with pagination
                        request_params = {
                            'filter': f'parent:{account_id}',
                            'pageSize': 200  # Maximum allowed page size
                        }
                        if page_token:
                            request_params['pageToken'] = page_token
                            
                        properties_request = analytics.properties().list(**request_params).execute()
                        
                        for property in properties_request.get('properties', []):
                            property_id = property['name']
                            property_name = property.get('displayName', 'Unknown Property')
                            
                            accounts.append({
                                'property_id': property_id,
                                'property_name': property_name,
                                'account_name': account_name
                            })
                            properties_count += 1
                        
                        # Check if there are more pages
                        page_token = properties_request.get('nextPageToken')
                        if not page_token:
                            break
                            
                        page_num += 1
                    
                    # logger.info(f"Found {properties_count} properties in account: {account_name}")
                        
                except Exception as e:
                    logger.error(f"Error listing properties for account {account_id}: {str(e)}", exc_info=True)
                    continue
            
            logger.info(f"Total GA4 properties found across all accounts: {len(accounts)}")
            return accounts
            
        except Exception as e:
            logger.error(f"Error listing GA4 accounts: {str(e)}", exc_info=True)
            return []
            
    except Exception as e:
        logger.error(f"Error building GA4 service: {str(e)}", exc_info=True)
        return []

def get_analytics_accounts_service_account(service_account_json):
    """Get GA4 properties using service account credentials"""
    try:
        credentials = service_account.Credentials.from_service_account_info(
            json.loads(service_account_json),
            scopes=['https://www.googleapis.com/auth/analytics.readonly']
        )
        analytics = build('analyticsadmin', 'v1beta', credentials=credentials)
        return fetch_analytics_accounts(analytics)
    except Exception as e:
        logger.error(f"Error building GA4 service with service account: {str(e)}")
        return []

def fetch_analytics_accounts(analytics):
    """Fetch GA4 properties using the Analytics Admin API"""
    try:
        # List all GA4 properties accessible to the user
        request = analytics.accounts().list()
        response = request.execute()
        
        accounts = []
        for account in response.get('accounts', []):
            account_id = account['name'].split('/')[-1]  # Format: "accounts/123456"
            account_name = account.get('displayName', 'Unknown Account')
            
            # Get properties for this account using the correct API call
            properties_request = analytics.properties().list(
                filter=f"parent:accounts/{account_id}"  # Changed from parent parameter to filter
            )
            properties_response = properties_request.execute()
            
            for property in properties_response.get('properties', []):
                property_id = property['name'].split('/')[-1]  # Format: "properties/123456"
                accounts.append({
                    'account_id': account_id,
                    'account_name': account_name,
                    'property_id': property_id,
                    'property_name': property.get('displayName', 'Unknown Property')
                })
        
        logger.info(f"Found {len(accounts)} GA4 properties")
        if not accounts:
            logger.warning("No GA4 properties found for this account")
            
        return accounts
        
    except Exception as e:
        logger.error(f"Error fetching GA4 properties: {str(e)}")
        return []

def get_search_console_service(credentials):
    return build('searchconsole', 'v1', credentials=credentials)

def get_search_console_properties(credentials_or_json):
    """Get list of Search Console properties"""
    try:
        if isinstance(credentials_or_json, str):
            service_account_info = json.loads(credentials_or_json)
            credentials = service_account.Credentials.from_service_account_info(
                service_account_info,
                scopes=['https://www.googleapis.com/auth/webmasters.readonly']
            )
        else:
            credentials = credentials_or_json

        service = build('searchconsole', 'v1', credentials=credentials)
        sites = service.sites().list().execute()
        
        properties = []
        if 'siteEntry' in sites:
            for site in sites['siteEntry']:
                # logger.info(f"Found Search Console site: {site}")
                properties.append({
                    'url': site['siteUrl'],
                    'permission_level': site.get('permissionLevel', '')
                })
        
        return properties

    except Exception as e:
        logger.error(f"Error getting Search Console properties: {str(e)}")
        raise

================
File: seo_manager/middleware.py
================
from .exceptions import AuthError
from django.shortcuts import redirect
from django.contrib import messages

class GoogleAuthMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        response = self.get_response(request)
        return response

    def process_exception(self, request, exception):
        if isinstance(exception, AuthError):
            messages.error(request, str(exception))
            return redirect('seo_manager:client_list')
        return None

================
File: seo_manager/models.py
================
from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
from django.db.models import Q
from django.db.models import Avg
import logging
from dateutil.relativedelta import relativedelta
import json
from datetime import datetime
from google.oauth2.credentials import Credentials
from google.oauth2 import service_account
from google.analytics.data_v1beta import BetaAnalyticsDataClient
from googleapiclient.discovery import build
import google.auth.transport.requests
from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import Flow
from django.urls import reverse
from django.conf import settings
from .exceptions import AuthError

logger = logging.getLogger(__name__)

class ClientGroup(models.Model):
    name = models.CharField(max_length=100)
    parent = models.ForeignKey('self', on_delete=models.SET_NULL, null=True, blank=True, related_name='children')

    def __str__(self):
        return self.name

class Client(models.Model):
    STATUS_CHOICES = [
        ('active', 'Active'),
        ('inactive', 'Inactive'),
        ('on_hold', 'On Hold'),
    ]

    name = models.CharField(max_length=100)
    website_url = models.URLField()
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='active')
    group = models.ForeignKey(ClientGroup, on_delete=models.SET_NULL, null=True, blank=True, related_name='clients')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    business_objectives = models.JSONField(default=list, blank=True)
    target_audience = models.TextField(blank=True, null=True)
    # New field
    client_profile = models.TextField(
        help_text="Detailed 300-500 word profile of the client's business, goals, and SEO strategy",
        blank=True
    )
    distilled_website = models.TextField(
        help_text="Distilled version of the client's website content for SEO purposes",
        blank=True
    )
    distilled_website_date = models.DateTimeField(
        null=True,
        blank=True,
        help_text="The last time the distilled website content was modified or created"
    )

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.business_objectives is None:
            self.business_objectives = []

    def __str__(self):
        return self.name
    
    def save(self, *args, **kwargs):
        if self.pk:
            old_client = Client.objects.get(pk=self.pk)
            if old_client.distilled_website != self.distilled_website:
                self.distilled_website_date = timezone.now()
        else:
            if self.distilled_website:
                self.distilled_website_date = timezone.now()
        super().save(*args, **kwargs)
        
    def get_keyword_rankings_summary(self):
        """Get summary of current keyword rankings"""
        latest_rankings = KeywordRankingHistory.objects.filter(
            client=self,
            keyword__isnull=False,  # Only targeted keywords
            date=KeywordRankingHistory.objects.filter(
                client=self,
                keyword__isnull=False
            ).values('date').order_by('-date').first()['date']
        ).select_related('keyword')

        return {
            'total_keywords': latest_rankings.count(),
            'avg_position': latest_rankings.aggregate(
                Avg('average_position')
            )['average_position__avg'],
            'rankings': latest_rankings
        }

class SEOData(models.Model):
    client = models.ForeignKey(Client, on_delete=models.CASCADE, related_name='seo_data')
    date = models.DateField()
    traffic = models.IntegerField()
    keywords = models.IntegerField()
    rankings = models.JSONField()  # Store rankings as JSON

    class Meta:
        unique_together = ['client', 'date']

class AIProvider(models.Model):
    name = models.CharField(max_length=100)
    api_key = models.CharField(max_length=255)
    model = models.CharField(max_length=100)
    parameters = models.JSONField(default=dict)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.name

class OAuthManager:
    """Manages OAuth operations for Google services"""
    
    @staticmethod
    def create_oauth_flow(request, state_key=None):
        """Create OAuth flow for Google services"""
        logger.info(f"Creating OAuth flow with state key: {state_key}")
        
        # Get the current domain and scheme
        scheme = request.scheme
        domain = request.get_host()
        
        # Use the same redirect URI that's configured in Google Console
        redirect_uri = f'{scheme}://{domain}/google/login/callback/'
        
        logger.info(f"Using redirect URI: {redirect_uri}")
        
        try:
            flow = Flow.from_client_secrets_file(
                settings.GOOGLE_CLIENT_SECRETS_FILE,
                scopes=[
                    'https://www.googleapis.com/auth/analytics.readonly',
                    'https://www.googleapis.com/auth/webmasters.readonly',
                    'openid',
                    'https://www.googleapis.com/auth/userinfo.email',
                    'https://www.googleapis.com/auth/userinfo.profile'
                ],
                state=state_key,
                redirect_uri=redirect_uri
            )
            
            # Store the redirect URI in session
            request.session['oauth_redirect_uri'] = redirect_uri
            request.session.modified = True  # Ensure session is saved
            
            logger.info(f"OAuth flow created successfully with redirect URI: {redirect_uri}")
            return flow
            
        except Exception as e:
            logger.error(f"Error creating OAuth flow: {str(e)}", exc_info=True)
            raise
    
    @staticmethod
    def handle_oauth_callback(request, code, state):
        """Handle OAuth callback and return credentials"""
        try:
            # Get the stored redirect URI from session
            redirect_uri = request.session.get('oauth_redirect_uri')
            if not redirect_uri:
                raise AuthError("Missing redirect URI in session")
            
            flow = OAuthManager.create_oauth_flow(request, state_key=state)
            
            # Ensure the redirect URI matches
            flow.redirect_uri = redirect_uri
            
            # Fetch token with explicit redirect URI
            credentials = flow.fetch_token(
                code=code,
                redirect_uri=redirect_uri
            )
            
            # Clean up session
            request.session.pop('oauth_redirect_uri', None)
            
            return credentials
            
        except Exception as e:
            logger.error(f"OAuth callback error: {str(e)}")
            raise AuthError("Failed to complete OAuth flow")
    
    @staticmethod
    def credentials_to_dict(credentials):
        """Convert OAuth credentials to dictionary for session storage"""
        if hasattr(credentials, 'token'):
            # Handle Google OAuth2Credentials
            return {
                'token': credentials.token,
                'refresh_token': credentials.refresh_token,
                'token_uri': credentials.token_uri,
                'client_id': credentials.client_id,
                'client_secret': credentials.client_secret,
                'scopes': credentials.scopes
            }
        else:
            # Handle OAuth2Token
            return {
                'token': credentials['access_token'],
                'refresh_token': credentials.get('refresh_token'),
                'token_uri': 'https://oauth2.googleapis.com/token',  # Standard Google OAuth2 token endpoint
                'client_id': credentials.get('client_id'),
                'client_secret': credentials.get('client_secret'),
                'scopes': credentials.get('scope', '').split(' ') if isinstance(credentials.get('scope'), str) else credentials.get('scope', [])
            }

class GoogleAnalyticsCredentials(models.Model):
    client = models.OneToOneField(Client, on_delete=models.CASCADE, related_name='ga_credentials')
    view_id = models.CharField(max_length=100, blank=True, null=True)
    access_token = models.TextField(blank=True, null=True)
    refresh_token = models.TextField(blank=True, null=True)
    token_uri = models.URLField(blank=True, null=True)
    ga_client_id = models.CharField(max_length=100, blank=True, null=True)
    client_secret = models.CharField(max_length=100, blank=True, null=True)
    use_service_account = models.BooleanField(default=False)
    service_account_json = models.TextField(blank=True, null=True)
    user_email = models.EmailField()
    scopes = models.JSONField(default=list)

    def __str__(self):
        return f"GA Credentials for {self.client.name}"

    @property
    def required_scopes(self):
        return ['https://www.googleapis.com/auth/analytics.readonly']

    def get_credentials(self):
        """Returns refreshed Google Analytics credentials"""
        try:
            if self.use_service_account and self.service_account_json:
                service_account_info = json.loads(self.service_account_json)
                return service_account.Credentials.from_service_account_info(
                    service_account_info,
                    scopes=['https://www.googleapis.com/auth/analytics.readonly']
                )

            # For OAuth, create credentials from stored values
            if not all([self.refresh_token, self.token_uri, self.ga_client_id, self.client_secret]):
                logger.error("Missing required OAuth fields")
                return None

            credentials = Credentials(
                token=self.access_token,
                refresh_token=self.refresh_token,
                token_uri=self.token_uri,
                client_id=self.ga_client_id,
                client_secret=self.client_secret,
                scopes=['https://www.googleapis.com/auth/analytics.readonly']
            )

            # Always try to refresh if we have a refresh token
            if credentials.refresh_token:
                request = google.auth.transport.requests.Request()
                credentials.refresh(request)
                self.access_token = credentials.token
                self.save(update_fields=['access_token'])
                logger.info(f"Refreshed access token for {self.client.name}")

            return credentials

        except Exception as e:
            logger.error(f"Error getting credentials: {str(e)}")
            if 'invalid_grant' in str(e):
                self.access_token = None
                self.refresh_token = None
                self.save(update_fields=['access_token', 'refresh_token'])
                raise AuthError("OAuth credentials expired. Please re-authenticate.")
            return None

    def get_property_id(self):
        """Get the clean property ID without 'properties/' prefix"""
        if self.view_id:
            return self.view_id.replace('properties/', '')
        return None

    def get_service(self):
        """Returns an authenticated Analytics service"""
        try:
            credentials = self.get_credentials()
            if not credentials:
                return None

            return BetaAnalyticsDataClient(credentials=credentials)

        except Exception as e:
            logger.error(f"Error creating Analytics service: {str(e)}")
            return None

    def refresh_credentials(self):
        """Handle token refresh according to OAuth 2.0 spec"""
        try:
            if not self.refresh_token:
                raise AuthError("No refresh token available. Re-authorization required.")

            credentials = Credentials(
                token=self.access_token,
                refresh_token=self.refresh_token,
                token_uri=self.token_uri,
                client_id=self.ga_client_id,
                client_secret=self.client_secret,
                scopes=self.required_scopes
            )

            request = google.auth.transport.requests.Request()
            credentials.refresh(request)
            
            # Update stored credentials
            self.access_token = credentials.token
            self.save(update_fields=['access_token'])
            
            return True
            
        except Exception as e:
            if 'invalid_grant' in str(e):
                # Clear credentials if refresh token is invalid
                self.access_token = None
                self.refresh_token = None
                self.save(update_fields=['access_token', 'refresh_token'])
                raise AuthError("Refresh token expired or revoked. Re-authorization required.")
            raise

    def save_oauth_credentials(self, credentials):
        """Save OAuth credentials from flow"""
        try:
            # Log the credentials we're trying to save
            logger.info(f"""
            Attempting to save OAuth credentials for {self.client.name}:
            Token: {'Present' if credentials.token else 'Missing'}
            Refresh Token: {'Present' if credentials.refresh_token else 'Missing'}
            Token URI: {credentials.token_uri if credentials.token_uri else 'Missing'}
            Client ID: {'Present' if credentials.client_id else 'Missing'}
            Client Secret: {'Present' if credentials.client_secret else 'Missing'}
            """)

            # Save all fields
            self.access_token = credentials.token
            self.refresh_token = credentials.refresh_token
            self.token_uri = credentials.token_uri
            self.ga_client_id = credentials.client_id
            self.client_secret = credentials.client_secret
            self.scopes = credentials.scopes
            self.use_service_account = False
            
            self.save()
            
            # Verify saved credentials
            saved_creds = self.get_credentials()
            if not saved_creds:
                raise ValueError("Failed to verify saved credentials")

            logger.info(f"Successfully saved and verified OAuth credentials for {self.client.name}")

        except Exception as e:
            logger.error(f"Error saving OAuth credentials: {str(e)}")
            raise

    def validate_credentials(self):
        """Validate stored credentials"""
        try:
            if not self.access_token and not self.refresh_token and not self.service_account_json:
                raise AuthError("No valid credentials found")
                
            credentials = self.get_credentials()
            if not credentials:
                raise AuthError("Failed to get valid credentials")
                
            return True
            
        except Exception as e:
            logger.error(f"Credential validation error: {str(e)}")
            raise AuthError(f"Credential validation failed: {str(e)}")

    def handle_oauth_response(self, credentials_dict):
        """Handle OAuth response and save credentials"""
        try:
            self.access_token = credentials_dict['token']
            self.refresh_token = credentials_dict['refresh_token']
            self.token_uri = credentials_dict['token_uri']
            self.ga_client_id = credentials_dict['client_id']
            self.client_secret = credentials_dict['client_secret']
            self.use_service_account = False
            self.scopes = credentials_dict['scopes']
            self.save()
            
            logger.info(f"Saved GA OAuth credentials for {self.client.name}")
            return True
            
        except Exception as e:
            logger.error(f"Error saving GA OAuth credentials: {str(e)}", exc_info=True)
            raise AuthError(f"Failed to save credentials: {str(e)}")

    def handle_service_account(self, service_account_json):
        """Handle service account setup"""
        try:
            self.service_account_json = service_account_json
            self.use_service_account = True
            self.access_token = None
            self.refresh_token = None
            self.save()
            
            # Validate the service account works
            credentials = self.get_credentials()
            if not credentials:
                raise AuthError("Invalid service account credentials")
                
            return True
            
        except Exception as e:
            logger.error(f"Service account setup error: {str(e)}")
            raise AuthError(f"Failed to setup service account: {str(e)}")

class SearchConsoleCredentials(models.Model):
    client = models.OneToOneField(Client, on_delete=models.CASCADE, related_name='sc_credentials')
    property_url = models.TextField()
    access_token = models.TextField(blank=True, null=True)
    refresh_token = models.TextField(blank=True, null=True)
    token_uri = models.URLField(blank=True, null=True)
    sc_client_id = models.CharField(max_length=100, blank=True, null=True)
    client_secret = models.CharField(max_length=100, blank=True, null=True)
    service_account_json = models.TextField(blank=True, null=True)
    last_validated = models.DateTimeField(auto_now=True)
    user_email = models.EmailField(blank=True, null=True)

    def __str__(self):
        return f"Search Console Credentials for {self.client.name}"

    def get_credentials(self):
        """Returns refreshed Google OAuth2 credentials"""
        try:
            # Handle service account authentication
            if self.service_account_json:
                service_account_info = json.loads(self.service_account_json)
                return service_account.Credentials.from_service_account_info(
                    service_account_info,
                    scopes=['https://www.googleapis.com/auth/webmasters.readonly']
                )

            # Handle OAuth2 authentication
            if not self.refresh_token:
                raise AuthError("No refresh token available. Reauthorization required.")

            credentials = Credentials(
                token=self.access_token,
                refresh_token=self.refresh_token,
                token_uri=self.token_uri,
                client_id=self.sc_client_id,
                client_secret=self.client_secret,
                scopes=['https://www.googleapis.com/auth/webmasters.readonly']
            )

            # Only refresh if token is expired or missing
            if not self.access_token or not credentials.valid:
                request = google.auth.transport.requests.Request()
                try:
                    credentials.refresh(request)
                    
                    # Update stored credentials
                    self.access_token = credentials.token
                    self.save(update_fields=['access_token'])
                    
                    logger.info(f"Successfully refreshed Search Console OAuth credentials for {self.client.name}")
                except Exception as e:
                    if 'invalid_grant' in str(e):
                        # Clear invalid credentials to force reauthorization
                        self.access_token = None
                        self.refresh_token = None
                        self.save(update_fields=['access_token', 'refresh_token'])
                        raise AuthError("Stored credentials are no longer valid. Please reauthorize Search Console access.")
                    raise

            return credentials

        except Exception as e:
            logger.error(f"Failed to refresh Search Console credentials for {self.client.name}: {str(e)}")
            raise AuthError(f"Failed to get valid Search Console credentials: {str(e)}")

    def get_service(self):
        """Returns an authenticated Search Console service"""
        try:
            credentials = self.get_credentials()
            if not credentials:
                logger.warning(f"No valid credentials available for {self.client.name}")
                return None
                
            return build('searchconsole', 'v1', credentials=credentials)
        except Exception as e:
            logger.error(f"Error creating Search Console service for {self.client.name}: {str(e)}")
            return None

    def get_property_url(self):
        """Parse and return the correct property URL format"""
        try:
            if isinstance(self.property_url, str):
                if '{' in self.property_url:
                    # Parse JSON-like string
                    data = json.loads(self.property_url.replace("'", '"'))
                    return data.get('url')  # Use get() to safely access 'url'
                return self.property_url
            elif isinstance(self.property_url, dict):
                return self.property_url.get('url')
            return self.property_url
        except Exception as e:
            logger.error(f"Error parsing property URL for {self.client.name}: {str(e)}")
            return None

    def save_oauth_credentials(self, credentials):
        """Save OAuth credentials from flow"""
        creds_dict = OAuthManager.credentials_to_dict(credentials)
        self.access_token = creds_dict['token']
        self.refresh_token = creds_dict['refresh_token']
        self.token_uri = creds_dict['token_uri']
        self.sc_client_id = creds_dict['client_id']
        self.client_secret = creds_dict['client_secret']
        self.save()

    def validate_credentials(self):
        """Validate stored credentials"""
        try:
            if not self.access_token and not self.refresh_token and not self.service_account_json:
                raise AuthError("No valid credentials found")
                
            credentials = self.get_credentials()
            if not credentials:
                raise AuthError("Failed to get valid credentials")
                
            return True
            
        except Exception as e:
            logger.error(f"Search Console credential validation error: {str(e)}")
            raise AuthError(f"Credential validation failed: {str(e)}")

    def handle_oauth_response(self, credentials_dict):
        """Handle OAuth response and save credentials"""
        try:
            self.access_token = credentials_dict['token']
            self.refresh_token = credentials_dict['refresh_token']
            self.token_uri = credentials_dict['token_uri']
            self.sc_client_id = credentials_dict['client_id']
            self.client_secret = credentials_dict['client_secret']
            self.save()
            
            logger.info(f"Saved SC OAuth credentials for {self.client.name}")
            return True
            
        except Exception as e:
            logger.error(f"Error saving SC OAuth credentials: {str(e)}", exc_info=True)
            raise AuthError(f"Failed to save credentials: {str(e)}")

class SummarizerUsage(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    query = models.TextField()
    compressed_content = models.TextField()
    response = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    duration = models.DurationField()
    content_token_size = models.IntegerField()
    content_character_count = models.IntegerField()
    total_input_tokens = models.IntegerField()
    total_output_tokens = models.IntegerField()
    model_used = models.CharField(max_length=100)

class UserActivity(models.Model):
    CATEGORY_CHOICES = [
        ('login', 'Login'),
        ('logout', 'Logout'),
        ('view', 'View'),
        ('create', 'Create'),
        ('update', 'Update'),
        ('delete', 'Delete'),
        ('export', 'Export'),
        ('import', 'Import'),
        ('other', 'Other'),
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE)
    client = models.ForeignKey(Client, on_delete=models.CASCADE, null=True, blank=True)
    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES)
    action = models.CharField(max_length=255)
    timestamp = models.DateTimeField(auto_now_add=True)
    details = models.JSONField(null=True, blank=True)

    def __str__(self):
        return f"{self.user.username} - {self.category} - {self.action}"

class TargetedKeyword(models.Model):
    PRIORITY_CHOICES = [
        (1, 'Highest'),
        (2, 'High'),
        (3, 'Medium'),
        (4, 'Low'),
        (5, 'Lowest'),
    ]

    client = models.ForeignKey(
        Client, 
        on_delete=models.CASCADE,
        related_name='targeted_keywords'
    )
    keyword = models.CharField(max_length=255)
    priority = models.IntegerField(
        choices=PRIORITY_CHOICES,
        default=3,
        help_text="Priority level for this keyword"
    )
    notes = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def get_monthly_rankings(self, months=12):
        """Get monthly ranking history"""
        end_date = timezone.now().date()
        start_date = end_date - relativedelta(months=months)
        
        # logger.debug(
        #     f"Fetching monthly rankings for keyword '{self.keyword}' (ID: {self.id})"
        #     f"\nDate range: {start_date} to {end_date}"
        # )
        
        rankings = self.ranking_history.filter(
            date__gte=start_date,
            date__lte=end_date
        ).order_by('date')
        
        # logger.debug(f"Found {rankings.count()} ranking records")
        
        # Group by month and get the monthly record
        monthly_data = {}
        for ranking in rankings:
            month_key = ranking.date.strftime('%Y-%m')
            if month_key not in monthly_data:
                data = {
                    'date': ranking.date,
                    'position': float(ranking.average_position),
                    'impressions': int(ranking.impressions),
                    'clicks': int(ranking.clicks),
                    'ctr': float(ranking.ctr)
                }
                monthly_data[month_key] = data
                # logger.debug(
                #     f"Added data for {month_key}:"
                #     f"\nPosition: {data['position']}"
                #     f"\nImpressions: {data['impressions']}"
                #     f"\nClicks: {data['clicks']}"
                #     f"\nCTR: {data['ctr']}"
                # )
        
        result = [monthly_data[k] for k in sorted(monthly_data.keys())]
        # logger.debug(
        #     f"Returning {len(result)} months of data for {self.keyword}"
        # )
        return result

    def get_ranking_history(self):
        """Get all ranking history entries for this keyword"""
        return KeywordRankingHistory.objects.filter(
            Q(keyword=self) | 
            Q(keyword_text=self.keyword, client=self.client)
        ).order_by('-date')

    @property
    def current_position(self):
        """Get the most recent average position"""
        latest = self.get_ranking_history().first()
        return round(latest.average_position, 1) if latest else None

    def get_position_change(self, months=1):
        """Calculate position change over specified number of months"""
        history = self.get_ranking_history()[:2]  # Get latest two entries
        if len(history) < 2:
            return None
            
        current = history[0].average_position
        previous = history[1].average_position
        
        return round(previous - current, 1)

    @property
    def position_trend(self):
        """Returns trend indicator based on 30-day change"""
        change = self.get_position_change()
        if change is None:
            return 'neutral'
        if change > 0.5:  # Improved by more than 0.5 positions
            return 'up'
        if change < -0.5:  # Declined by more than 0.5 positions
            return 'down'
        return 'neutral'

    class Meta:
        unique_together = ['client', 'keyword']
        ordering = ['priority', 'keyword']

    def __str__(self):
        return f"{self.keyword} ({self.client.name})"

class KeywordRankingHistory(models.Model):
    client = models.ForeignKey(
        Client,
        on_delete=models.CASCADE,
        related_name='keyword_rankings'
    )
    keyword = models.ForeignKey(
        TargetedKeyword,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='ranking_history'
    )
    keyword_text = models.CharField(
        max_length=255,
        help_text="Actual keyword text, useful when no TargetedKeyword reference exists"
    )
    date = models.DateField()
    impressions = models.IntegerField(default=0)
    clicks = models.IntegerField(default=0)
    ctr = models.FloatField(
        verbose_name="Click-Through Rate",
        help_text="Click-through rate as a decimal (e.g., 0.15 for 15%)"
    )
    average_position = models.FloatField()
    
    class Meta:
        unique_together = ['client', 'keyword_text', 'date']
        ordering = ['-date']
        get_latest_by = 'date'
        indexes = [
            models.Index(fields=['-date']),  # Optimize date-based queries
            models.Index(fields=['client', '-date']),  # Optimize client+date queries
        ]

    @classmethod
    def get_rankings_for_period(cls, client, start_date, end_date, keyword=None):
        """Get rankings for a specific period"""
        query = cls.objects.filter(
            client=client,
            date__range=[start_date, end_date]
        )
        
        if keyword:
            query = query.filter(
                Q(keyword=keyword) | Q(keyword_text=keyword.keyword)
            )
            
        return query.order_by('date')

    def __str__(self):
        return f"{self.keyword_text} - {self.client.name} - {self.date}"

    @property
    def position_change(self):
        """Calculate position change from previous entry"""
        previous = KeywordRankingHistory.objects.filter(
            client=self.client,
            keyword_text=self.keyword_text,
            date__lt=self.date
        ).order_by('-date').first()
        
        if previous:
            return previous.average_position - self.average_position
        return 0

class SEOProject(models.Model):
    client = models.ForeignKey(
        Client,
        on_delete=models.CASCADE,
        related_name='seo_projects'
    )
    title = models.CharField(max_length=200)
    description = models.TextField()
    implementation_date = models.DateField()
    completion_date = models.DateField(null=True, blank=True)
    targeted_keywords = models.ManyToManyField(
        TargetedKeyword,
        related_name='related_projects'
    )
    documentation_file = models.FileField(
        upload_to='seo_projects/%Y/%m/',
        null=True,
        blank=True
    )
    initial_rankings = models.JSONField(
        default=dict,
        help_text="Snapshot of keyword rankings before project implementation"
    )
    status = models.CharField(
        max_length=20,
        choices=[
            ('planned', 'Planned'),
            ('in_progress', 'In Progress'),
            ('completed', 'Completed'),
            ('on_hold', 'On Hold'),
        ],
        default='planned'
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-implementation_date']

    def __str__(self):
        return f"{self.title} - {self.client.name}"

    # Add method to analyze project impact
    def analyze_impact(self):
        implementation_date = self.implementation_date
        pre_period = implementation_date - relativedelta(months=1)
        post_period = implementation_date + relativedelta(months=1)

        results = {}
        for keyword in self.targeted_keywords.all():
            rankings = keyword.ranking_history.filter(
                date__range=[pre_period, post_period]
            ).order_by('date')

            pre_avg = rankings.filter(date__lt=implementation_date).aggregate(
                Avg('average_position'))['average_position__avg']
            post_avg = rankings.filter(date__gte=implementation_date).aggregate(
                Avg('average_position'))['average_position__avg']

            results[keyword.keyword] = {
                'pre_implementation_avg': pre_avg,
                'post_implementation_avg': post_avg,
                'improvement': pre_avg - post_avg if pre_avg and post_avg else None,
                'impressions_change': self._calculate_impressions_change(rankings),
                'clicks_change': self._calculate_clicks_change(rankings)
            }

        return results

================
File: seo_manager/services.py
================
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from google.auth.exceptions import RefreshError
from google.auth.transport.requests import Request  # Add this import
from google.analytics.data_v1beta import BetaAnalyticsDataClient
from google.analytics.data_v1beta.types import (
  DateRange,
  Dimension,
  Metric,
  RunReportRequest,
)

def get_analytics_service(ga_credentials, request):
  print("Entering get_analytics_service")
  try:
      print("GA Credentials:", ga_credentials)
      print("User Email:", ga_credentials.user_email)
      credentials = Credentials(
          token=ga_credentials.access_token,
          refresh_token=ga_credentials.refresh_token,
          token_uri=ga_credentials.token_uri,
          client_id=ga_credentials.ga_client_id,
          client_secret=ga_credentials.client_secret,
          scopes=ga_credentials.scopes
      )
      print("Credentials created, refreshing...")
      credentials.refresh(Request())
      print("Credentials refreshed successfully.")
      client = BetaAnalyticsDataClient(credentials=credentials)
      print("Analytics client created successfully, client:", client)
      return client
  except RefreshError as e:
      print(f"Error refreshing credentials: {e}")
      raise e
  finally:
      print("Exiting get_analytics_service")

def get_analytics_data(client, property_id, start_date, end_date):
  print("Entering get_analytics_data")
  print(f"Fetching analytics data for Property ID: {property_id}, Start Date: {start_date}, End Date: {end_date}")
  
  try:
      request = RunReportRequest(
          property=f"properties/{property_id}",
          dimensions=[Dimension(name="date")],
          metrics=[
              Metric(name="sessions"),
              Metric(name="screenPageViews")  # Changed from "pageviews" to "screenPageViews"
          ],
          date_ranges=[DateRange(start_date=start_date, end_date=end_date)],
      )
      response = client.run_report(request)
      print("Analytics data fetched successfully.")
      return response
  except Exception as e:
      print(f"Error fetching analytics data: {e}")
      raise e
  finally:
      print("Exiting get_analytics_data")

================
File: seo_manager/sitemap_extractor.py
================
import os
import csv
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse
from django.conf import settings
from datetime import datetime
from apps.common.tools.user_activity_tool import user_activity_tool
import logging

logger = logging.getLogger(__name__)

def extract_sitemap_and_meta_tags(client, user):
  base_url = client.website_url.rstrip('/')  # Remove trailing slash if present
  fqdn = urlparse(base_url).netloc
  date_str = datetime.now().strftime("%y-%m-%d")
  file_name = f"{fqdn}-{date_str}.csv"
  file_path = os.path.join(settings.MEDIA_ROOT, str(user.id), 'meta-tags', file_name)

  # Ensure the directory exists
  os.makedirs(os.path.dirname(file_path), exist_ok=True)

  visited_urls = set()
  urls_to_visit = set()

  def process_sitemap(sitemap_url):
      logger.debug(f"Processing sitemap: {sitemap_url}")
      try:
          response = requests.get(sitemap_url, headers={'User-Agent': 'Mozilla/5.0'})
          if response.status_code == 200:
              soup = BeautifulSoup(response.content, 'xml')
              for loc in soup.find_all('loc'):
                  url = loc.text.strip()
                  if url.endswith('.xml'):
                      process_sitemap(url)
                  else:
                      urls_to_visit.add(url)
      except requests.RequestException as e:
          logger.error(f"Error processing sitemap {sitemap_url}: {e}")

  # Step 1: Look for sitemaps
  sitemap_urls = [
      f"{base_url}/sitemap_index.xml",
      f"{base_url}/sitemap.xml",
      f"{base_url}/sitemap",
  ]

  for sitemap_url in sitemap_urls:
      process_sitemap(sitemap_url)

  # If no sitemap found, start with the base URL
  if not urls_to_visit:
      urls_to_visit.add(base_url)

  with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
      fieldnames = ['url', 'title', 'meta_description', 'meta_charset', 'viewport', 'robots', 'canonical', 'og_title', 'og_description', 'og_image', 'twitter_card', 'twitter_title', 'twitter_description', 'twitter_image', 'author', 'language']
      writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
      writer.writeheader()

      while urls_to_visit:
          url = urls_to_visit.pop()

          if url in visited_urls:
              continue

          # Step 4: Exclude URLs with specific words, anchor links, and query strings
          if any(word in url for word in ['blog', 'product-id', 'search', 'page', 'wp-content']) or '#' in url or '?' in url:
              continue

          try:
              logger.debug(f"Visiting URL: {url}")
              response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})
              logger.debug(f"Response: {response.status_code}")
              if response.status_code == 200:
                  soup = BeautifulSoup(response.content, 'html.parser')
                  # Step 3: Extract meta tags
                  meta_tags = {
                      'url': url,
                      'title': soup.title.string if soup.title else '',
                      'meta_description': soup.find('meta', attrs={'name': 'description'})['content'] if soup.find('meta', attrs={'name': 'description'}) else '',
                      'meta_charset': soup.find('meta', attrs={'charset': True})['charset'] if soup.find('meta', attrs={'charset': True}) else '',
                      'viewport': soup.find('meta', attrs={'name': 'viewport'})['content'] if soup.find('meta', attrs={'name': 'viewport'}) else '',
                      'robots': soup.find('meta', attrs={'name': 'robots'})['content'] if soup.find('meta', attrs={'name': 'robots'}) else '',
                      'canonical': soup.find('link', attrs={'rel': 'canonical'})['href'] if soup.find('link', attrs={'rel': 'canonical'}) else '',
                      'og_title': soup.find('meta', attrs={'property': 'og:title'})['content'] if soup.find('meta', attrs={'property': 'og:title'}) else '',
                      'og_description': soup.find('meta', attrs={'property': 'og:description'})['content'] if soup.find('meta', attrs={'property': 'og:description'}) else '',
                      'og_image': soup.find('meta', attrs={'property': 'og:image'})['content'] if soup.find('meta', attrs={'property': 'og:image'}) else '',
                      'twitter_card': soup.find('meta', attrs={'name': 'twitter:card'})['content'] if soup.find('meta', attrs={'name': 'twitter:card'}) else '',
                      'twitter_title': soup.find('meta', attrs={'name': 'twitter:title'})['content'] if soup.find('meta', attrs={'name': 'twitter:title'}) else '',
                      'twitter_description': soup.find('meta', attrs={'name': 'twitter:description'})['content'] if soup.find('meta', attrs={'name': 'twitter:description'}) else '',
                      'twitter_image': soup.find('meta', attrs={'name': 'twitter:image'})['content'] if soup.find('meta', attrs={'name': 'twitter:image'}) else '',
                      'author': soup.find('meta', attrs={'name': 'author'})['content'] if soup.find('meta', attrs={'name': 'author'}) else '',
                      'language': soup.find('html').get('lang', '') if soup.find('html') else '',
                  }

                  writer.writerow(meta_tags)

                  # Step 2: Extract internal links
                  for link in soup.find_all('a', href=True):
                      href = link['href']
                      # Ignore anchor links and query strings
                      if '#' in href or '?' in href:
                          continue
                      full_url = urljoin(url, href)
                      # Remove any fragments from the URL
                      full_url = full_url.split('#')[0]
                      if full_url.startswith(base_url) and full_url not in visited_urls and full_url not in urls_to_visit:
                          urls_to_visit.add(full_url)

                  visited_urls.add(url)

          except requests.RequestException as e:
              logger.error(f"Error processing URL {url}: {e}")

  # Step 7: Log the activity
  user_activity_tool.run(user, 'create', f"Created meta tags snapshot for client: {client.name}", client=client, details={'file_name': file_name})

  return file_path

def extract_sitemap_and_meta_tags_from_url(url, user):
    base_url = url.rstrip('/')  # Remove trailing slash if present
    fqdn = urlparse(base_url).netloc
    date_str = datetime.now().strftime("%y-%m-%d")
    file_name = f"{fqdn}-{date_str}.csv"
    file_path = os.path.join(settings.MEDIA_ROOT, str(user.id), 'meta-tags', file_name)

    # Ensure the directory exists
    os.makedirs(os.path.dirname(file_path), exist_ok=True)

    visited_urls = set()
    urls_to_visit = set()

    def process_sitemap(sitemap_url):
        logger.debug(f"Processing sitemap: {sitemap_url}")
        try:
            response = requests.get(sitemap_url, headers={'User-Agent': 'Mozilla/5.0'})
            if response.status_code == 200:
                soup = BeautifulSoup(response.content, 'xml')
                for loc in soup.find_all('loc'):
                    url = loc.text.strip()
                    if url.endswith('.xml'):
                        process_sitemap(url)
                    else:
                        urls_to_visit.add(url)
        except requests.RequestException as e:
            logger.error(f"Error processing sitemap {sitemap_url}: {e}")

    # Step 1: Look for sitemaps
    sitemap_urls = [
        f"{base_url}/sitemap_index.xml",
        f"{base_url}/sitemap.xml",
        f"{base_url}/sitemap",
    ]

    for sitemap_url in sitemap_urls:
        process_sitemap(sitemap_url)

    # If no sitemap found, start with the base URL
    if not urls_to_visit:
        urls_to_visit.add(base_url)

    with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['url', 'title', 'meta_description', 'meta_charset', 'viewport', 'robots', 'canonical', 'og_title', 'og_description', 'og_image', 'twitter_card', 'twitter_title', 'twitter_description', 'twitter_image', 'author', 'language']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()

        while urls_to_visit:
            url = urls_to_visit.pop()

            if url in visited_urls:
                continue

            # Step 4: Exclude URLs with specific words, anchor links, and query strings
            if any(word in url for word in ['blog', 'product-id', 'search', 'page', 'wp-content']) or '#' in url or '?' in url:
                continue

            try:
                logger.debug(f"Visiting URL: {url}")
                response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})
                logger.debug(f"Response: {response.status_code}")
                if response.status_code == 200:
                    soup = BeautifulSoup(response.content, 'html.parser')
                    # Step 3: Extract meta tags
                    meta_tags = {
                        'url': url,
                        'title': soup.title.string if soup.title else '',
                        'meta_description': soup.find('meta', attrs={'name': 'description'})['content'] if soup.find('meta', attrs={'name': 'description'}) else '',
                        'meta_charset': soup.find('meta', attrs={'charset': True})['charset'] if soup.find('meta', attrs={'charset': True}) else '',
                        'viewport': soup.find('meta', attrs={'name': 'viewport'})['content'] if soup.find('meta', attrs={'name': 'viewport'}) else '',
                        'robots': soup.find('meta', attrs={'name': 'robots'})['content'] if soup.find('meta', attrs={'name': 'robots'}) else '',
                        'canonical': soup.find('link', attrs={'rel': 'canonical'})['href'] if soup.find('link', attrs={'rel': 'canonical'}) else '',
                        'og_title': soup.find('meta', attrs={'property': 'og:title'})['content'] if soup.find('meta', attrs={'property': 'og:title'}) else '',
                        'og_description': soup.find('meta', attrs={'property': 'og:description'})['content'] if soup.find('meta', attrs={'property': 'og:description'}) else '',
                        'og_image': soup.find('meta', attrs={'property': 'og:image'})['content'] if soup.find('meta', attrs={'property': 'og:image'}) else '',
                        'twitter_card': soup.find('meta', attrs={'name': 'twitter:card'})['content'] if soup.find('meta', attrs={'name': 'twitter:card'}) else '',
                        'twitter_title': soup.find('meta', attrs={'name': 'twitter:title'})['content'] if soup.find('meta', attrs={'name': 'twitter:title'}) else '',
                        'twitter_description': soup.find('meta', attrs={'name': 'twitter:description'})['content'] if soup.find('meta', attrs={'name': 'twitter:description'}) else '',
                        'twitter_image': soup.find('meta', attrs={'name': 'twitter:image'})['content'] if soup.find('meta', attrs={'name': 'twitter:image'}) else '',
                        'author': soup.find('meta', attrs={'name': 'author'})['content'] if soup.find('meta', attrs={'name': 'author'}) else '',
                        'language': soup.find('html').get('lang', '') if soup.find('html') else '',
                    }

                    writer.writerow(meta_tags)

                    # Step 2: Extract internal links
                    for link in soup.find_all('a', href=True):
                        href = link['href']
                        # Ignore anchor links and query strings
                        if '#' in href or '?' in href:
                            continue
                        full_url = urljoin(url, href)
                        # Remove any fragments from the URL
                        full_url = full_url.split('#')[0]
                        if full_url.startswith(base_url) and full_url not in visited_urls and full_url not in urls_to_visit:
                            urls_to_visit.add(full_url)

                    visited_urls.add(url)

            except requests.RequestException as e:
                logger.error(f"Error processing URL {url}: {e}")

    # At the end, log the activity without a client
    user_activity_tool.run(user, 'create', f"Created meta tags snapshot for URL: {url}", details={'file_name': file_name})

    return file_path

================
File: seo_manager/urls.py
================
from django.urls import path, include
from . import views_summarizer, views_analytics
from .views import (
    KeywordListView, KeywordCreateView, KeywordUpdateView,
    ProjectListView, ProjectCreateView, ProjectDetailView
)
from .views import client_views, activity_views, analytics_views, business_objective_views, keyword_views, project_views, meta_tags_views, ranking_views, report_views, project_views, search_console_views

app_name = 'seo_manager'

urlpatterns = [
    # Main URLs
    path('', client_views.dashboard, name='dashboard'),
    path('summarize/', views_summarizer.summarize_view, name='summarize_view'),
    path('task_status/<str:task_id>/', views_summarizer.task_status, name='task_status'),
    
    # Client URLs
    path('clients/', include([
        path('', client_views.client_list, name='client_list'),
        path('add/', client_views.add_client, name='add_client'),
        path('<int:client_id>/', include([
            path('', client_views.client_detail, name='client_detail'),
            path('edit/', client_views.edit_client, name='edit_client'),
            path('delete/', client_views.delete_client, name='delete_client'),
            path('analytics/', views_analytics.client_analytics, name='client_analytics'),
            path('search-console/', search_console_views.client_search_console, name='client_search_console'),
            path('ads/', analytics_views.client_ads, name='client_ads'),
            path('dataforseo/', analytics_views.client_dataforseo, name='client_dataforseo'),   
            path('load-more-activities/', client_views.load_more_activities, name='load_more_activities'),
            path('export-activities/', client_views.export_activities, name='export_activities'),
            # Keyword Management URLs
            path('keywords/', include([
                path('', KeywordListView.as_view(), name='keyword_list'),
                path('add/', KeywordCreateView.as_view(), name='keyword_create'),
                path('import/', keyword_views.keyword_import, name='keyword_import'),
                path('<int:pk>/edit/', KeywordUpdateView.as_view(), name='keyword_update'),
                path('<int:pk>/rankings/', ranking_views.ranking_import, name='ranking_import'),
                path('search-console/', 
                     keyword_views.search_console_keywords, 
                     name='search_console_keywords'),
            ])),
            
            # SEO Project URLs
            path('projects/', include([
                path('', ProjectListView.as_view(), name='project_list'),
                path('add/', ProjectCreateView.as_view(), name='project_create'),
                path('<int:pk>/', ProjectDetailView.as_view(), name='project_detail'),
                path('<int:project_id>/edit/', project_views.edit_project, name='edit_project'),
                path('<int:project_id>/delete/', project_views.delete_project, name='delete_project'),
            ])),
            
            # Credentials URLs
            path('credentials/', include([
                # Google Analytics URLs
                path('ga/', include([
                    path('oauth/add/', 
                         analytics_views.add_ga_credentials_oauth, 
                         name='add_ga_credentials_oauth'),
                    path('service-account/add/', 
                         analytics_views.add_ga_credentials_service_account, 
                         name='add_ga_credentials_service_account'),
                    path('select-account/', 
                         analytics_views.select_analytics_account, 
                         name='select_analytics_account'),
                    path('remove/', 
                         analytics_views.remove_ga_credentials, 
                         name='remove_ga_credentials'),
                ])),
                
                # Search Console URLs
                path('sc/add/', 
                     search_console_views.add_sc_credentials, 
                     name='add_sc_credentials'),
                path('sc/remove/', 
                     search_console_views.remove_sc_credentials, 
                     name='remove_sc_credentials'),
            ])),
            
            # Business Objective URLs
            path('objectives/', include([
                path('add/', business_objective_views.add_business_objective, name='add_business_objective'),
                path('edit/<int:objective_index>/', business_objective_views.edit_business_objective, name='edit_business_objective'),
                path('delete/<int:objective_index>/', business_objective_views.delete_business_objective, name='delete_business_objective'),
                path('update-status/<int:objective_index>/', business_objective_views.update_objective_status, name='update_objective_status'),
            ])),
            
            # Profile URLs
            path('profile/', include([
                path('update/', client_views.update_client_profile, name='update_client_profile'),
                path('generate-magic/', client_views.generate_magic_profile, name='generate_magic_profile'),
            ])),
            
            # Meta Tags URLs
            path('meta-tags/', include([
                path('snapshot/', meta_tags_views.create_meta_tags_snapshot, name='create_meta_tags_snapshot'),
                path('', meta_tags_views.meta_tags_dashboard, name='meta_tags_dashboard'),
            ])),
            
            # Rankings URLs
            path('rankings/', include([
                path('collect/', ranking_views.collect_rankings, name='collect_rankings'),
                path('report/', report_views.generate_report, name='generate_report'),
                path('backfill/', ranking_views.backfill_rankings, name='backfill_rankings'),
                path('manage/', ranking_views.ranking_data_management, name='ranking_data_management'),
                path('export-csv/', ranking_views.export_rankings_csv, name='export_rankings_csv'),
            ])),
            
            # Search Console URLs
            path('select-property/', 
                 analytics_views.select_search_console_property, 
                 name='select_search_console_property'),
            path('add-service-account/', 
                 analytics_views.add_sc_credentials_service_account, 
                 name='add_sc_credentials_service_account'),
            path('integrations/', client_views.client_integrations, name='client_integrations'),
            path('import-from-search-console/', 
                 keyword_views.import_from_search_console, 
                 name='import_from_search_console'),
            path('meta-tags/', meta_tags_views.meta_tags_dashboard, name='meta_tags_dashboard'),
        ])),
    ])),
    
    # Other URLs
    path('activity-log/', activity_views.activity_log, name='activity_log'),
    path('create-meta-tags-snapshot-url/', meta_tags_views.create_meta_tags_snapshot_url, name='create_meta_tags_snapshot_url'),
    
    # OAuth URLs
    path('google/', include([
        path('login/callback/', 
             analytics_views.google_oauth_callback, 
             name='google_oauth_callback'),
        path('oauth/', include([
            path('init/<int:client_id>/<str:service_type>/', 
                 analytics_views.initiate_google_oauth, 
                 name='initiate_google_oauth'),
        ])),
    ])),
    path('clients/<int:client_id>/objectives/<int:objective_index>/update-status/',
         business_objective_views.update_objective_status, name='update_objective_status'),
]

================
File: seo_manager/utils.py
================
from datetime import datetime, date, timedelta
from dateutil.relativedelta import relativedelta
from typing import List, Tuple

def get_monthly_date_ranges(months_back: int = 12) -> List[Tuple[date, date]]:
    """
    Generate a list of (start_date, end_date) tuples for each month
    going back X months from today.
    """
    today = date.today()
    ranges = []
    
    for i in range(months_back):
        # Get first day of the month
        end_date = today - relativedelta(months=i)
        start_date = end_date.replace(day=1)
        
        # For current month, use today as end_date
        if i == 0:
            ranges.append((start_date, today))
        else:
            # Get last day of the month
            end_date = (start_date + relativedelta(months=1) - timedelta(days=1))
            ranges.append((start_date, end_date))
    
    return ranges

================
File: seo_manager/views_analytics.py
================
import json
import logging
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .models import Client, GoogleAnalyticsCredentials, SearchConsoleCredentials
from .google_auth import get_search_console_properties
from datetime import datetime, timedelta
from google.auth.exceptions import RefreshError
from googleapiclient.errors import HttpError
from apps.agents.tools.google_analytics_tool.google_analytics_tool import GoogleAnalyticsTool
from django.core.serializers.json import DjangoJSONEncoder
from apps.common.tools.user_activity_tool import user_activity_tool

logger = logging.getLogger(__name__)

@login_required
def client_analytics(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    
    # Get credentials without forcing 404
    try:
        ga_credentials = GoogleAnalyticsCredentials.objects.get(client=client)
    except GoogleAnalyticsCredentials.DoesNotExist:
        ga_credentials = None
        
    try:
        sc_credentials = SearchConsoleCredentials.objects.get(client=client)
    except SearchConsoleCredentials.DoesNotExist:
        sc_credentials = None

    context = {
        'page_title': 'Client Analytics',
        'client': client,
        'analytics_data': None,
        'search_console_data': None,
    }

    # Only process GA data if credentials exist
    if ga_credentials:
        ga_range = request.GET.get('ga_range', '30')
        ga_end_date = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
        
        if ga_range == 'custom':
            ga_start_date = request.GET.get('ga_start_date')
            ga_end_date = request.GET.get('ga_end_date')
            if not ga_start_date or not ga_end_date:
                messages.error(request, "Invalid GA date range provided")
                return redirect('seo_manager:client_analytics', client_id=client_id)
        else:
            try:
                days = int(ga_range)
                ga_start_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
            except ValueError:
                messages.error(request, "Invalid GA date range")
                return redirect('seo_manager:client_analytics', client_id=client_id)

        context.update({
            'ga_start_date': ga_start_date,
            'ga_end_date': ga_end_date,
            'selected_ga_range': ga_range,
        })

        try:
            logger.info("Fetching data using GoogleAnalyticsTool")
            ga_tool = GoogleAnalyticsTool()
            
            analytics_data = ga_tool._run(
                start_date=ga_start_date,
                end_date=ga_end_date,
                client_id=client_id
            )
            
            if analytics_data['success']:
                logger.info(f"Number of data points: {len(analytics_data['analytics_data'])}")
                if analytics_data['analytics_data']:
                    logger.info(f"Sample data point: {analytics_data['analytics_data'][0]}")
                
                context['analytics_data'] = json.dumps(analytics_data['analytics_data'])
                context['start_date'] = analytics_data['start_date']
                context['end_date'] = analytics_data['end_date']
            else:
                logger.warning(f"Failed to fetch GA data: {analytics_data.get('error')}")
                messages.warning(request, "Unable to fetch Google Analytics data.")
                
        except Exception as e:
            logger.error(f"Error fetching GA data: {str(e)}", exc_info=True)
            messages.warning(request, "Unable to fetch Google Analytics data.")

    # Only process SC data if credentials exist
    if sc_credentials:
        sc_range = request.GET.get('sc_range', '30')
        sc_end_date = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
        
        if sc_range == 'custom':
            sc_start_date = request.GET.get('sc_start_date')
            sc_end_date = request.GET.get('sc_end_date')
            if not sc_start_date or not sc_end_date:
                messages.error(request, "Invalid SC date range provided")
                return redirect('seo_manager:client_analytics', client_id=client_id)
        else:
            try:
                days = int(sc_range)
                sc_start_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
            except ValueError:
                messages.error(request, "Invalid SC date range")
                return redirect('seo_manager:client_analytics', client_id=client_id)

        context.update({
            'sc_start_date': sc_start_date,
            'sc_end_date': sc_end_date,
            'selected_sc_range': sc_range,
        })

        try:
            search_console_service = sc_credentials.get_service()
            if search_console_service:
                property_url = sc_credentials.get_property_url()
                if property_url:
                    search_console_data = get_search_console_data(
                        search_console_service, 
                        property_url,
                        sc_start_date,
                        sc_end_date
                    )
                    context['search_console_data'] = search_console_data
                else:
                    messages.warning(request, "Invalid Search Console property URL format.")
            else:
                messages.warning(request, "Search Console credentials are incomplete.")
        except Exception as e:
            logger.error(f"Error fetching Search Console data: {str(e)}")
            messages.warning(request, "Unable to fetch Search Console data.")

    return render(request, 'seo_manager/client_analytics.html', context)

def get_search_console_service(credentials, request):
    from googleapiclient.discovery import build
    from google.oauth2.credentials import Credentials
    
    creds = Credentials(
        token=credentials.access_token,
        refresh_token=credentials.refresh_token,
        token_uri=credentials.token_uri,
        client_id=credentials.sc_client_id,
        client_secret=credentials.client_secret
    )
    
    return build('searchconsole', 'v1', credentials=creds)

def get_search_console_data(service, property_url, start_date, end_date):
    try:
        response = service.searchanalytics().query(
            siteUrl=property_url,
            body={
                'startDate': start_date,
                'endDate': end_date,
                'dimensions': ['query'],
                'rowLimit': 1000
            }
        ).execute()
        
        search_console_data = []
        for row in response.get('rows', []):
            search_console_data.append({
                'query': row['keys'][0],
                'clicks': row['clicks'],
                'impressions': row['impressions'],
                'ctr': row['ctr'] * 100,  # Convert to percentage
                'position': row['position']
            })
        
        search_console_data.sort(key=lambda x: x['impressions'], reverse=True)
        
        return search_console_data
    except HttpError as error:
        print(f"An error occurred: {error}")
        return []

================
File: seo_manager/views_summarizer.py
================
from django.contrib.auth.models import User
from django.conf import settings

from apps.tasks.tasks import summarize_content
import mistune

from django.http import JsonResponse
from celery.result import AsyncResult
import logging
from apps.common.utils import get_models
from apps.common.tools.user_activity_tool import user_activity_tool  # Add this import

import json
from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .models import SummarizerUsage



@login_required
def summarize_view(request):
  models = get_models()
  logging.info(f'request.user.id: {request.user.id}')
  model_selected = settings.SUMMARIZER
  
  if request.method == 'POST':
    text_to_summarize = request.POST.get('query_text_value')
    model_selected = request.POST.get('model_selected_value')
    task = summarize_content.delay(text_to_summarize, request.user.id, model_selected)
    
    # Log user activity
    user_activity_tool.run(
      user=request.user,
      category='summarize',
      action=f"Used summarizer with model: {model_selected}",
      details={"text_length": len(text_to_summarize)}
    )
    
    return JsonResponse({'task_id': task.id})
  
  user = User.objects.get(id=request.user.id)
  summarizations = SummarizerUsage.objects.filter(user=user).order_by('-created_at')
  
  for summ in summarizations:
    summ.html_result = mistune.html(summ.response + '\n\n---Detail---------\n\n'+summ.compressed_content)
    
  task_result = None
  task_status = None
  model_selected =  settings.SUMMARIZER
  context = {
    'page_title': 'Summarize',
    'task_result': task_result,
    'task_status': task_status,
    'summarizations': summarizations,
    'models': models,
    'model_selected': model_selected
  }
  
  # Log user activity for viewing summarize page
  user_activity_tool.run(
    user=request.user,
    category='view',
    action="Viewed summarize page"
  )
  
  return render(request, 'pages/apps/summarize.html', context)

def task_status(request, task_id):
    current_chunk = 0
    total_chunks = 1
    task_result = AsyncResult(task_id)
    if task_result.info is not None:
      if task_result.state == 'SUCCESS':
          result = task_result.result
          html_result = mistune.html(result)
          return JsonResponse({'status': 'SUCCESS', 'result': html_result})
      elif task_result.state == 'FAILURE':
          error = str(task_result.result)
          return JsonResponse({'status': 'FAILURE', 'result': error})
      elif task_result.status == 'processing':
          progress = task_result.info
          current_chunk = progress.get('current_chunk', 0)
          total_chunks = progress.get('total_chunks', 0)
          return JsonResponse({'status': task_result.status, 'current': current_chunk, 'total': total_chunks})
      else:
          if task_result.status:
              return JsonResponse({'status': task_result.status})
          else:
              return JsonResponse({'status': 'PENDING'})
    else:
        return JsonResponse({'status': 'PENDING'})

================
File: seo_manager/views.py
================
from .views.client_views import *
from .views.keyword_views import *
from .views.project_views import *
from .views.analytics_views import *
from .views.search_console_views import *
from .views.business_objective_views import *
from .views.ranking_views import *
from .views.report_views import *
from .views.activity_views import *
from .views.meta_tags_views import *

# This file now serves as a compatibility layer, importing all views from their respective modules.
# All views are now organized in separate files in the views/ directory for better maintainability.
