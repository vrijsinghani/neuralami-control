This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-27T16:12:58.685Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
migrations/
  0001_initial.py
  0002_research_guidance.py
  0003_research_reasoning_steps_alter_research_created_at_and_more.py
  0004_alter_research_learnings_and_more.py
static/
  research/
    js/
      research-websocket-init.js
      research-websocket.js
templates/
  research/
    partials/
      _report.html
      _step.html
      progress.html
      reasoning.html
      sources.html
    create.html
    detail.html
    list.html
templatetags/
  __init__.py
  research_tags.py
websockets/
  research_consumer.py
admin.py
apps.py
forms.py
models.py
services.py
tasks.py
urls.py
views.py

================================================================
Repository Files
================================================================

================
File: migrations/0001_initial.py
================
# Generated by Django 5.1.5 on 2025-02-10 01:31

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Research',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.TextField()),
                ('breadth', models.IntegerField(default=4)),
                ('depth', models.IntegerField(default=2)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('report', models.TextField(blank=True, null=True)),
                ('error', models.TextField(blank=True, null=True)),
                ('visited_urls', models.JSONField(default=list)),
                ('learnings', models.JSONField(default=list)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Research',
                'ordering': ['-created_at'],
            },
        ),
    ]

================
File: migrations/0002_research_guidance.py
================
# Generated by Django 5.1.5 on 2025-02-14 15:19

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('research', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='research',
            name='guidance',
            field=models.TextField(blank=True, help_text='Optional guidance for content processing', null=True),
        ),
    ]

================
File: migrations/0003_research_reasoning_steps_alter_research_created_at_and_more.py
================
# Generated by Django 5.1.5 on 2025-02-17 16:07

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('research', '0002_research_guidance'),
    ]

    operations = [
        migrations.AddField(
            model_name='research',
            name='reasoning_steps',
            field=models.JSONField(default=list),
        ),
        migrations.AlterField(
            model_name='research',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='research',
            name='status',
            field=models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20),
        ),
    ]

================
File: migrations/0004_alter_research_learnings_and_more.py
================
# Generated by Django 5.1.5 on 2025-02-17 21:49

import apps.research.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('research', '0003_research_reasoning_steps_alter_research_created_at_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='research',
            name='learnings',
            field=models.JSONField(default=apps.research.models.default_list),
        ),
        migrations.AlterField(
            model_name='research',
            name='reasoning_steps',
            field=models.JSONField(default=apps.research.models.default_list),
        ),
        migrations.AlterField(
            model_name='research',
            name='visited_urls',
            field=models.JSONField(default=apps.research.models.default_list),
        ),
    ]

================
File: static/research/js/research-websocket-init.js
================
import { ResearchWebSocketService } from './research-websocket.js';

console.log('Initializing research WebSocket...');
const researchId = window.RESEARCH_ID;

if (researchId) {
    const wsService = new ResearchWebSocketService(researchId);
    window.researchWsService = wsService;
    console.log('WebSocket service initialized');
} else {
    console.error('Error: RESEARCH_ID is not defined.');
}

================
File: static/research/js/research-websocket.js
================
// Research-specific WebSocket service
export class ResearchWebSocketService {
    constructor(researchId) {
        this.researchId = researchId;
        this.socket = null;
        this.isConnected = false;
        
        // Get DOM elements
        this.progressContainer = document.getElementById('progress-container');
        this.urlsList = document.querySelector('#sourcesList .sources-list');
        this.learningsList = document.querySelector('.learnings-list');
        this.reportContainer = document.querySelector('.card.d-none');  // Select the hidden report card
        this.statusBadge = document.getElementById('status-badge');
        this.cancelButton = document.getElementById('cancel-research');
        
        // Initialize markdown-it
        this.md = window.markdownit({
            html: true,
            linkify: true,
            typographer: true,
            highlight: function (str, lang) {
                if (lang && window.hljs && window.hljs.getLanguage(lang)) {
                    try {
                        return window.hljs.highlight(str, { language: lang }).value;
                    } catch (__) {}
                }
                return '';
            }
        });
        
        // Initialize badge animation if research is pending or in progress
        if (this.statusBadge) {
            const status = this.statusBadge.textContent.trim();
            if (status === 'In Progress' || status === 'Pending') {
                this.statusBadge.classList.remove('bg-success', 'bg-danger', 'bg-warning');
                this.statusBadge.classList.add('bg-info', 'badge-animated');
                this.statusBadge.textContent = 'In Progress';
            }
        }
        
        this.connect();
    }

    connect() {
        const wsScheme = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
        const wsUrl = `${wsScheme}${window.location.host}/ws/research/${this.researchId}/`;
        
        this.socket = new WebSocket(wsUrl);
        
        this.socket.onopen = () => {
            console.log('WebSocket connected');
            this.isConnected = true;
            this.setupCancelButton();
        };
        
        this.socket.onclose = () => {
            console.log('WebSocket disconnected');
            this.isConnected = false;
            // Try to reconnect after 5 seconds
            setTimeout(() => this.connect(), 5000);
        };
        
        this.socket.onerror = (error) => {
            console.error('WebSocket error:', error);
        };
        
        this.socket.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data);
                if (data.type === 'research_update') {
                    this.handleResearchUpdate(data.data);
                }
            } catch (error) {
                console.error('Error processing message:', error);
            }
        };
    }

    setupCancelButton() {
        if (this.cancelButton) {
            this.cancelButton.addEventListener('click', () => {
                if (confirm('Are you sure you want to cancel this research task?')) {
                    fetch(`/research/${this.researchId}/cancel/`, {
                        method: 'POST',
                        headers: {
                            'X-CSRFToken': this.getCsrfToken(),
                        },
                    })
                    .then(response => {
                        if (response.ok) {
                            this.updateProgress('Research task cancelled by user.');
                            this.cancelButton.remove();
                            if (this.statusBadge) {
                                this.statusBadge.textContent = 'Cancelled';
                                this.statusBadge.className = 'badge bg-warning';
                            }
                        } else {
                            console.error('Failed to cancel research task');
                        }
                    })
                    .catch(error => {
                        console.error('Error cancelling research task:', error);
                    });
                }
            });
        }
    }

    getCsrfToken() {
        const name = 'csrftoken';
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }

    handleResearchUpdate(data) {
        switch (data.update_type) {
            case 'timing_update':
                this.updateProgress(`[${data.current_time}] ${data.message}`);
                break;
                
            case 'timing_info':
                const timingMessage = `Research completed in ${data.duration_minutes} minutes
                    (Started: ${data.start_time}, 
                    Ended: ${data.end_time})
                    Query: "${data.query}"
                    Breadth: ${data.breadth}, Depth: ${data.depth}`;
                this.updateProgress(timingMessage);
                break;
                
            case 'generating_queries':
                this.updateProgress(data.message);
                if (this.statusBadge) {
                    this.statusBadge.textContent = 'In Progress';
                    this.statusBadge.classList.remove('bg-success', 'bg-danger', 'bg-warning');
                    this.statusBadge.classList.add('bg-info', 'badge-animated');
                }
                break;
                
            case 'queries_generated':
                this.updateProgress('Search queries generated: ' + data.queries.join(', '));
                break;
                
            case 'urls_found':
                this.updateUrls(data.urls);
                break;
                
            case 'processing_content':
                this.updateProgress(data.message);
                break;
                
            case 'learnings_extracted':
                this.updateLearnings(data.learnings);
                break;
                
            case 'completed':
                this.handleCompletion(data);
                break;
                
            case 'error':
                this.handleError(data.error);
                break;
                
            case 'cancelled':
                this.handleCancellation();
                break;
        }
    }

    updateProgress(message) {
        if (this.progressContainer) {
            const div = document.createElement('div');
            div.className = 'progress-update text-xs';
            
            // Handle long messages by adding word-wrap style
            div.style.whiteSpace = 'pre-wrap';
            div.style.wordBreak = 'break-word';
            
            // If message is a search query, format it nicely
            if (message.startsWith('Search queries generated:')) {
                const queries = message.replace('Search queries generated:', '').split(',');
                div.innerHTML = `<strong>Search queries generated:</strong><br>${queries.map(q => `• ${q.trim()}`).join('<br>')}`;
            } else {
                div.textContent = message;
            }
            
            this.progressContainer.appendChild(div);
            
            // Scroll to bottom of container
            this.progressContainer.scrollTop = this.progressContainer.scrollHeight;
        } else {
            console.error('Progress container not found for message:', message);
        }
    }

    updateUrls(urls) {
        if (this.urlsList && Array.isArray(urls)) {
            urls.forEach(url => {
                const sourceItem = document.createElement('div');
                sourceItem.className = 'source-item';
                sourceItem.innerHTML = `
                    <a href="${url}" target="_blank" rel="noopener noreferrer" class="text-xxs">
                        <i class="fas fa-link me-1"></i>
                        ${url.length > 50 ? url.substring(0, 47) + '...' : url}
                    </a>
                `;
                this.urlsList.appendChild(sourceItem);
            });
            
            // Scroll parent container to bottom when new URLs are added
            const sourcesContainer = this.urlsList.closest('.overflow-auto');
            if (sourcesContainer) {
                sourcesContainer.scrollTop = sourcesContainer.scrollHeight;
            }
        } else {
            console.error('URLs list container not found or invalid URLs:', urls);
        }
    }

    updateLearnings(learnings) {
        if (this.learningsList && Array.isArray(learnings)) {
            learnings.forEach((learning, index) => {
                // Skip if learning is null or undefined
                if (!learning) return;
                
                // Extract text based on learning type
                let learningText;
                let categoryText = '';
                
                if (typeof learning === 'object') {
                    if (learning.detail) {
                        learningText = learning.detail;
                        if (learning.category) {
                            categoryText = `<strong>${learning.category}</strong>`;
                        }
                    } else if (learning.fact) {
                        learningText = learning.fact;
                    } else {
                        learningText = JSON.stringify(learning);
                    }
                } else {
                    learningText = learning;
                }
                
                const learningBlock = document.createElement('div');
                learningBlock.className = 'learning-block';
                const uniqueId = `learning-${Date.now()}-${index}`;
                
                // Create a clean preview of the text (first sentence or truncated)
                const previewText = learningText.split('.')[0] + '.';
                const displayPreview = previewText.length > 50 ? previewText.substring(0, 50) + '...' : previewText;
                
                learningBlock.innerHTML = `
                    <div class="learning-header d-flex align-items-center justify-content-between">
                        <div class="d-flex align-items-center cursor-pointer" data-bs-toggle="collapse" data-bs-target="#${uniqueId}">
                            <i class="fas fa-chevron-down me-2 toggle-icon"></i>
                            <h6 class="text-xs mb-0">${displayPreview}</h6>
                        </div>
                    </div>
                    <div class="learning-content mt-2 collapse" id="${uniqueId}">
                        <div class="learning-body">
                            ${categoryText}
                            ${learningText}
                        </div>
                    </div>
                `;
                
                // Add to the learnings list
                this.learningsList.appendChild(learningBlock);
                
                // Scroll parent container to bottom when new learnings are added
                const learningsContainer = this.learningsList.closest('.card-body');
                if (learningsContainer) {
                    learningsContainer.scrollTop = learningsContainer.scrollHeight;
                }
            });
        } else {
            console.error('Learnings list container not found or invalid learnings:', learnings);
        }
    }

    handleCompletion(data) {
        if (data.status === 'completed') {
            if (this.reportContainer) {
                // Get the markdown content div
                let markdownContent = this.reportContainer.querySelector('.markdown-content');
                if (!markdownContent) {
                    markdownContent = document.createElement('div');
                    markdownContent.className = 'markdown-content';
                    this.reportContainer.querySelector('.card-body').appendChild(markdownContent);
                }

                // Render and set the report content
                const htmlContent = this.md.render(data.report || '');
                markdownContent.innerHTML = htmlContent;
                
                // Show the report container
                this.reportContainer.classList.remove('d-none');
                
                // Apply syntax highlighting if available
                if (window.hljs) {
                    this.reportContainer.querySelectorAll('pre code').forEach((block) => {
                        window.hljs.highlightBlock(block);
                    });
                }
            }

            if (this.statusBadge) {
                this.statusBadge.textContent = 'Completed';
                this.statusBadge.classList.remove('bg-info', 'bg-danger', 'bg-warning', 'badge-animated');
                this.statusBadge.classList.add('bg-success');
            }
        } else if (data.status === 'failed') {
            this.handleError(data.error);
        }
    }

    handleError(error) {
        if (this.progressContainer) {
            const div = document.createElement('div');
            div.className = 'progress-update';
            div.style.borderLeft = '3px solid #dc3545';  // Red border for errors
            div.textContent = `Error: ${error}`;
            this.progressContainer.appendChild(div);
            div.scrollIntoView({ behavior: 'smooth' });
        }
        
        if (this.statusBadge) {
            this.statusBadge.textContent = 'Failed';
            this.statusBadge.classList.remove('bg-info', 'bg-success', 'bg-warning', 'badge-animated');
            this.statusBadge.classList.add('bg-danger');
        }
    }

    handleCancellation() {
        this.updateProgress('Research task has been cancelled.');
        if (this.cancelButton) {
            this.cancelButton.remove();
        }
        if (this.statusBadge) {
            this.statusBadge.textContent = 'Cancelled';
            this.statusBadge.classList.remove('bg-info', 'bg-success', 'bg-danger', 'badge-animated');
            this.statusBadge.classList.add('bg-warning');
        }
    }
}

================
File: templates/research/partials/_report.html
================
<div id="report-section">
{% if research.status == 'completed' and research.report %}
    <div class="mt-4">
        <h6 class="mb-3">Research Report</h6>
        <div class="p-3 bg-gray-100 border-radius-md">
            <div class="markdown-content" id="report-content">{{ research.report|markdown }}</div>
        </div>
    </div>
{% endif %}
</div>

================
File: templates/research/partials/_step.html
================
{% load research_tags %}
<div class="timeline-block mb-3" data-step-type="{{ step.step_type }}">
    <span class="timeline-step {% if step.step_type == 'complete' %}bg-gradient-success{% elif is_last %}bg-gradient-primary{% else %}bg-gradient-success{% endif %}">
        {% if step.step_type == 'query_planning' %}
            <i class="fas fa-search text-white"></i>
        {% elif step.step_type == 'content_analysis' %}
            <i class="fas fa-file-alt text-white"></i>
        {% elif step.step_type == 'insights_extracted' %}
            <i class="fas fa-lightbulb text-white"></i>
        {% elif step.step_type == 'complete' %}
            <i class="fas fa-check text-white"></i>
        {% else %}
            <i class="fas fa-check text-white"></i>
        {% endif %}
    </span>
    <div class="timeline-content">
        <div class="d-flex justify-content-between">
            <h6 class="text-dark text-sm font-weight-bold mb-0">{{ step.title }}</h6>
            <div class="d-flex align-items-center">
                <span class="badge badge-sm {% if step.step_type == 'complete' %}bg-gradient-success{% elif is_last %}bg-gradient-primary{% else %}bg-gradient-success{% endif %} me-3">Phase {{ step_number }}</span>
                {% if step.step_type == 'content_analysis' %}
                    {% with url_hash=step.details.url|md5|slice:":8" %}
                    <a href="javascript:;" data-bs-toggle="collapse" data-bs-target="#step-content-analysis-{{ url_hash }}" 
                        class="text-secondary font-weight-bold text-xs">
                        <i class="fas fa-chevron-down"></i>
                    </a>
                    {% endwith %}
                {% else %}
                    <a href="javascript:;" data-bs-toggle="collapse" data-bs-target="#step-{{ step.step_type }}-{{ step_number }}" 
                        class="text-secondary font-weight-bold text-xs">
                        <i class="fas fa-chevron-down"></i>
                    </a>
                {% endif %}
            </div>
        </div>
        <p class="text-secondary text-sm mt-1 mb-0">{{ step.explanation }}</p>
        {% if step.step_type == 'content_analysis' %}
            {% with url_hash=step.details.url|md5|slice:":8" %}
            <div class="collapse" id="step-content-analysis-{{ url_hash }}" data-step-number="{{ step_number }}">
            {% endwith %}
        {% else %}
            <div class="collapse" id="step-{{ step.step_type }}-{{ step_number }}" data-step-number="{{ step_number }}">
        {% endif %}
            <div class="mt-3">
                {% if step.step_type == 'query_planning' or step.step_type == 'search_queries' %}
                    {% if step.details.queries %}
                        {% for query in step.details.queries %}
                            <div class="alert alert-light border mb-3">
                                <div class="d-flex">
                                    <div class="icon icon-shape icon-xs rounded-circle bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                                        <i class="fas fa-search text-white"></i>
                                    </div>
                                    <div>
                                        <code class="text-dark">{{ query }}</code>
                                        {% if step.details.goals %}
                                            <p class="text-sm text-secondary mt-1 mb-0">Goal: {{ step.details.goals|index:forloop.counter0 }}</p>
                                        {% endif %}
                                    </div>
                                </div>
                            </div>
                        {% endfor %}
                    {% endif %}
                {% endif %}

                {% if step.step_type == 'content_analysis' %}
                    <div class="alert alert-light border">
                        <div class="d-flex align-items-center mb-2">
                            <div class="icon icon-shape icon-xs rounded-circle bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                                <i class="fas fa-file-alt text-white"></i>
                            </div>
                            <span class="text-sm">Analyzing {{ step.details.source_length|filesizeformat }} of <a href="{{ step.details.url }}" target="_blank" class="text-primary">{{ step.details.url }}</a></span>
                        </div>
                        <div class="d-flex align-items-center mb-3">
                            <div class="icon icon-shape icon-xs rounded-circle bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                                <i class="fas fa-bullseye text-white"></i>
                            </div>
                            <span class="text-sm">Focus: <code class="text-dark">{{ step.details.focus }}</code></span>
                        </div>

                        {% if step.details.key_findings %}
                            <h6 class="text-dark mb-2 d-flex align-items-center">
                                <div class="icon icon-shape icon-xs rounded-circle bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                                    <i class="fas fa-lightbulb text-white"></i>
                                </div>
                                Key Findings
                            </h6>
                            <ul class="mb-3 ps-4">
                                {% for finding in step.details.key_findings %}
                                    <li class="text-sm text-secondary">{{ finding }}</li>
                                {% endfor %}
                            </ul>
                        {% endif %}

                        {% if step.details.follow_up_questions %}
                            <h6 class="text-dark mb-2 d-flex align-items-center">
                                <div class="icon icon-shape icon-xs rounded-circle bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                                    <i class="fas fa-forward text-white"></i>
                                </div>
                                Follow-up Questions
                            </h6>
                            <ul class="mb-0 ps-4">
                                {% for question in step.details.follow_up_questions %}
                                    <li class="text-sm text-secondary">{{ question }}</li>
                                {% endfor %}
                            </ul>
                        {% endif %}
                    </div>
                {% endif %}

                {% if step.step_type == 'insights_extracted' %}
                    {% if step.details.key_findings %}
                        <div class="alert alert-light border mb-3">
                            <h6 class="text-dark mb-2 d-flex align-items-center">
                                <div class="icon icon-shape icon-xs rounded-circle bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                                    <i class="fas fa-lightbulb text-white"></i>
                                </div>
                                Key Findings
                            </h6>
                            <ul class="mb-0 ps-4">
                                {% for finding in step.details.key_findings %}
                                    <li class="text-sm text-secondary">{{ finding }}</li>
                                {% endfor %}
                            </ul>
                        </div>
                    {% endif %}
                    {% if step.details.follow_up_questions %}
                        <div class="alert alert-light border">
                            <h6 class="text-dark mb-2 d-flex align-items-center">
                                <div class="icon icon-shape icon-xs rounded-circle bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                                    <i class="fas fa-forward text-white"></i>
                                </div>
                                Follow-up Questions
                            </h6>
                            <ul class="mb-0 ps-4">
                                {% for question in step.details.follow_up_questions %}
                                    <li class="text-sm text-secondary">{{ question }}</li>
                                {% endfor %}
                            </ul>
                        </div>
                    {% endif %}
                {% endif %}
            </div>
        </div>
    </div>
</div>

================
File: templates/research/partials/progress.html
================
<!-- Research Progress Section -->
<div class="progress-section card mb-4">
    <div class="card-body p-3">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h6 class="mb-0">Research Progress</h6>
            <span id="status-badge" class="badge bg-{% if research.status == 'completed' %}success{% elif research.status == 'failed' %}danger{% else %}info{% endif %} badge-animated">
                {{ research.status|title }}
            </span>
        </div>
        
        <!-- Progress Updates -->
        <div class="progress-updates overflow-auto" style="max-height: 300px;">
            <div id="progress-container" class="d-flex flex-column gap-2">
                {% if research.error %}
                <div class="alert alert-danger text-white" role="alert">
                    {{ research.error }}
                </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<!-- Template for progress updates -->
<template id="progress-update-template">
    <div class="progress-item bg-white p-3 border-radius-lg shadow-sm">
        <div class="d-flex align-items-center">
            <div class="icon icon-shape icon-xs rounded-circle bg-gradient-info text-center me-2 d-flex align-items-center justify-content-center">
                <i class="fas fa-info-circle text-white"></i>
            </div>
            <div class="ms-2">
                <div class="text-xs update-message"></div>
                <div class="text-xxs text-muted update-time"></div>
            </div>
        </div>
    </div>
</template>

================
File: templates/research/partials/reasoning.html
================
{% load research_tags %}

<div class="timeline timeline-one-side" hx-swap-oob="true" id="timeline-container">
    {% for step in research.reasoning_steps %}
    <div class="timeline-block mb-3" data-step-type="{{ step.step_type }}">
        <span class="timeline-step {% if step.step_type == 'complete' %}bg-gradient-success{% elif forloop.last %}bg-gradient-primary{% else %}bg-gradient-success{% endif %}">
            {% if step.step_type == 'query_planning' %}
                <i class="fas fa-search text-white"></i>
            {% elif step.step_type == 'content_analysis' %}
                <i class="fas fa-file-alt text-white"></i>
            {% elif step.step_type == 'insights_extracted' %}
                <i class="fas fa-lightbulb text-white"></i>
            {% elif step.step_type == 'complete' %}
                <i class="fas fa-check text-white"></i>
            {% else %}
                <i class="fas fa-check text-white"></i>
            {% endif %}
        </span>
        <div class="timeline-content">
            <div class="d-flex justify-content-between">
                <h6 class="text-dark text-sm font-weight-bold mb-0">{{ step.title }}</h6>
                <div class="d-flex align-items-center">
                    <span class="badge badge-sm {% if step.step_type == 'complete' %}bg-gradient-success{% elif forloop.last %}bg-gradient-primary{% else %}bg-gradient-success{% endif %} me-3">Step {{ forloop.counter }}</span>
                    <a href="javascript:;" data-bs-toggle="collapse" data-bs-target="#step-{{ forloop.counter }}" 
                        class="text-secondary font-weight-bold text-xs">
                        <i class="fas fa-chevron-down"></i>
                    </a>
                </div>
            </div>
            <p class="text-secondary text-sm mt-1 mb-0">{{ step.explanation }}</p>
            <div class="collapse" id="step-{{ forloop.counter }}" data-step-number="{{ forloop.counter }}" hx-preserve="true">
                <div class="mt-3">
                    {% if step.step_type == 'query_planning' or step.step_type == 'search_queries' %}
                        {% if step.details.queries %}
                            {% for query in step.details.queries %}
                                <div class="alert alert-light border mb-3">
                                    <div class="d-flex">
                                        <div class="icon icon-shape icon-xs rounded-circle bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                                            <i class="fas fa-search text-white"></i>
                                        </div>
                                        <div>
                                            <code class="text-dark">{{ query }}</code>
                                            {% if step.details.goals %}
                                                <p class="text-sm text-secondary mt-1 mb-0">Goal: {{ step.details.goals|index:forloop.counter0 }}</p>
                                            {% endif %}
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        {% endif %}
                    {% elif step.step_type == 'content_analysis' %}
                        <div class="alert alert-light border">
                            <div class="d-flex align-items-center mb-2">
                                <div class="icon icon-shape icon-xs rounded-circle bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                                    <i class="fas fa-file-alt text-white"></i>
                                </div>
                                <span class="text-sm">Analyzing {{ step.details.source_length|filesizeformat }} of content</span>
                            </div>
                            <div class="d-flex align-items-center">
                                <div class="icon icon-shape icon-xs rounded-circle bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                                    <i class="fas fa-bullseye text-white"></i>
                                </div>
                                <span class="text-sm">Focus: <code class="text-dark">{{ step.details.focus }}</code></span>
                            </div>
                        </div>
                    {% elif step.step_type == 'insights_extracted' %}
                        {% if step.details.key_findings %}
                            <div class="alert alert-light border mb-3">
                                <h6 class="text-dark mb-2 d-flex align-items-center">
                                    <div class="icon icon-shape icon-xs rounded-circle bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                                        <i class="fas fa-lightbulb text-white"></i>
                                    </div>
                                    Key Findings
                                </h6>
                                <ul class="mb-0 ps-4">
                                    {% for finding in step.details.key_findings %}
                                        <li class="text-sm text-secondary">{{ finding }}</li>
                                    {% endfor %}
                                </ul>
                            </div>
                        {% endif %}
                        {% if step.details.follow_up_areas %}
                            <div class="alert alert-light border">
                                <h6 class="text-dark mb-2 d-flex align-items-center">
                                    <div class="icon icon-shape icon-xs rounded-circle bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                                        <i class="fas fa-forward text-white"></i>
                                    </div>
                                    Follow-up Areas
                                </h6>
                                <ul class="mb-0 ps-4">
                                    {% for question in step.details.follow_up_areas %}
                                        <li class="text-sm text-secondary">{{ question }}</li>
                                    {% endfor %}
                                </ul>
                            </div>
                        {% endif %}
                    {% else %}
                        <div class="alert alert-light border">
                            {% for key, value in step.details.items %}
                                <div class="text-sm mb-2">
                                    <strong class="text-dark">{{ key|title }}:</strong> 
                                    <span class="text-secondary">{{ value }}</span>
                                </div>
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
    {% endfor %}

    {% if research.status == 'in_progress' %}
        <div class="timeline-block">
            <span class="timeline-step bg-gradient-info">
                <i class="fas fa-circle-notch fa-spin text-white"></i>
            </span>
            <div class="timeline-content">
                <h6 class="text-dark text-sm font-weight-bold mb-0">Processing Next Step</h6>
                <p class="text-secondary text-sm mt-1 mb-0">
                    <i class="fas fa-spinner fa-spin me-2"></i>Analyzing and gathering information...
                </p>
            </div>
        </div>
    {% endif %}
</div>

<script>
    // Only initialize once
    if (!window.timelineManager) {
        window.timelineManager = {
            expandedSteps: new Set(),
            
            init: function() {
                document.addEventListener('show.bs.collapse', function(evt) {
                    if (evt.target.hasAttribute('data-step-number')) {
                        window.timelineManager.expandedSteps.add(evt.target.getAttribute('data-step-number'));
                    }
                });
                
                document.addEventListener('hide.bs.collapse', function(evt) {
                    if (evt.target.hasAttribute('data-step-number')) {
                        window.timelineManager.expandedSteps.delete(evt.target.getAttribute('data-step-number'));
                    }
                });
                
                document.addEventListener('htmx:afterSwap', function(evt) {
                    if (evt.target.id === 'timeline-container') {
                        window.timelineManager.expandedSteps.forEach(stepNumber => {
                            const collapseEl = document.querySelector(`#step-${stepNumber}`);
                            if (collapseEl) {
                                const bsCollapse = new bootstrap.Collapse(collapseEl, { toggle: false });
                                collapseEl.classList.add('show');
                            }
                        });
                    }
                });
            }
        };
        
        window.timelineManager.init();
    }
</script>

================
File: templates/research/partials/sources.html
================
<!-- Sources Section -->
<div class="sources-section card mb-4">
    <div class="card-body p-3">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h6 class="mb-0">Sources</h6>
            <span class="badge bg-primary" id="sources-count">{{ research.visited_urls|length }}</span>
        </div>
        
        <div class="sources-list overflow-auto" style="max-height: 300px;">
            <div id="sources-container" class="d-flex flex-column gap-2">
                {% for url in research.visited_urls %}
                <div class="source-item bg-white p-2 border-radius-lg shadow-sm">
                    <div class="d-flex align-items-center">
                        <div class="icon icon-shape icon-xs rounded-circle bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                            <i class="fas fa-link text-white"></i>
                        </div>
                        <a href="{{ url }}" target="_blank" rel="noopener noreferrer" class="text-xs text-primary text-truncate">
                            {{ url }}
                        </a>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
    </div>
</div>

<!-- Template for source items -->
<template id="source-item-template">
    <div class="source-item bg-white p-2 border-radius-lg shadow-sm">
        <div class="d-flex align-items-center">
            <div class="icon icon-shape icon-xs rounded-circle bg-gradient-primary text-center me-2 d-flex align-items-center justify-content-center">
                <i class="fas fa-link text-white"></i>
            </div>
            <a href="" target="_blank" rel="noopener noreferrer" class="text-xs text-primary text-truncate source-url"></a>
        </div>
    </div>
</template>

================
File: templates/research/create.html
================
{% extends 'layouts/base.html' %}

{% block content %}
<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-header">
                    <h2>New Research</h2>
                </div>
                <div class="card-body">
                    <form method="post">
                        {% csrf_token %}
                        
                        <div class="mb-3">
                            <label for="{{ form.query.id_for_label }}" class="form-label">Research Query</label>
                            {{ form.query }}
                            {% if form.query.errors %}
                                <div class="invalid-feedback">{{ form.query.errors }}</div>
                            {% endif %}
                        </div>

                        <div class="accordion mb-3" id="advancedSettings">
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="advancedSettingsHeader">
                                    <button class="accordion-button collapsed text-small" type="button" data-bs-toggle="collapse" data-bs-target="#advancedSettingsContent" aria-expanded="false" aria-controls="advancedSettingsContent">
                                        <small>Advanced Settings</small>
                                    </button>
                                </h2>
                                <div id="advancedSettingsContent" class="accordion-collapse collapse" aria-labelledby="advancedSettingsHeader" data-bs-parent="#advancedSettings">
                                    <div class="accordion-body">
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="mb-3">
                                                    <label for="{{ form.breadth.id_for_label }}" class="form-label">Search Breadth (2-10)</label>
                                                    {{ form.breadth }}
                                                    <div class="form-text">Number of parallel search queries</div>
                                                    {% if form.breadth.errors %}
                                                        <div class="invalid-feedback">{{ form.breadth.errors }}</div>
                                                    {% endif %}
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="mb-3">
                                                    <label for="{{ form.depth.id_for_label }}" class="form-label">Search Depth (1-5)</label>
                                                    {{ form.depth }}
                                                    <div class="form-text">Number of recursive iterations</div>
                                                    {% if form.depth.errors %}
                                                        <div class="invalid-feedback">{{ form.depth.errors }}</div>
                                                    {% endif %}
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="mb-3">
                                                    <label for="model" class="form-label">Language Model</label>
                                                    <select name="model" id="model" class="form-select">
                                                        {% for model in available_models %}
                                                            <option value="{{ model }}" {% if model == selected_model %}selected{% endif %}>{{ model }}</option>
                                                        {% endfor %}
                                                    </select>
                                                    <div class="form-text">Model to use for research</div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="mb-3">
                                            <label for="{{ form.guidance.id_for_label }}" class="form-label">Research Guidance</label>
                                            {{ form.guidance }}
                                            <div class="form-text">Optional guidance to influence how research findings are analyzed</div>
                                            {% if form.guidance.errors %}
                                                <div class="invalid-feedback">{{ form.guidance.errors }}</div>
                                            {% endif %}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="text-end">
                            <button type="submit" class="btn btn-primary">Start Research</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

================
File: templates/research/detail.html
================
{% extends 'layouts/base.html' %}
{% load static %}
{% load research_tags %}
{% load markdown_filters %}

{% block content %}
<div class="container-fluid py-4"
     hx-ext="ws"
     ws-connect="/ws/research/{{ research.id }}/">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <!-- Query Header -->
                <div class="card-header pb-0">
                    <div class="d-flex align-items-center">
                        <h5 class="mb-0">{{ research.query }}</h5>
                        <div class="ms-auto d-flex align-items-center">
                            <span class="text-sm text-secondary me-3" id="sources-count" hx-swap-oob="true">
                                <i class="fas fa-link me-1"></i>{{ research.visited_urls|length }} sources
                            </span>
                            <span class="badge bg-gradient-primary" id="status-badge" hx-swap-oob="true">{{ research.status|title }}</span>
                        </div>
                    </div>
                </div>

                <div class="card-body p-3">
                    <!-- Progress Bar -->
                    {% if research.status == 'in_progress' %}
                        <div class="progress mb-3">
                            <div class="progress-bar bg-gradient-primary" role="progressbar" style="width: 0%" 
                                id="research-progress" hx-swap-oob="true"></div>
                        </div>
                    {% endif %}

                    <!-- Reasoning Steps Timeline -->
                    <div class="timeline timeline-one-side">
                        {% for step in research.reasoning_steps %}
                            {% include "research/partials/_step.html" with step=step step_number=forloop.counter is_last=forloop.last %}
                        {% endfor %}

                        <!-- Processing Indicator -->
                        <div id="processing-indicator" class="timeline-block {% if research.status != 'in_progress' %}d-none{% endif %}">
                            <span class="timeline-step bg-gradient-info">
                                <i class="fas fa-circle-notch fa-spin text-white"></i>
                            </span>
                            <div class="timeline-content">
                                <h6 class="text-dark text-sm font-weight-bold mb-0">Processing Next Step</h6>
                                <p class="text-secondary text-sm mt-1 mb-0">
                                    <i class="fas fa-spinner fa-spin me-2"></i>Analyzing and gathering information...
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- Report Section -->
                    <div id="report-section">
                        {% if research.report %}
                            <div class="mt-4">
                                <h6 class="mb-3">Research Report</h6>
                                <div class="p-3 bg-gray-100 border-radius-md">
                                    <div class="markdown-content" id="report-content">{{ research.report|markdown }}</div>
                                </div>
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_css %}
<!-- Markdown Styling -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.2.0/github-markdown-light.min.css">
<style>
    .markdown-content {
        font-size: 0.875rem;
        line-height: 1.6;
    }
    .markdown-content h1, 
    .markdown-content h2, 
    .markdown-content h3 {
        margin-top: 1.5rem;
        margin-bottom: 1rem;
        font-weight: 600;
    }
    .markdown-content p {
        margin-bottom: 1rem;
    }
    .markdown-content code {
        background: #f8f9fa;
        padding: 0.2rem 0.4rem;
        border-radius: 4px;
        font-size: 0.8125rem;
    }
    .markdown-content pre {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 4px;
        overflow-x: auto;
    }
    .timeline-step i {
        font-size: 1rem;
    }
</style>
{% endblock %}

{% block extra_js %}
<!-- HTMX WebSocket Extension -->
<script src="https://unpkg.com/htmx.org/dist/ext/ws.js"></script>
<script>
    // Debug HTMX WebSocket events
    document.body.addEventListener('htmx:wsOpen', function(evt) {
        console.log('WebSocket opened:', evt.detail);
    });

    document.body.addEventListener('htmx:wsClose', function(evt) {
        console.log('WebSocket closed:', evt.detail);
    });

    document.body.addEventListener('htmx:wsError', function(evt) {
        console.log('WebSocket error:', evt.detail);
    });
</script>
{% endblock %}

================
File: templates/research/list.html
================
{% extends 'layouts/base.html' %}

{% block content %}
<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Research History</h2>
                <a href="{% url 'research:create' %}" class="btn btn-primary">New Research</a>
            </div>

            <div class="card">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Query</th>
                                    <th>Status</th>
                                    <th>Created</th>
                                    <th>Sources</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for research in researches %}
                                <tr>
                                    <td>{{ research.query|truncatechars:50 }}</td>
                                    <td>
                                        <span class="badge {% if research.status == 'completed' %}bg-success{% elif research.status == 'failed' %}bg-danger{% else %}bg-info{% endif %}">
                                            {{ research.status|title }}
                                        </span>
                                    </td>
                                    <td>{{ research.created_at|date:"Y-m-d H:i" }}</td>
                                    <td>{{ research.visited_urls|length }}</td>
                                    <td>
                                        <a href="{% url 'research:detail' research_id=research.id %}" class="btn btn-sm btn-outline-primary">
                                            View Details
                                        </a>
                                    </td>
                                </tr>
                                {% empty %}
                                <tr>
                                    <td colspan="5" class="text-center">
                                        No research requests yet.
                                        <a href="{% url 'research:create' %}">Start your first research</a>
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

================
File: templatetags/__init__.py
================
# This file is intentionally empty to make the directory a Python package

================
File: templatetags/research_tags.py
================
from django import template
import json as json_lib
import hashlib

register = template.Library()

@register.filter
def index(indexable, i):
    """Get item at index i from an indexable object"""
    try:
        return indexable[i]
    except (IndexError, TypeError, KeyError):
        return ''

@register.filter
def json(value):
    """Convert a Python object to a JSON string"""
    try:
        return json_lib.dumps(value)
    except (TypeError, ValueError):
        return '{}'

@register.filter
def md5(value):
    """Generate MD5 hash of a string value"""
    try:
        if not value:
            return ''
        return hashlib.md5(str(value).encode()).hexdigest()
    except (TypeError, ValueError):
        return ''

================
File: websockets/research_consumer.py
================
from apps.common.websockets.base_consumer import BaseWebSocketConsumer
from channels.db import database_sync_to_async
from django.template.loader import render_to_string
from ..models import Research
from ..services import ResearchService
import logging
import json
import hashlib

logger = logging.getLogger(__name__)

class ResearchConsumer(BaseWebSocketConsumer):
    async def connect(self):
        self.research_id = self.scope['url_route']['kwargs']['research_id']
        self.group_name = f"research_{self.research_id}"
        #logger.info(f"WebSocket connecting for research {self.research_id}")
        await super().connect()
        #logger.info(f"WebSocket connected for research {self.research_id}")

    def get_group_name(self):
        return self.group_name

    @database_sync_to_async
    def get_research(self):
        try:
            return Research.objects.get(id=self.research_id)
        except Research.DoesNotExist:
            logger.error(f"Research {self.research_id} not found")
            return None

    @database_sync_to_async
    def update_research(self, data):
        try:
            update_type = data.get('type')
            
            if update_type == 'reasoning':
                step_data = {
                    'step_type': data.get('step'),
                    'title': data.get('title'),
                    'explanation': data.get('explanation'),
                    'details': data.get('details', {})
                }
                return ResearchService.update_research_steps(self.research_id, step_data)
                
            elif update_type == 'status':
                return ResearchService.update_research_status(self.research_id, data.get('status'))
                
            elif update_type == 'error':
                return ResearchService.update_research_error(self.research_id, data.get('message'))

            elif update_type == 'report':
                return ResearchService.update_research_report(self.research_id, data.get('report'))

            return None
            
        except Exception as e:
            logger.error(f"Error updating research: {str(e)}", exc_info=True)
            return None

    async def handle_message(self, data):
        """Handle incoming websocket message."""
        logger.info(f"Received message: {data}")
        message_type = data.get('type')
        
        if message_type == 'get_status':
            research = await self.get_research()
            if research:
                await self.send_json({
                    'type': 'research_status',
                    'status': research.status,
                    'visited_urls': research.visited_urls,
                    'learnings': research.learnings,
                    'reasoning_steps': research.reasoning_steps,
                    'report': research.report
                })
            else:
                await self.send_error('Research not found')

    async def research_update(self, event):
        data = event.get('data')
        if not data:
            logger.error(f"No data in research update event for research {self.research_id}")
            return
            
        #logger.info(f"Received research update: {data.get('update_type')} for research {self.research_id}")
        #logger.debug(f"Update data contents: {json.dumps(data)[:500]}")  # Log first 500 chars of data
        
        # Update research object if needed
        update_type = data.get('update_type')
        if update_type in ['reasoning', 'status', 'error', 'report', 'report_ready']:
            research = await self.update_research({
                'type': update_type,
                **data
            })
            
            if research:
                if update_type == 'reasoning':
                    # Only render the latest step
                    latest_step = research.reasoning_steps[-1] if research.reasoning_steps else None
                    if latest_step:
                        # Add step number to details for template
                        latest_step['details']['step_number'] = len(research.reasoning_steps)
                        
                        # For content analysis steps, include content length in KB
                        if latest_step.get('step') == 'content_analysis' and 'source_length' in latest_step.get('details', {}):
                            latest_step['details']['source_length_kb'] = f"{latest_step['details']['source_length'] / 1024:.1f}"
                        
                        # For insights steps, ensure learnings are included
                        if latest_step.get('step') == 'insights_extracted':
                            if 'key_findings' in latest_step.get('details', {}):
                                latest_step['details']['learnings'] = latest_step['details']['key_findings']
                        
                        # Generate unique step ID
                        if latest_step['step_type'] == 'content_analysis':
                            # Create unique ID using URL for content analysis steps
                            url = latest_step.get('details', {}).get('url', '')
                            if url:
                                url_hash = hashlib.md5(url.encode()).hexdigest()[:8]
                                step_id = f"content-analysis-{url_hash}"
                        else:
                            step_id = f"{latest_step['step_type']}-{len(research.reasoning_steps)}"
                        
                        # Render just the new step
                        html = await self.render_template_async(
                            'research/partials/_step.html',
                            {
                                'step': latest_step,
                                'step_number': len(research.reasoning_steps),
                                'is_last': True,
                                'details': latest_step.get('details', {})
                            }
                        )
                        logger.debug(f"Sending WebSocket HTML update for new step: {latest_step['title']}")
                        
                        # Send the new step to be inserted before the processing indicator
                        await self.send(text_data=f'''
                            <div id="step-{step_id}" 
                                 hx-swap-oob="beforebegin:#processing-indicator">
                                {html}
                            </div>
                        ''')
                
                elif update_type == 'status':
                    # For status updates, target the progress bar and status badge
                    if 'progress_percent' in data:
                        updates = []
                        # Update progress bar
                        updates.append(f'<div id="research-progress" class="progress-bar bg-gradient-primary" role="progressbar" style="width: {data.get("progress_percent")}%" hx-swap-oob="true"></div>')
                        # Update status badge
                        updates.append(f'<span id="status-badge" class="badge bg-gradient-primary" hx-swap-oob="true">{research.status.title()}</span>')
                        
                        # If research is complete
                        if research.status == 'completed':
                            # Remove processing indicator
                            updates.append('<div id="processing-indicator" class="d-none" hx-swap-oob="true"></div>')
                        
                        await self.send(text_data=''.join(updates))
                
                elif update_type == 'report_ready':
                    # When report is ready, send a message to trigger the report section to refresh
                    research = await self.get_research()
                    if research and research.report:
                        logger.debug(f"Rendering report template for research {self.research_id}")
                        html = await self.render_template_async(
                            'research/partials/_report.html',
                            {'research': research}
                        )
                        await self.send(text_data=f'''
                            <div id="report-section" hx-swap-oob="true">
                                {html}
                            </div>
                        '''.strip())
                    else:
                        logger.warning(f"Research {self.research_id} report ready but no report found")
                
                elif update_type == 'error':
                    # For errors, show in the progress container
                    html = f'<div id="progress-container" class="alert alert-danger text-white" role="alert" hx-swap-oob="true">{research.error}</div>'
                    await self.send(text_data=html)

    @database_sync_to_async
    def render_template_async(self, template_name, context):
        return render_to_string(template_name, context)

================
File: admin.py
================
from django.contrib import admin
from django.utils.html import format_html
from .models import Research

@admin.register(Research)
class ResearchAdmin(admin.ModelAdmin):
    list_display = ['id', 'truncated_query', 'user', 'status', 'created_at', 'source_count', 'has_report']
    list_filter = ['status', 'created_at', 'user']
    search_fields = ['query', 'user__username', 'report']
    readonly_fields = ['created_at', 'updated_at', 'visited_urls', 'learnings', 'reasoning_steps']
    date_hierarchy = 'created_at'
    
    def truncated_query(self, obj):
        return obj.query[:50] + "..." if len(obj.query) > 50 else obj.query
    truncated_query.short_description = 'Query'
    
    def source_count(self, obj):
        return len(obj.visited_urls)
    source_count.short_description = 'Sources'
    
    def has_report(self, obj):
        return format_html(
            '<span style="color: {};">&#x2022;</span> {}',
            '#2ecc71' if obj.report else '#e74c3c',
            'Yes' if obj.report else 'No'
        )
    has_report.short_description = 'Report'
    
    fieldsets = [
        ('Basic Information', {
            'fields': ['user', 'query', 'status', 'created_at', 'updated_at']
        }),
        ('Research Parameters', {
            'fields': ['breadth', 'depth', 'guidance']
        }),
        ('Results', {
            'fields': ['report', 'error']
        }),
        ('Research Data', {
            'classes': ['collapse'],
            'fields': ['visited_urls', 'learnings', 'reasoning_steps']
        }),
    ]

================
File: apps.py
================
from django.apps import AppConfig


class ResearchConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.research'
    path = __file__.replace('apps.py', '')

================
File: forms.py
================
from django import forms
from .models import Research

class ResearchForm(forms.ModelForm):
    class Meta:
        model = Research
        fields = ['query', 'breadth', 'depth', 'guidance']
        widgets = {
            'query': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 3,
                'placeholder': 'Enter your research query...'
            }),
            'breadth': forms.NumberInput(attrs={
                'class': 'form-control',
                'min': 2,
                'max': 10
            }),
            'depth': forms.NumberInput(attrs={
                'class': 'form-control',
                'min': 1,
                'max': 5
            }),
            'guidance': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 3,
                'placeholder': 'Optional: Provide guidance on what aspects to focus on...'
            })
        }

================
File: models.py
================
from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone

User = get_user_model()

def default_list():
    return []

class Research(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
        ('failed', 'Failed'),
        ('cancelled', 'Cancelled'),
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE)
    query = models.TextField()
    breadth = models.IntegerField(default=4)
    depth = models.IntegerField(default=2)
    guidance = models.TextField(null=True, blank=True, help_text="Optional guidance for content processing")
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    report = models.TextField(null=True, blank=True)
    error = models.TextField(null=True, blank=True)
    
    # Store intermediate results using callable defaults
    visited_urls = models.JSONField(default=default_list)
    learnings = models.JSONField(default=default_list)
    reasoning_steps = models.JSONField(default=default_list)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name_plural = 'Research'

    def __str__(self):
        return f"Research: {self.query[:50]}..."

================
File: services.py
================
import logging
from typing import Dict, Optional, List
from .models import Research
import json
from django.db import transaction

logger = logging.getLogger(__name__)

class ResearchService:
    @staticmethod
    def update_research_steps(research_id: int, step_data: Dict) -> Optional[Research]:
        """Update research steps in the database."""
        try:
            #logger.info(f"Updating research steps for research {research_id}")
            #logger.info(f"Step data received: {json.dumps(step_data)}")
            
            # Use transaction context manager
            with transaction.atomic():
                # Get research object with select_for_update to prevent race conditions
                research = Research.objects.select_for_update().get(id=research_id)
                
                # Ensure we have a valid list for current_steps
                current_steps = research.reasoning_steps
                if current_steps is None or not isinstance(current_steps, list):
                    logger.warning(f"Current steps was not a valid list, resetting. Type was: {type(current_steps)}")
                    current_steps = []
                
                #logger.info(f"Current step count before update: {len(current_steps)}")
                
                # Validate step data
                if not all(key in step_data for key in ['step_type', 'title', 'explanation']):
                    logger.error(f"Invalid step data format: {json.dumps(step_data)}")
                    return None
                
                # Only append if this is a new step
                is_duplicate = False
                if current_steps:
                    # Check for duplicate step based on step_type and title
                    for existing_step in current_steps:
                        if (existing_step.get('step_type') == step_data.get('step_type') and 
                            existing_step.get('title') == step_data.get('title')):
                            # Update the existing step instead of adding a new one
                            existing_step.update(step_data)
                            is_duplicate = True
                            logger.info(f"Updated existing step: {step_data.get('title')}")
                            break
                    
                    # Special case: don't add 'complete' step if it's already there
                    if step_data.get('step_type') == 'complete' and any(s.get('step_type') == 'complete' for s in current_steps):
                        is_duplicate = True
                        logger.info("Skipping duplicate complete step")
                
                if not is_duplicate:
                    current_steps.append(step_data)
                    #logger.info(f"Added new step: {step_data.get('title')}")
                
                logger.info(f"Current step count after update: {len(current_steps)}")
                
                # Save the updated steps
                research.reasoning_steps = current_steps
                research.save(update_fields=['reasoning_steps'])
                
                # Verify the save
                research.refresh_from_db()
                #logger.info(f"Verified step count after save: {len(research.reasoning_steps)}")
                
                return research
                
        except Research.DoesNotExist:
            logger.error(f"Research {research_id} not found")
            return None
        except Exception as e:
            logger.error(f"Error updating research steps: {str(e)}", exc_info=True)
            return None

    @staticmethod
    def update_research_status(research_id: int, status: str) -> Optional[Research]:
        """Update research status."""
        try:
            with transaction.atomic():
                research = Research.objects.select_for_update().get(id=research_id)
                research.status = status
                research.save(update_fields=['status'])
                return research
        except Research.DoesNotExist:
            logger.error(f"Research {research_id} not found")
            return None
        except Exception as e:
            logger.error(f"Error updating research status: {str(e)}", exc_info=True)
            return None

    @staticmethod
    def update_research_error(research_id: int, error_message: str) -> Optional[Research]:
        """Update research error state."""
        try:
            with transaction.atomic():
                research = Research.objects.select_for_update().get(id=research_id)
                research.error = error_message
                research.status = 'failed'
                research.save(update_fields=['error', 'status'])
                return research
        except Research.DoesNotExist:
            logger.error(f"Research {research_id} not found")
            return None
        except Exception as e:
            logger.error(f"Error updating research error: {str(e)}", exc_info=True)
            return None

    @staticmethod
    def update_research_report(research_id: int, report: str) -> Optional[Research]:
        """Update research report."""
        try:
            with transaction.atomic():
                research = Research.objects.select_for_update().get(id=research_id)
                research.report = report
                research.save(update_fields=['report'])
                return research
        except Research.DoesNotExist:
            logger.error(f"Research {research_id} not found")
            return None
        except Exception as e:
            logger.error(f"Error updating research report: {str(e)}", exc_info=True)
            return None

    @staticmethod
    def update_research_data(research_id: int, data: Dict) -> Optional[Research]:
        """Update research data fields (report, visited_urls, learnings)."""
        try:
            with transaction.atomic():
                research = Research.objects.select_for_update().get(id=research_id)
                
                fields_to_update = []
                
                if 'report' in data:
                    research.report = data['report']
                    fields_to_update.append('report')
                    
                if 'visited_urls' in data:
                    research.visited_urls = data['visited_urls']
                    fields_to_update.append('visited_urls')
                    
                if 'learnings' in data:
                    research.learnings = data['learnings']
                    fields_to_update.append('learnings')
                    
                if fields_to_update:
                    research.save(update_fields=fields_to_update)
                    
                return research
        except Research.DoesNotExist:
            logger.error(f"Research {research_id} not found")
            return None
        except Exception as e:
            logger.error(f"Error updating research data: {str(e)}", exc_info=True)
            return None

================
File: tasks.py
================
from celery import shared_task
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
from apps.agents.tools.deep_research_tool.deep_research_tool import DeepResearchTool
from .models import Research
from .services import ResearchService
import logging
from pydantic import Field
from typing import Any
from celery.exceptions import Ignore

logger = logging.getLogger(__name__)
channel_layer = get_channel_layer()

class ProgressTracker:
    def __init__(self, research_id):
        self.research_id = research_id
        self.group_name = f"research_{research_id}"
        logger.info(f"Initialized ProgressTracker for research {research_id}")

    def send_update(self, update_type, data):
        #logger.info(f"Sending update type {update_type} for research {self.research_id}")
        try:
            update_data = {
                "update_type": update_type,
                **data
            }
            logger.info(f"Update data: {update_data}")
            
            async_to_sync(channel_layer.group_send)(
                self.group_name,
                {
                    "type": "research_update",
                    "data": update_data
                }
            )
            #logger.info(f"Successfully sent update type {update_type} for research {self.research_id}")
        except Exception as e:
            logger.error(f"Error sending WebSocket update for research {self.research_id}: {str(e)}", exc_info=True)

    def check_cancelled(self):
        """Check if the research has been cancelled."""
        try:
            research = Research.objects.get(id=self.research_id)
            return research.status == 'cancelled'
        except Research.DoesNotExist:
            return True

class ProgressDeepResearchTool(DeepResearchTool):
    progress_tracker: Any = Field(None, exclude=True)

    def __init__(self, progress_tracker: ProgressTracker, **kwargs):
        super().__init__(**kwargs)
        self.progress_tracker = progress_tracker

    def _generate_serp_queries(self, query, num_queries, learnings=None, guidance=None):
        if self.progress_tracker.check_cancelled():
            raise Ignore()
        self.progress_tracker.send_update("generating_queries", {
            "message": f"Generating {num_queries} search queries..."
        })
        result = super()._generate_serp_queries(query, num_queries, learnings, guidance)
        self.progress_tracker.send_update("queries_generated", {
            "queries": [q["query"] for q in result]
        })
        return result

    def _extract_urls(self, search_results):
        if self.progress_tracker.check_cancelled():
            raise Ignore()
        urls = super()._extract_urls(search_results)
        self.progress_tracker.send_update("urls_found", {
            "urls": urls
        })
        return urls

    def _process_content(self, query, content, num_learnings=3, guidance=None):
        if self.progress_tracker.check_cancelled():
            raise Ignore()
        return super()._process_content(query, content, num_learnings, guidance)

@shared_task
def run_research(research_id, model_name=None, tool_params=None):
    research = None
    progress_tracker = None
    try:
        research = Research.objects.get(id=research_id)
        
        # Check if already cancelled before starting
        if research.status == 'cancelled':
            logger.info(f"Research task {research_id} was already cancelled")
            return
            
        ResearchService.update_research_status(research_id, 'in_progress')

        progress_tracker = ProgressTracker(research_id)
        
        # Check if cancelled after tracker initialization
        if progress_tracker.check_cancelled():
            logger.info(f"Research task {research_id} was cancelled before starting")
            ResearchService.update_research_status(research_id, 'cancelled')
            progress_tracker.send_update("cancelled", {})
            return
            
        # Initialize tool with model name and any additional params
        tool_kwargs = {
            'progress_tracker': progress_tracker,
        }
        if tool_params:
            tool_kwargs.update(tool_params)
            
        tool = ProgressDeepResearchTool(**tool_kwargs)

        result = tool._run(
            query=research.query,
            breadth=research.breadth,
            depth=research.depth,
            user_id=research.user_id,
            guidance=research.guidance
        )

        if result['success']:
            data = result['deep_research_data']
            
            # Debug log report content
            logger.info(f"Report content length: {len(data.get('report', ''))}")
            logger.debug(f"Report content preview: {data.get('report', '')[:500]}")
            
            # Update research with all data including report
            ResearchService.update_research_data(research_id, {
                'report': data['report'],
                'visited_urls': data['sources'],
                'learnings': data['learnings']
            })
            
            # Verify report was saved
            research.refresh_from_db()
            logger.info(f"After refresh - Report exists: {bool(research.report)}, Length: {len(research.report or '')}")
            if not research.report:
                logger.error(f"Report save failed for research {research_id}")
                ResearchService.update_research_error(research_id, "Failed to save report")
                progress_tracker.send_update("error", {"error": "Failed to save report"})
            else:
                # Update status to completed first
                ResearchService.update_research_status(research_id, 'completed')
                research.refresh_from_db()  # Refresh to get latest status
                
                # Now send report ready
                progress_tracker.send_update("report_ready", {"message": "Report is ready to view"})
                progress_tracker.send_update("completed", {
                    "status": "completed",
                    "error": None
                })
            
            # Send final completion status
            progress_tracker.send_update("completed", {
                "status": "completed",
                "error": None
            })
        else:
            ResearchService.update_research_error(research_id, result.get('error', 'Unknown error occurred'))
            
            # Send error status
            progress_tracker.send_update("error", {
                "error": result.get('error', 'Unknown error occurred')
            })

    except Ignore:
        # Task was cancelled
        logger.info(f"Research task {research_id} was cancelled")
        if research:
            ResearchService.update_research_status(research_id, 'cancelled')
        if progress_tracker:
            progress_tracker.send_update("cancelled", {})
        return

    except Exception as e:
        logger.error(f"Error in research task: {str(e)}", exc_info=True)
        if research:
            ResearchService.update_research_error(research_id, str(e))
            
            if progress_tracker:
                progress_tracker.send_update("error", {
                    "error": str(e)
                })

================
File: urls.py
================
from django.urls import path
from . import views

app_name = 'research'

urlpatterns = [
    path('', views.research_list, name='list'),
    path('create/', views.research_create, name='create'),
    path('<int:research_id>/', views.research_detail, name='detail'),
    path('<int:research_id>/cancel/', views.cancel_research, name='cancel'),
    # HTMX endpoints
    path('<int:research_id>/progress/', views.research_progress, name='progress'),
    path('<int:research_id>/sources/', views.research_sources, name='sources'),
    path('<int:research_id>/reasoning/', views.research_reasoning, name='reasoning'),
]

================
File: views.py
================
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse, HttpResponse
from django.urls import reverse
from django.template.loader import render_to_string
from django.views.decorators.csrf import ensure_csrf_cookie
from .models import Research
from .forms import ResearchForm
from .tasks import run_research
from apps.common.utils import get_models
from django.conf import settings
import json
from django.views.decorators.http import require_POST
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
import logging

@login_required
def research_create(request):
    available_models = get_models()
    selected_model = getattr(settings, 'GENERAL_MODEL', available_models[0] if available_models else None)
    
    if request.method == 'POST':
        form = ResearchForm(request.POST)
        if form.is_valid():
            research = form.save(commit=False)
            research.user = request.user
            research.save()
            
            # Get selected model from form
            model_name = request.POST.get('model', selected_model)
            
            # Start Celery task with selected model
            run_research.delay(
                research_id=research.id,
                model_name=model_name,
                tool_params={
                    'llm_model': model_name  # Pass model to deep research tool
                }
            )
            
            return redirect('research:detail', research_id=research.id)
    else:
        form = ResearchForm()
    
    return render(request, 'research/create.html', {
        'form': form,
        'available_models': available_models,
        'selected_model': selected_model
    })

@ensure_csrf_cookie
@login_required
def research_detail(request, research_id):
    research = get_object_or_404(Research, id=research_id, user=request.user)
    available_models = get_models()
    selected_model = getattr(settings, 'GENERAL_MODEL', available_models[0] if available_models else None)
    
    logger = logging.getLogger(__name__)
    logger.info(f"Research status: {research.status}")
    
    return render(request, 'research/detail.html', {
        'research': research,
        'available_models': json.dumps(available_models),
        'selected_model': selected_model
    })

@login_required
def research_list(request):
    researches = Research.objects.filter(user=request.user)
    return render(request, 'research/list.html', {
        'researches': researches
    })

@require_POST
@login_required
def cancel_research(request, research_id):
    research = get_object_or_404(Research, id=research_id, user=request.user)
    
    if research.status in ['pending', 'in_progress']:
        research.status = 'cancelled'
        research.save()
        
        # Send cancellation message through WebSocket
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            f"research_{research_id}",
            {
                "type": "research_update",
                "data": {
                    "update_type": "cancelled",
                }
            }
        )
        
        return HttpResponse(status=200)
    
    return HttpResponse(status=400)

@login_required
def research_progress(request, research_id):
    """HTMX endpoint for progress updates"""
    research = get_object_or_404(Research, id=research_id, user=request.user)
    context = {'research': research}
    
    if request.headers.get('HX-Request'):
        return render(request, 'research/partials/progress.html', context)
    return HttpResponse(status=400)

@login_required
def research_sources(request, research_id):
    """HTMX endpoint for sources updates"""
    research = get_object_or_404(Research, id=research_id, user=request.user)
    context = {'research': research}
    
    if request.headers.get('HX-Request'):
        return render(request, 'research/partials/sources.html', context)
    return HttpResponse(status=400)

@login_required
def research_reasoning(request, research_id):
    """HTMX endpoint for reasoning chain updates"""
    research = get_object_or_404(Research, id=research_id, user=request.user)
    context = {'research': research}
    
    if request.headers.get('HX-Request'):
        return render(request, 'research/partials/reasoning.html', context)
    return HttpResponse(status=400)
