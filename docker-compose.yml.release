version: "3.9"
services:
  neuralami:
    image: registry.rijsinghani.us/neuralami:${IMAGE_TAG}
    container_name: neuralami
    networks:
      - db_network
      - web_network
    env_file:
      - ./env-files/.env.${DEPLOY_ENV}
    environment:
      - RUN_MIGRATIONS=${RUN_MIGRATIONS:-false}
      - WAIT_FOR_DB=true
      - COLLECT_STATIC=${COLLECT_STATIC:-false}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${APP_PORT:-3010}/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3010}:${APP_PORT:-3010}"

  redis:
    image: redis:latest
    container_name: redis
    command: redis-server
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - db_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  celery_worker:
    image: registry.rijsinghani.us/celery-worker:${IMAGE_TAG}
    container_name: celery_worker
    volumes:
      - .:/app
    env_file:
      - ./env-files/.env.${DEPLOY_ENV}
    networks:
      - db_network
    environment:
      DJANGO_SETTINGS_MODULE: "core.settings"
      PYTHONPATH: /app
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    command: celery -A apps.tasks worker -l info
    depends_on:
      neuralami:
        condition: service_started
      redis:
        condition: service_healthy
    restart: always

  celery_beat:
    image: registry.rijsinghani.us/celery-worker:${IMAGE_TAG}
    container_name: celery_beat
    volumes:
      - .:/app
    env_file:
      - ./env-files/.env.${DEPLOY_ENV}
    networks:
      - db_network
    environment:
      DJANGO_SETTINGS_MODULE: "core.settings"
      PYTHONPATH: /app
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    command: celery -A apps.tasks beat -l info
    depends_on:
      redis:
        condition: service_healthy
    restart: always

volumes:
  redis_data:

networks:
  db_network:
    driver: bridge
  web_network:
    driver: bridge