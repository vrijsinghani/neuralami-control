---
description: When websockets are required,
globs: *.html
alwaysApply: false
---
# HTMX WebSocket Patterns (Django)

## Setup
- Include: `<script src="https://unpkg.com/htmx.org/dist/ext/ws.js"></script>`
- Container: `<div hx-ext="ws" ws-connect="/ws/endpoint/{{id}}/">...</div>`
- JS Dynamic: `container.setAttribute('ws-connect', '/ws/endpoint/${id}'); htmx.process(container);`

## Patterns
1. OOB Swap: `<span id="status" hx-swap-oob="true">{{status}}</span>`
2. Progress: `<div class="progress-bar" id="progress" hx-swap-oob="true" style="width:0%"></div>`
3. JSON: 
```js
document.body.addEventListener('htmx:wsAfterMessage', e => {
  let data = JSON.parse(e.detail.message);
  if (data.progress) updateProgress(data.progress);
  else if (data.status === 'complete') handleCompletion(data);
  else if (data.status === 'failed') handleError(data);
});
```

## Debugging
```js
document.body.addEventListener('htmx:wsOpen', e => console.log('Open:', e.detail));
document.body.addEventListener('htmx:wsClose', e => console.log('Close:', e.detail));
document.body.addEventListener('htmx:wsError', e => console.error('Error:', e.detail));
```

## UI
- Overlay: `<div id="progressOverlay" class="progress-overlay"><div id="progressBar" style="width:0%"></div></div>`
- Timeline: `<div class="timeline"><div id="processing-indicator" class="d-none"><i class="fa-spin"></i></div></div>`

## Best Practices
1. Delegate events at document level
2. Try/catch JSON + user feedback + log events
3. Setup post-DOM + verify support + fallback
4. Incremental UI updates + visual feedback + transitions
5. Connect/disconnect smartly + graceful reconnects

## Django Consumer
```python
class YourConsumer(AsyncWebsocketConsumer):
  async def connect(self):
    self.group_name = f"task_{self.scope['url_route']['kwargs']['task_id']}"
    await self.channel_layer.group_add(self.group_name, self.channel_name)
    await self.accept()
  async def disconnect(self, code):
    await self.channel_layer.group_discard(self.group_name, self.channel_name)
  async def progress_update(self, event):
    await self.send(text_data=json.dumps({'progress': event['progress']}))
  async def status_update(self, event):
    await self.send(text_data=json.dumps({'status': event['status']}))
