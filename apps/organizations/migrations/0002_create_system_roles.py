# Generated by Django 5.1.6 on 2025-03-05 22:01

from django.db import migrations
import uuid


def create_default_permissions(apps, schema_editor):
    Permission = apps.get_model('organizations', 'Permission')
    
    # Define default permissions
    default_permissions = [
        # Organization management permissions
        {
            'id': uuid.uuid4(),
            'codename': 'manage_organization',
            'name': 'Manage Organization',
            'description': 'Can update organization settings and details',
            'category': 'organization',
        },
        {
            'id': uuid.uuid4(),
            'codename': 'view_organization',
            'name': 'View Organization',
            'description': 'Can view organization details',
            'category': 'organization',
        },
        
        # Member management permissions
        {
            'id': uuid.uuid4(),
            'codename': 'invite_members',
            'name': 'Invite Members',
            'description': 'Can invite new members to the organization',
            'category': 'members',
        },
        {
            'id': uuid.uuid4(),
            'codename': 'manage_members',
            'name': 'Manage Members',
            'description': 'Can manage existing members (change roles, remove)',
            'category': 'members',
        },
        {
            'id': uuid.uuid4(),
            'codename': 'view_members',
            'name': 'View Members',
            'description': 'Can view organization members',
            'category': 'members',
        },
        
        # Client management permissions
        {
            'id': uuid.uuid4(),
            'codename': 'manage_clients',
            'name': 'Manage Clients',
            'description': 'Can create, update, and delete clients',
            'category': 'clients',
        },
        {
            'id': uuid.uuid4(),
            'codename': 'view_clients',
            'name': 'View Clients',
            'description': 'Can view organization clients',
            'category': 'clients',
        },
        {
            'id': uuid.uuid4(),
            'codename': 'assign_clients',
            'name': 'Assign Clients',
            'description': 'Can assign clients to members',
            'category': 'clients',
        },
    ]
    
    # Create the permissions in the database
    for perm_data in default_permissions:
        # Use get_or_create to handle existing permissions
        permission, created = Permission.objects.get_or_create(
            codename=perm_data['codename'],
            defaults={
                'id': perm_data['id'],
                'name': perm_data['name'],
                'description': perm_data['description'],
                'category': perm_data['category']
            }
        )
        
        # If the permission already existed, update its fields to ensure consistency
        if not created:
            permission.name = perm_data['name']
            permission.description = perm_data['description']
            permission.category = perm_data['category']
            permission.save()


def create_system_roles(apps, schema_editor):
    Role = apps.get_model('organizations', 'Role')
    Permission = apps.get_model('organizations', 'Permission')
    
    # Create Owner role
    owner_role = Role.objects.create(
        id=uuid.uuid4(),
        name='Owner',
        is_system_role=True,
        description='Full access to manage the organization, members, and clients'
    )
    
    # Assign all permissions to owner
    for perm in Permission.objects.all():
        owner_role.permissions.add(perm)
    
    # Create Admin role
    admin_role = Role.objects.create(
        id=uuid.uuid4(),
        name='Admin',
        is_system_role=True,
        description='Can manage members and clients but with limited access to organization settings'
    )
    
    # Assign admin permissions
    admin_permissions = [
        'view_organization',
        'invite_members', 
        'manage_members', 
        'view_members',
        'manage_clients', 
        'view_clients', 
        'assign_clients'
    ]
    for perm in Permission.objects.filter(codename__in=admin_permissions):
        admin_role.permissions.add(perm)
    
    # Create Member role
    member_role = Role.objects.create(
        id=uuid.uuid4(),
        name='Member',
        is_system_role=True,
        description='Basic access to view and work with assigned clients'
    )
    
    # Assign member permissions
    member_permissions = ['view_organization', 'view_members', 'view_clients']
    for perm in Permission.objects.filter(codename__in=member_permissions):
        member_role.permissions.add(perm)


def delete_system_roles(apps, schema_editor):
    Role = apps.get_model('organizations', 'Role')
    Role.objects.filter(is_system_role=True).delete()


def delete_default_permissions(apps, schema_editor):
    Permission = apps.get_model('organizations', 'Permission')
    Permission.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('organizations', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_default_permissions, delete_default_permissions),
        migrations.RunPython(create_system_roles, delete_system_roles),
    ]
