# Generated by Django 5.1.6 on 2025-03-05 22:01

from django.db import migrations
import uuid
from django.utils import timezone


def create_default_organizations(apps, schema_editor):
    """
    Create a default organization for each existing user and assign them as the owner.
    """
    User = apps.get_model('auth', 'User')
    Organization = apps.get_model('organizations', 'Organization')
    OrganizationMembership = apps.get_model('organizations', 'OrganizationMembership')
    Role = apps.get_model('organizations', 'Role')
    
    # Get the Owner role
    owner_role = Role.objects.filter(name='Owner', is_system_role=True).first()
    
    # Log progress info
    total_users = User.objects.count()
    print(f"Creating default organizations for {total_users} users")
    
    # Create a default organization for each user
    for i, user in enumerate(User.objects.all(), 1):
        # Skip if user already has an organization
        if Organization.objects.filter(owner=user).exists():
            print(f"User {user.username} already has an organization, skipping.")
            continue
        
        # Create default organization name
        org_name = f"{user.first_name}'s Organization" if user.first_name else f"{user.username}'s Organization"
        
        # Create the organization
        organization = Organization.objects.create(
            id=uuid.uuid4(),
            name=org_name,
            owner=user,
            is_active=True,
            created_at=timezone.now(),
            updated_at=timezone.now()
        )
        
        # Create the membership
        OrganizationMembership.objects.create(
            id=uuid.uuid4(),
            organization=organization,
            user=user,
            role=owner_role,
            status='active',
            created_at=timezone.now(),
            updated_at=timezone.now(),
            invitation_accepted_at=timezone.now()
        )
        
        if i % 10 == 0 or i == total_users:
            print(f"Created {i}/{total_users} organizations")


def assign_clients_to_organizations(apps, schema_editor):
    """
    Assign existing clients to the organizations of their creators or owners.
    """
    User = apps.get_model('auth', 'User')
    Organization = apps.get_model('organizations', 'Organization')
    Client = apps.get_model('seo_manager', 'Client')
    UserActivity = apps.get_model('seo_manager', 'UserActivity')
    
    # Log progress info
    total_clients = Client.objects.count()
    print(f"Assigning {total_clients} clients to organizations")
    
    # Track clients that couldn't be assigned
    unassigned_clients = []
    
    for i, client in enumerate(Client.objects.all(), 1):
        org = None
        
        # If created_by is already set, use that user's organization
        if client.created_by:
            try:
                org = Organization.objects.filter(owner=client.created_by).first()
            except Organization.DoesNotExist:
                pass
        
        # If no organization found yet, try to find the user who has most interactions with this client
        if not org:
            # Find users who have interacted with this client through UserActivity
            user_counts = {}
            for activity in UserActivity.objects.filter(client=client):
                user_counts[activity.user_id] = user_counts.get(activity.user_id, 0) + 1
            
            if user_counts:
                # Get the user with most interactions
                most_active_user_id = max(user_counts, key=user_counts.get)
                try:
                    most_active_user = User.objects.get(id=most_active_user_id)
                    org = Organization.objects.filter(owner=most_active_user).first()
                    # Also set the created_by field
                    client.created_by = most_active_user
                except (User.DoesNotExist, Organization.DoesNotExist):
                    pass
        
        # If still no organization, use the first admin user's organization
        if not org:
            admin_user = User.objects.filter(is_staff=True).first()
            if admin_user:
                org = Organization.objects.filter(owner=admin_user).first()
        
        # Assign the client to the organization if found
        if org:
            client.organization = org
            client.save()
        else:
            unassigned_clients.append(client.id)
        
        if i % 10 == 0 or i == total_clients:
            print(f"Assigned {i}/{total_clients} clients to organizations")
    
    # Report on unassigned clients
    if unassigned_clients:
        print(f"Warning: {len(unassigned_clients)} clients could not be assigned to any organization")
        print(f"Unassigned client IDs: {unassigned_clients[:10]}...")


def revert_default_organizations(apps, schema_editor):
    """
    Remove the default organizations created for users.
    """
    Organization = apps.get_model('organizations', 'Organization')
    # We won't delete organizations that might have been created manually after this migration
    # This is just a safeguard for reversing the migration during development
    print("Reverting default organizations is a no-op to preserve data integrity")


class Migration(migrations.Migration):

    dependencies = [
        ('organizations', '0002_create_system_roles'),
        ('seo_manager', '0024_client_created_by_client_organization'),
    ]

    operations = [
        migrations.RunPython(create_default_organizations, revert_default_organizations),
        migrations.RunPython(assign_clients_to_organizations, revert_default_organizations),
    ]
