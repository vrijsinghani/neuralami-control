# Generated by Django 5.1.6 on 2025-03-14 20:13

from django.db import migrations
import logging

logger = logging.getLogger(__name__)

def assign_organizations(apps, schema_editor):
    """
    Assign organization IDs to existing Research records
    based on the user who created them.
    """
    Research = apps.get_model('research', 'Research')
    User = apps.get_model('auth', 'User')
    Organization = apps.get_model('organizations', 'Organization')
    OrganizationMembership = apps.get_model('organizations', 'OrganizationMembership')
    
    # Count records that need updating
    records_to_update = Research.objects.filter(organization__isnull=True).count()
    logger.info(f"Found {records_to_update} Research records that need organization assignment")
    
    # Get all research records with null organization
    for research in Research.objects.filter(organization__isnull=True):
        try:
            # Try to find the organization for the user who created the research
            if research.user:
                # Find active organization for this user
                membership = OrganizationMembership.objects.filter(
                    user=research.user,
                    status='active'
                ).first()
                
                if membership:
                    # Assign this organization to the research
                    research.organization = membership.organization
                    research.save()
                    logger.info(f"Assigned organization '{membership.organization.name}' to Research {research.id}")
                else:
                    # No active membership found, try to find any organization
                    any_membership = OrganizationMembership.objects.filter(
                        user=research.user
                    ).first()
                    
                    if any_membership:
                        research.organization = any_membership.organization
                        research.save()
                        logger.info(f"Assigned organization '{any_membership.organization.name}' to Research {research.id} (non-active membership)")
                    else:
                        # User has no organization, try to find default organization
                        default_org = Organization.objects.first()
                        if default_org:
                            research.organization = default_org
                            research.save()
                            logger.info(f"Assigned default organization '{default_org.name}' to Research {research.id}")
                        else:
                            logger.warning(f"Could not assign organization to Research {research.id}, no organizations found")
            else:
                # Research has no user, assign to first organization
                default_org = Organization.objects.first()
                if default_org:
                    research.organization = default_org
                    research.save()
                    logger.info(f"Assigned default organization to Research {research.id} with no user")
                else:
                    logger.warning(f"Could not assign organization to Research {research.id}, no organizations found")
        except Exception as e:
            logger.error(f"Error assigning organization to Research {research.id}: {str(e)}")
    
    # Check if any research records still have null organization
    remaining = Research.objects.filter(organization__isnull=True).count()
    logger.info(f"Completed organization assignment, {remaining} records still have null organization")

def reverse_migration(apps, schema_editor):
    """
    Revert the organization assignments.
    """
    Research = apps.get_model('research', 'Research')
    Research.objects.all().update(organization=None)
    logger.info("Reverted organization assignments for all Research records")


class Migration(migrations.Migration):

    dependencies = [
        ('research', '0005_research_organization'),
        ('organizations', '0001_initial'),  # Make sure organizations app is migrated first
    ]

    operations = [
        migrations.RunPython(assign_organizations, reverse_migration),
    ]
