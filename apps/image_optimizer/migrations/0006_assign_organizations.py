# Generated by Django 5.1.6 on 2025-03-14 20:15

from django.db import migrations
import logging

logger = logging.getLogger(__name__)

def assign_organizations(apps, schema_editor):
    """
    Assign organization IDs to existing OptimizationJob and OptimizedImage records
    based on the user who created them.
    """
    OptimizationJob = apps.get_model('image_optimizer', 'OptimizationJob')
    OptimizedImage = apps.get_model('image_optimizer', 'OptimizedImage')
    User = apps.get_model('auth', 'User')
    Organization = apps.get_model('organizations', 'Organization')
    OrganizationMembership = apps.get_model('organizations', 'OrganizationMembership')
    
    # First, update all optimization jobs
    jobs_to_update = OptimizationJob.objects.filter(organization__isnull=True).count()
    logger.info(f"Found {jobs_to_update} OptimizationJob records that need organization assignment")
    
    for job in OptimizationJob.objects.filter(organization__isnull=True):
        try:
            # Try to find the organization for the user who created the job
            if job.user:
                # Find active organization for this user
                membership = OrganizationMembership.objects.filter(
                    user=job.user,
                    status='active'
                ).first()
                
                if membership:
                    # Assign this organization to the job
                    job.organization = membership.organization
                    job.save()
                    logger.info(f"Assigned organization '{membership.organization.name}' to OptimizationJob {job.id}")
                else:
                    # No active membership found, try to find any organization
                    any_membership = OrganizationMembership.objects.filter(
                        user=job.user
                    ).first()
                    
                    if any_membership:
                        job.organization = any_membership.organization
                        job.save()
                        logger.info(f"Assigned organization '{any_membership.organization.name}' to OptimizationJob {job.id} (non-active membership)")
                    else:
                        # User has no organization, try to find default organization
                        default_org = Organization.objects.first()
                        if default_org:
                            job.organization = default_org
                            job.save()
                            logger.info(f"Assigned default organization '{default_org.name}' to OptimizationJob {job.id}")
                        else:
                            logger.warning(f"Could not assign organization to OptimizationJob {job.id}, no organizations found")
            else:
                # Job has no user, assign to first organization
                default_org = Organization.objects.first()
                if default_org:
                    job.organization = default_org
                    job.save()
                    logger.info(f"Assigned default organization to OptimizationJob {job.id} with no user")
                else:
                    logger.warning(f"Could not assign organization to OptimizationJob {job.id}, no organizations found")
        except Exception as e:
            logger.error(f"Error assigning organization to OptimizationJob {job.id}: {str(e)}")
    
    # Next, update all optimized images
    images_to_update = OptimizedImage.objects.filter(organization__isnull=True).count()
    logger.info(f"Found {images_to_update} OptimizedImage records that need organization assignment")
    
    for image in OptimizedImage.objects.filter(organization__isnull=True):
        try:
            # First, try to use the job's organization if available
            if image.job and image.job.organization_id:
                image.organization = image.job.organization
                image.save()
                logger.info(f"Assigned organization from job to OptimizedImage {image.id}")
                continue
                
            # If no job or job has no organization, try to find the organization for the user
            if image.user:
                # Find active organization for this user
                membership = OrganizationMembership.objects.filter(
                    user=image.user,
                    status='active'
                ).first()
                
                if membership:
                    # Assign this organization to the image
                    image.organization = membership.organization
                    image.save()
                    logger.info(f"Assigned organization '{membership.organization.name}' to OptimizedImage {image.id}")
                else:
                    # No active membership found, try to find any organization
                    any_membership = OrganizationMembership.objects.filter(
                        user=image.user
                    ).first()
                    
                    if any_membership:
                        image.organization = any_membership.organization
                        image.save()
                        logger.info(f"Assigned organization '{any_membership.organization.name}' to OptimizedImage {image.id} (non-active membership)")
                    else:
                        # User has no organization, try to find default organization
                        default_org = Organization.objects.first()
                        if default_org:
                            image.organization = default_org
                            image.save()
                            logger.info(f"Assigned default organization '{default_org.name}' to OptimizedImage {image.id}")
                        else:
                            logger.warning(f"Could not assign organization to OptimizedImage {image.id}, no organizations found")
            else:
                # Image has no user, assign to first organization
                default_org = Organization.objects.first()
                if default_org:
                    image.organization = default_org
                    image.save()
                    logger.info(f"Assigned default organization to OptimizedImage {image.id} with no user")
                else:
                    logger.warning(f"Could not assign organization to OptimizedImage {image.id}, no organizations found")
        except Exception as e:
            logger.error(f"Error assigning organization to OptimizedImage {image.id}: {str(e)}")
    
    # Check remaining records with null organization
    jobs_remaining = OptimizationJob.objects.filter(organization__isnull=True).count()
    images_remaining = OptimizedImage.objects.filter(organization__isnull=True).count()
    logger.info(f"Completed organization assignment, {jobs_remaining} jobs and {images_remaining} images still have null organization")

def reverse_migration(apps, schema_editor):
    """
    Revert the organization assignments.
    """
    OptimizationJob = apps.get_model('image_optimizer', 'OptimizationJob')
    OptimizedImage = apps.get_model('image_optimizer', 'OptimizedImage')
    
    OptimizationJob.objects.all().update(organization=None)
    OptimizedImage.objects.all().update(organization=None)
    logger.info("Reverted organization assignments for all OptimizationJob and OptimizedImage records")


class Migration(migrations.Migration):

    dependencies = [
        ('image_optimizer', '0005_optimizationjob_organization_and_more'),
        ('organizations', '0001_initial'),  # Make sure organizations app is migrated first
    ]

    operations = [
        migrations.RunPython(assign_organizations, reverse_migration),
    ]
