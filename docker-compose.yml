version: "3.9"
services:
  neuralami:
    container_name: neuralami
    build: .
    networks:
      - db_network
      - web_network
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    restart: always
    environment:
      - APP_PORT=${APP_PORT:-3010}
    ports:
      - "${APP_PORT:-3010}:${APP_PORT:-3010}"

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - db_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  celery_worker:
    container_name: celery_worker
    build:
      context: .
      dockerfile: worker/Dockerfile
    volumes:
      - .:/app
    env_file:
      - .env
    networks:
      - db_network
    environment:
      DJANGO_SETTINGS_MODULE: "core.settings"
      PYTHONPATH: /app
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    command: celery -A apps.tasks worker -l info
    depends_on:
      neuralami:
        condition: service_started
      redis:
        condition: service_healthy
    restart: always

  celery_beat:
    container_name: celery_beat
    build:
      context: .
      dockerfile: worker/Dockerfile
    volumes:
      - .:/app
    env_file:
      - .env
    networks:
      - db_network
    environment:
      DJANGO_SETTINGS_MODULE: "core.settings"
      PYTHONPATH: /app
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    command: celery -A apps.tasks beat -l info
    depends_on:
      redis:
        condition: service_healthy
    restart: always

networks:
  db_network:
    driver: bridge
  web_network:
    driver: bridge
