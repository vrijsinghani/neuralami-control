# Django, LangChain, CrewAI, Bootstrap Development Best Practices

## Core Architectural Principles

### Modular Design Philosophy
- **Separation of Concerns**: Strictly divide logic between models, views, services, and agents
- **Composition over Inheritance**: Favor functional composition in agent design
- **Declarative Configuration**: Use configuration-driven approaches for model creation and views

## Django Structural Guidelines

### Project Architecture
```python
project_root/
├── core/
│   ├── settings/
│   │   ├── base.py
│   │   ├── local.py
│   │   └── production.py
├── apps/
│   ├── users/
│   ├── agents/
│   └── integrations/
├── services/
│   ├── llm_services.py
│   └── agent_orchestration.py
└── utils/
    ├── validators.py
    └── decorators.py
```

### Model Design Principles
- Use abstract base classes for common functionality
- Implement rich model methods
- Leverage Django's `@property` for computed fields

```python
class BaseAgentModel(models.Model):
    name = models.CharField(max_length=255)
    is_active = models.BooleanField(default=True)
    
    @property
    def is_configurable(self):
        return self.configuration is not None
    
    class Meta:
        abstract = True
```



### Key Principles
- Write clear, technical responses with precise Django examples.
- Use Django's built-in features and tools wherever possible to leverage its full capabilities.
- Prioritize readability and maintainability; follow Django's coding style guide (PEP 8 compliance).
- Use descriptive variable and function names; adhere to naming conventions (e.g., lowercase with underscores for functions and variables).
- Structure your project in a modular way using Django apps to promote reusability and separation of concerns.

### Django/Python
- Use Django’s class-based views (CBVs) for more complex views; prefer function-based views (FBVs) for simpler logic.
- Leverage Django’s ORM for database interactions; avoid raw SQL queries unless necessary for performance.
- Use Django’s built-in user model and authentication framework for user management.
- Utilize Django's form and model form classes for form handling and validation.
- Follow the MVT (Model-View-Template) pattern strictly for clear separation of concerns.
- Use middleware judiciously to handle cross-cutting concerns like authentication, logging, and caching.

### Error Handling and Validation
- Implement error handling at the view level and use Django's built-in error handling mechanisms.
- Use Django's validation framework to validate form and model data.
- Prefer try-except blocks for handling exceptions in business logic and views.
- Customize error pages (e.g., 404, 500) to improve user experience and provide helpful information.
- Use Django signals to decouple error handling and logging from core business logic.

### Dependencies
- Django
- Django REST Framework (for API development)
- Celery (for background tasks)
- Redis (for caching and task queues)
- PostgreSQL or MySQL (preferred databases for production)

### Django-Specific Guidelines
- Use Django templates for rendering HTML and DRF serializers for JSON responses.
- Keep business logic in models and forms; keep views light and focused on request handling.
- Use Django's URL dispatcher (urls.py) to define clear and RESTful URL patterns.
- Apply Django's security best practices (e.g., CSRF protection, SQL injection protection, XSS prevention).
- Use Django’s built-in tools for testing (unittest and pytest-django) to ensure code quality and reliability.
- Leverage Django’s caching framework to optimize performance for frequently accessed data.
- Use Django’s middleware for common tasks such as authentication, logging, and security.

### Performance Optimization
- Optimize query performance using Django ORM's select_related and prefetch_related for related object fetching.
- Use Django’s cache framework with backend support (e.g., Redis or Memcached) to reduce database load.
- Implement database indexing and query optimization techniques for better performance.
- Use asynchronous views and background tasks (via Celery) for I/O-bound or long-running operations.
- Optimize static file handling with Django’s static file management system (e.g., WhiteNoise or CDN integration).

### Key Conventions
1. Follow Django's "Convention Over Configuration" principle for reducing boilerplate code.
2. Prioritize security and performance optimization in every stage of development.
3. Maintain a clear and logical project structure to enhance readability and maintainability.

Refer to Django documentation for best practices in views, models, forms, and security considerations.

## Security & Performance Considerations

### Authentication
- Use Django's built-in authentication
- Implement role-based access control
- Utilize token-based authentication for API

## Anti-Patterns to Avoid
- Monolithic agent designs
- Hardcoded configurations
- Lack of error handling
- Synchronous long-running operations
- Tool specific implementations

## Use these components for UI design when appropriate
Bootstrap 5 - Open source front end framework
noUISlider - JavaScript Range Slider
Popper.js - Kickass library used to manage poppers
Flatpickr - Useful library used to select date
Choices JS - A nice plugin that select elements with intuitive multiselection and searching but also for managing tags.
CountUp JS - A dependency-free, lightweight JavaScript class that can be used to quickly create animations that display numerical data in a more interesting way.
Charts Js - Simple yet flexible JavaScript charting for designers & developers
FullCalendar - Full-sized drag & drop event calendar
Dropzone - An open source library that provides drag’n’drop file uploads with image previews.
Datatables - DataTables but in Vanilla ES2018 JS
jKanban - Pure agnostic Javascript plugin for Kanban boards
PhotoSwipe - JavaScript image gallery for mobile and desktop, modular, framework independent
Quill - A free, open source WYSIWYG editor built for the modern web
Sweet Alerts - A beautiful, responsive, customisable, accessible replacement for Javascript’s popup boxes.
three.js - JavaScript 3D library
Wizard - Animated Multi-step form for Bootstrap