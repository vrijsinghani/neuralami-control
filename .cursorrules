Complexity kills maintainability, err on the side of simplicity.  write for humans.
Use logging to debug and trace the code. (not print statements)
Resolve errors at the source of the error, not the symptom.
When fixing bugs/errors from logs/resolve the root cause of the error, don't just fix the symptom, and don't make the code more complex, and don't refactor other code, be focused on the error and the solution.
settings.py is the main settings file, and it should be the only place to change settings it is located in core/settings.py

TECH STACK & ARCHITECTURE
- Python/Django backend with Celery for async tasks
- Postgres database
- Frontend: JavaScript, Bootstrap, DataTables, ChartJS, SweetAlert
- Key libraries: CrewAI, Langchain, aiohttp, beautifulsoup4, spider-rs
- WebSocket support for real-time communication

KEY PATTERNS & EXTENSIBILITY
- Async operations with asyncio/Celery
- Real-time updates via WebSockets
- Modular tool/agent architecture
- Pydantic validation
- CrewAI workflow orchestration
- Standardized output formatting patterns
- WebSocket-based progress tracking
- Tool execution monitoring

IMPLEMENTATION PATTERNS
- Modular tools inherit from base classes
- Async tasks use Celery
- Real-time updates use WebSockets
- Data validation with Pydantic
- Frontend uses standard Bootstrap/JS
- Tool outputs follow standard formatting
- WebSocket consumers handle real-time communication
- Structured error handling and logging

Best Practices
- Use Django's related_name for reverse lookups
- Implement proper ordering in CrewTask
- Maintain unique constraints for agent-tool pairs
- Follow CrewAI patterns for agent orchestration
- Keep tool configurations modular and reusable
- Use standard formatters for tool outputs
- Implement proper WebSocket error handling
- Follow established logging patterns

Error Handling
- Validate tool assignments before execution
- Check LLM availability and configurations
- Handle delegation failures gracefully
- Log important agent state changes
- Implement WebSocket connection error handling
- Use standardized error response formats
- Maintain proper error logging