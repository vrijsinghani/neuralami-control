"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from django.utils.translation import gettext_lazy as _
from django.contrib import messages
from dotenv import load_dotenv
from str2bool       import str2bool 
import os, random, string, sys
import logging
from botocore.config import Config
import mimetypes
import json

# Add this near the top of the file, after the imports
mimetypes.add_type("application/javascript", ".js", True)
mimetypes.add_type("text/javascript", ".js", True)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ENV_FILE = BASE_DIR / '.env'
load_dotenv(dotenv_path=ENV_FILE)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    SECRET_KEY = ''.join(random.choice( string.ascii_lowercase  ) for i in range( 32 ))

# Enable/Disable DEBUG Mode
DEBUG = str2bool(os.getenv('DEBUG'))

# Add localhost to ALLOWED_HOSTS for Docker health checks
APP_DOMAIN = os.getenv('APP_DOMAIN', '')
ALLOWED_HOSTS =  [domain.strip() for domain in APP_DOMAIN.split(',') if domain.strip()]
ALLOWED_HOSTS.extend(['localhost', '127.0.0.1','localhost:3010'])

# Used by DEBUG-Toolbar 
INTERNAL_IPS = [
    "127.0.0.1",
]

# Add here your deployment HOSTS
CSRF_TRUSTED_ORIGINS = [f'https://{domain}' for domain in os.getenv('APP_DOMAIN', '').split(',')]
CSRF_TRUSTED_ORIGINS.extend([f'http://{domain}' for domain in os.getenv('APP_DOMAIN', '').split(',')])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core.apps.CoreConfig',
    'django_celery_results',
    'debug_toolbar',
    'django_quill',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',

    'rest_framework',
    'rest_framework.authtoken',
    'drf_spectacular',
    'django_api_gen',
    'channels',

    'home',
    'apps.api',
    'apps.common.apps.CommonConfig',
    'apps.file_manager',
    'apps.tasks',
    'apps.users',
    'apps.seo_manager.apps.SeoManagerConfig',
    'apps.crawl_website.apps.CrawlWebsiteConfig',
    'apps.agents.apps.AgentsConfig',  
    'apps.seo_audit.apps.SEOAuditConfig',
    'apps.image_optimizer.apps.ImageOptimizerConfig',
    'storages',
    'apps.research.apps.ResearchConfig',
    'apps.utilities.apps.UtilitiesConfig',
    'apps.organizations.apps.OrganizationsConfig',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'apps.organizations.middleware.OrganizationMiddleware',
    'apps.organizations.middleware.OrganizationSecurityMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Required for allauth
    'allauth.account.middleware.AccountMiddleware',
    # Required for debug toolbar
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'apps.seo_manager.middleware.GoogleAuthMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
            BASE_DIR / 'apps' / 'seo_manager' / 'templates',
            BASE_DIR / 'apps' / 'seo_audit' / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.version_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'
ASGI_APPLICATION = 'core.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(os.getenv('REDIS_HOST', 'redis'), 6379)],
        },
    },
}


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DB_ENGINE   = os.getenv('DB_ENGINE')
DB_USERNAME = os.getenv('DB_USERNAME')
DB_PASS     = os.getenv('DB_PASS')
DB_HOST     = os.getenv('DB_HOST')
DB_PORT     = os.getenv('DB_PORT')
DB_NAME     = os.getenv('DB_NAME')

if DB_ENGINE and DB_NAME and DB_USERNAME:
    DATABASES = { 
      'default': {
        'ENGINE'  : 'django.db.backends.' + DB_ENGINE, 
        'NAME'    : DB_NAME,
        'USER'    : DB_USERNAME,
        'PASSWORD': DB_PASS,
        'HOST'    : DB_HOST,
        'PORT'    : DB_PORT,
        }, 
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'db.sqlite3',
        }
    }
# LiteLLM Logs Database
LITELLM_DB_ENGINE   = os.getenv('LITELLM_DB_ENGINE')
LITELLM_DB_NAME     = os.getenv('LITELLM_DB_NAME')
LITELLM_DB_USERNAME = os.getenv('LITELLM_DB_USERNAME')
LITELLM_DB_PASS     = os.getenv('LITELLM_DB_PASS')
LITELLM_DB_HOST     = os.getenv('LITELLM_DB_HOST')
LITELLM_DB_PORT     = os.getenv('LITELLM_DB_PORT')

# Add litellm_logs database if credentials are provided
if LITELLM_DB_NAME and LITELLM_DB_USERNAME:
    DATABASES['litellm_logs'] = {
        'ENGINE'  : 'django.db.backends.' + LITELLM_DB_ENGINE,
        'NAME'    : LITELLM_DB_NAME,
        'USER'    : LITELLM_DB_USERNAME,
        'PASSWORD': LITELLM_DB_PASS,
        'HOST'    : LITELLM_DB_HOST,
        'PORT'    : LITELLM_DB_PORT,
    }
STAGING_DB_ENGINE = os.getenv('STAGING_DB_ENGINE', 'postgresql')
STAGING_DB_NAME = os.getenv('STAGING_DB_NAME')
STAGING_DB_USERNAME = os.getenv('STAGING_DB_USERNAME')
STAGING_DB_PASS = os.getenv('STAGING_DB_PASS')
STAGING_DB_HOST = os.getenv('STAGING_DB_HOST')
STAGING_DB_PORT = os.getenv('STAGING_DB_PORT', '5432')

if STAGING_DB_NAME and STAGING_DB_USERNAME:
  DATABASES['staging'] = {
      'ENGINE'  : 'django.db.backends.' + STAGING_DB_ENGINE,
      'NAME'    : STAGING_DB_NAME,
      'USER'    : STAGING_DB_USERNAME,
      'PASSWORD': STAGING_DB_PASS,
      'HOST'    : STAGING_DB_HOST,
      'PORT'    : STAGING_DB_PORT,
  }
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGES = [
    ('en', _('English (US)')),
    ('de', _('Deutsch')),
    ('it', _('Italiano')),
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static'),
    os.path.join(BASE_DIR, "apps/agents/static"),
    os.path.join(BASE_DIR, "apps/seo_manager/static"),
    os.path.join(BASE_DIR, "apps/seo_audit/static"),
    os.path.join(BASE_DIR, "apps/common/static"),
    os.path.join(BASE_DIR, "apps/image_optimizer/static"),
]

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'clean': {
            'format': '%(asctime)s [%(levelname)s] %(name)s.%(funcName)s: %(message)s',
            'datefmt': '%H:%M:%S'
        },
        'minimal': {
            'format': '%(asctime)s [%(funcName)s] %(message)s'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'clean',
            'level': 'ERROR' if DEBUG else 'INFO',  # Only show errors in console when not debugging
        },
        'minimal_console': {
            'class': 'logging.StreamHandler',
            'formatter': 'minimal',
            'level': 'ERROR' if DEBUG else 'INFO',  # Only show errors in console when not debugging
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'logs/django.log',
            'formatter': 'clean',
            'level': 'DEBUG',  # Always log INFO and above to file
        }
    },
    'loggers': {
        # Root logger
        '': {
            'handlers': ['file'],  # Only log to file by default
            'level': 'WARNING',
            'propagate': True,
        },
        # Django's built-in logging
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': False,
        },
        # Celery logging
        'celery': {
            'handlers': ['file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'celery.worker.strategy': {
            'level': 'ERROR',
        },
        'celery.worker.consumer': {
            'level': 'ERROR',
        },
        'celery.app.trace': {
            'level': 'ERROR',
        },
        # Your apps logging
        'apps': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # Specific modules you want to see more from
        'apps.agents': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'apps.seo_manager': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'apps.seo_audit': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'core.settings': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # Silence noisy modules
        'httpx': {
            'level': 'ERROR',
        },
        'httpcore': {
            'level': 'ERROR',
        },
        'ForkPoolWorker': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'uvicorn.access': {
            'level': 'ERROR',
            'propagate': False,
        },
    },
}


logger = logging.getLogger(__name__)

logger.warning(f"ENV_FILE: {ENV_FILE}")

# Storage Configuration
STORAGE_BACKEND = os.getenv('STORAGE_BACKEND', '')  # Options: 'B2', 'GCS', 'S3', 'AZURE', 'MINIO'

if STORAGE_BACKEND == 'B2':
    DEFAULT_FILE_STORAGE = 'core.storage.B2Storage'
    B2_APPLICATION_KEY_ID = os.environ['B2_APPLICATION_KEY_ID']
    B2_APPLICATION_KEY = os.environ['B2_APPLICATION_KEY']
    B2_BUCKET_NAME = os.environ['B2_BUCKET_NAME']
    logger.info(f"Using B2 Storage with bucket: {B2_BUCKET_NAME}")

elif STORAGE_BACKEND == 'GCS':
    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    GS_BUCKET_NAME = os.environ['GS_BUCKET_NAME']
    GS_CREDENTIALS = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS')
    GS_PROJECT_ID = os.environ.get('GS_PROJECT_ID')
    logger.info(f"Using Google Cloud Storage with bucket: {GS_BUCKET_NAME}")

elif STORAGE_BACKEND == 'S3':
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
    AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']
    AWS_STORAGE_BUCKET_NAME = os.environ['AWS_STORAGE_BUCKET_NAME']
    AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME', 'us-east-1')
    AWS_S3_CUSTOM_DOMAIN = os.environ.get('AWS_S3_CUSTOM_DOMAIN')
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    logger.info(f"Using AWS S3 Storage with bucket: {AWS_STORAGE_BUCKET_NAME}")

elif STORAGE_BACKEND == 'AZURE':
    DEFAULT_FILE_STORAGE = 'storages.backends.azure_storage.AzureStorage'
    AZURE_ACCOUNT_NAME = os.environ['AZURE_ACCOUNT_NAME']
    AZURE_ACCOUNT_KEY = os.environ['AZURE_ACCOUNT_KEY']
    AZURE_CONTAINER = os.environ['AZURE_CONTAINER']
    AZURE_SSL = True
    logger.info(f"Using Azure Storage with container: {AZURE_CONTAINER}")

elif STORAGE_BACKEND == 'MINIO':
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_ACCESS_KEY_ID = os.environ['MINIO_ACCESS_KEY']
    AWS_SECRET_ACCESS_KEY = os.environ['MINIO_SECRET_KEY']
    AWS_STORAGE_BUCKET_NAME = os.environ['MINIO_BUCKET_NAME']
    AWS_S3_ENDPOINT_URL = os.environ['MINIO_ENDPOINT']
    AWS_S3_USE_SSL = str2bool(os.getenv('MINIO_USE_SSL', 'True'))
    AWS_S3_VERIFY = str2bool(os.getenv('MINIO_VERIFY_SSL', 'True'))
    AWS_S3_MAX_POOL_CONNECTIONS = int(os.getenv('MINIO_MAX_CONNECTIONS', '30'))
    
    # Add these settings for MinIO compatibility
    AWS_S3_ADDRESSING_STYLE = 'path'
    AWS_S3_SIGNATURE_VERSION = 's3v4'
    AWS_S3_FILE_OVERWRITE = False
    AWS_QUERYSTRING_AUTH = False
    AWS_DEFAULT_ACL = None
    
    # Configure boto3 to use these settings
    AWS_S3_CONFIG = Config(
        s3={'addressing_style': 'path'},
        signature_version='s3v4',
        retries={'max_attempts': 3},
        max_pool_connections=AWS_S3_MAX_POOL_CONNECTIONS
    )
    
    logger.info(f"Using MinIO Storage with bucket: {AWS_STORAGE_BUCKET_NAME} at {AWS_S3_ENDPOINT_URL}")

else:
    raise ValueError(f"Invalid STORAGE_BACKEND: {STORAGE_BACKEND}")

STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# Media Configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGIN_REDIRECT_URL = '/'
LOGIN_URL = '/accounts/login/illustration-login/'

# AllAuth
ACCOUNT_EMAIL_VERIFICATION =  os.getenv('ACCOUNT_EMAIL_VERIFICATION', 'none')
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_UNIQUE_EMAIL = True

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP':{
            'client_id': os.getenv('GOOGLE_CLIENT_ID', default=""),
            'secret': os.getenv('GOOGLE_SECRET_KEY', default=""),
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'github': {
        'APP':{
            'client_id': os.getenv('GITHUB_CLINET_ID', default=""),
            'secret': os.getenv('GITHUB_SECRET_KEY', default=""),
        }
    }
}

GOOGLE_CLIENT_SECRETS_FILE = os.getenv('GOOGLE_CLIENT_SECRETS_FILE')
GOOGLE_OAUTH_REDIRECT_URI = os.getenv('GOOGLE_OAUTH_REDIRECT_URI', 'http://localhost:8000/seo/google/oauth/callback/')
SERVICE_ACCOUNT_FILE = os.getenv('SERVICE_ACCOUNT_FILE', default="/secrets/service-account.json")
# ### Async Tasks (Celery) Settings ###

CELERY_SCRIPTS_DIR        = os.path.join(BASE_DIR, "tasks_scripts" )

CELERY_LOGS_URL           = "/tasks_logs/"
CELERY_LOGS_DIR           = os.path.join(BASE_DIR, "tasks_logs"    )

CELERY_BROKER_URL         = os.getenv('CELERY_BROKER', 'redis://redis:6379')
#CELERY_RESULT_BACKEND     = os.environ.get("CELERY_BROKER", "redis://redis:6379")

CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT    = 8 * 60 * 60  # 8 hours
CELERY_TASK_SOFT_TIME_LIMIT = 7 * 60 * 60  # 7 hours - gives time for graceful shutdown
CELERY_CACHE_BACKEND      = "django-cache"
CELERY_RESULT_BACKEND     = "django-db"
CELERY_RESULT_EXTENDED    = True
CELERY_RESULT_EXPIRES     = 60*60*24*30 # Results expire after 1 month
CELERY_ACCEPT_CONTENT     = ["json"]
CELERY_TASK_SERIALIZER    = 'json'
CELERY_RESULT_SERIALIZER  = 'json'
########################################

X_FRAME_OPTIONS = 'SAMEORIGIN'

# ### API-GENERATOR Settings ###
API_GENERATOR = {
    'agents'   : "apps.agents.models.Agent",
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_THROTTLE_RATES': {
        'user': '10000/day',    # Default user rate
        'anon': '10/day',     # Default anonymous rate
    },
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
}
########################################

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'
DEFAULT_HTTP_PROTOCOL='https'
HTTPS=True
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
NEURALAMI_API_TOKEN = os.getenv('NEURALAMI_API_TOKEN')
API_BASE_URL = os.getenv('API_BASE_URL')
LITELLM_MASTER_KEY= os.getenv('LITELLM_MASTER_KEY')
SERPAPI_API_KEY=os.getenv('SERPAPI_API_KEY')
OPENAI_BASE_URL=os.getenv('API_BASE_URL')
ALPHA_VANTAGE_API_KEY=os.getenv('ALPHA_VANTAGE_API_KEY')
DATAFORSEO_EMAIL = os.getenv('DATAFORSEO_EMAIL')
DATAFORSEO_PASSWORD = os.getenv('DATAFORSEO_PASSWORD')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
PERPLEXITYAI_API_KEY = os.getenv('PERPLEXITYAI_API_KEY')
OPENAI_API_KEY = os.getenv('LITELLM_MASTER_KEY')

GENERAL_MODEL=os.getenv('GENERAL_MODEL')
TEXT_MODEL=os.getenv('TEXT_MODEL')
CODING_MODEL=os.getenv('CODING_MODEL')
SUMMARIZER=os.getenv('SUMMARIZER')
SUMMARIZER_MAX_TOKENS=(os.getenv('SUMMARIZER_MAX_TOKENS'))
BUSINESS_CREDIBILITY_MODEL=os.getenv('BUSINESS_CREDIBILITY_MODEL')

CRAWL4AI_URL=os.getenv('CRAWL4AI_URL')
CRAWL4AI_API_KEY=os.getenv('CRAWL4AI_API_KEY')
CRAWL4AI_TIMEOUT = 300  # 5 minutes
CRAWL4AI_CRAWLER_PARAMS = json.loads(os.getenv('CRAWL4AI_CRAWLER_PARAMS', '{}'))
CRAWL4AI_EXTRA_PARAMS = {
    "word_count_threshold": 10,
    "only_text": True,
    "bypass_cache": False,
    "process_iframes": True,
    "excluded_tags": ['nav', 'aside', 'footer'],
    "exclude_external_links": True,
    "exclude_social_media_links": True
} 

EMAIL_ADDRESS = os.getenv('EMAIL_ADDRESS')
COMPANY_NAME = os.getenv('COMPANY_NAME')

BROWSERLESS_API_KEY=os.getenv('BROWSERLESS_API_KEY')
BROWSERLESS_BASE_URL=os.getenv('BROWSERLESS_BASE_URL')
DOWNLOAD_FOLDER = os.getenv('DOWNLOAD_FOLDER')
CREWAI_DISABLE_LITELLM=os.getenv('CREWAI_DISABLE_LITELLM')

# Slack Integration Settings
DSLACK_BOT_TOKEN = os.getenv('DSLACK_BOT_TOKEN')
DSLACK_APP_TOKEN = os.getenv('DSLACK_APP_TOKEN')
DSLACK_CLIENT_ID = os.getenv('DSLACK_CLIENT_ID')
DSLACK_CLIENT_SECRET = os.getenv('DSLACK_CLIENT_SECRET')
SLACK_NOTIFICATION_CHANNEL = os.getenv('SLACK_NOTIFICATION_CHANNEL', '#bot-notifications')
PAGESPEED_API_KEY = os.getenv('PAGESPEED_API_KEY')
SCRAPPER_HOST=os.getenv('SCRAPPER_HOST')


# Make sure storages is in INSTALLED_APPS
if 'storages' not in INSTALLED_APPS:
    INSTALLED_APPS.append('storages')

# File storage settings
STORAGES = {
    "default": {
        "BACKEND": DEFAULT_FILE_STORAGE,
        "OPTIONS": {
            "bucket_name": os.getenv('AWS_STORAGE_BUCKET_NAME') or os.getenv('GS_BUCKET_NAME') or os.getenv('AZURE_CONTAINER') or os.getenv('MINIO_BUCKET_NAME'),
            "default_acl": None,
            "file_overwrite": False,
        },
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",  # Use local storage for static files
    },    
}

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.environ.get("CELERY_BROKER", "redis://redis:6379/0"),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# Add this to silence the URLField warning and use https as default scheme
FORMS_URLFIELD_ASSUME_HTTPS = True

# Add this to your settings.py
#VERSION = '1.0.0'  # You'd update this manually when releasing

try:
    from core.version import VERSION, COMMIT
except ImportError:
    VERSION = '0.0.0'
    COMMIT = 'dev'
