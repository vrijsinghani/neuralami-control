1. use restart.sh to restart the server
2. always deal with tools agnostically and their outputs
3. make focused changes to deal with the issue at hand, do not arbitraily change unrelated code
4. if a better refactor is possible, propose it prior to making edits
5. you have a tendency to guess at solutions and hack till you find the right one.  don't do that.  be systematic and critical of your thoughts.

### Cursor Rules for WorkSphere Application Refactoring Project

**Project Context:**
- Application: WorkSphere
- Refactoring Goal: Modernize frontend to React.js, unify backend messaging and execution.
- Backend Framework: Django, Django Channels, Redis
- Frontend Framework: React.js (Target)
- Current Frontend: Mixed Javascript components, Django templates
- Communication: WebSockets, potentially Slack
- Testing Frameworks: Jest/React Testing Library for frontend, Django testing framework for backend
- CI/CD: (Existing CI/CD pipeline to be leveraged and enhanced)

**1. Coding Standards (MUST)**
- **MUST:** Use Black for Python backend code formatting.
- **MUST:** For Python backend, follow PEP 8 style guidelines.
- **MUST:** For frontend development:
  - Use TypeScript with strict mode (`"strict": true`)
  - Use Prettier with default settings for code formatting
  - Write functional React components
  - Follow React hooks rules
  - Maintain clear component boundaries
- **MUST:** Use TypeScript for all new React components.

[Rest of the file remains unchanged...]
