This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-09T18:50:12.874Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.github/
  workflows/
    cd.yml
backend/
  functions/
    src/
      cloud-functions/
        adaptive-crawler.ts
        crawler.ts
        data-crunching.ts
        searcher.ts
      db/
        adaptive-crawl-task.ts
        crawled.ts
        domain-blockade.ts
        domain-profile.ts
        img-alt.ts
        pdf.ts
        searched.ts
      dto/
        adaptive-crawler-options.ts
        scrapping-options.ts
      services/
        alt-text.ts
        brave-search.ts
        curl.ts
        geoip.ts
        jsdom.ts
        lm.ts
        pdf-extract.ts
        puppeteer.ts
        snapshot-formatter.ts
      stand-alone/
        crawl.ts
        search.ts
      utils/
        get-function-url.ts
        markdown.ts
        misc.ts
        tailwind-classes.ts
      fetch.d.ts
      index.ts
      types.d.ts
    .dockerignore
    .editorconfig
    .puppeteerrc.cjs
    Dockerfile
    integrity-check.cjs
    package.json
    tsconfig.json
  .firebaserc
  .gitignore
  firebase.json
  firestore.indexes.json
  firestore.rules
  storage.rules
.gitignore
.gitmodules
LICENSE
package.json
README.md

================================================================
Repository Files
================================================================

================
File: .github/workflows/cd.yml
================
run-name: Build push and deploy (CD)
on:
  push:
    branches:
      - main
      - ci-debug
    tags:
      - '*'

jobs:
  build-and-push-to-gcr:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.ref_type == 'branch' && github.ref }}
      cancel-in-progress: true
    defaults:
      run:
        working-directory: backend/functions
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true
          token: ${{ secrets.THINAPPS_SHARED_READ_TOKEN }}
      - uses: 'google-github-actions/auth@v2'
        with:
           credentials_json: '${{ secrets.GCLOUD_SERVICE_ACCOUNT_SECRET_JSON }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
      - name: "Docker auth"
        run: |-
          gcloud auth configure-docker us-docker.pkg.dev --quiet
      - name: Set controller release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.12.0
          cache: npm
          cache-dependency-path: backend/functions/package-lock.json

      - name: npm install
        run: npm ci
      - name: get maxmind mmdb
        run: mkdir -p licensed && curl -o licensed/GeoLite2-City.mmdb https://github.com/P3TERX/GeoLite.mmdb/raw/download/GeoLite2-City.mmdb
      - name: build application
        run: npm run build
      - name: Set package version
        run: npm version --no-git-tag-version ${{ env.RELEASE_VERSION }}
        if: github.ref_type == 'tag'
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            us-docker.pkg.dev/reader-6b7dc/jina-reader/reader
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        id: container
        uses: docker/build-push-action@v6
        with:
          context: backend/functions
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Deploy CRAWL with Tag
        run: |
          gcloud run deploy crawl --image us-docker.pkg.dev/reader-6b7dc/jina-reader/reader@${{steps.container.outputs.imageid}} --tag ${{ env.RELEASE_VERSION }} --command '' --args build/stand-alone/crawl.js --region us-central1 --async --min-instances 0
      - name: Deploy SEARCH with Tag
        run: |
          gcloud run deploy search --image us-docker.pkg.dev/reader-6b7dc/jina-reader/reader@${{steps.container.outputs.imageid}} --tag ${{ env.RELEASE_VERSION }} --command '' --args build/stand-alone/search.js --region us-central1 --async --min-instances 0

================
File: backend/functions/src/cloud-functions/adaptive-crawler.ts
================
import {
    AssertionFailureError,
    assignTransferProtocolMeta,
    HashManager,
    ParamValidationError,
    RPCHost, RPCReflection,
} from 'civkit';
import { singleton } from 'tsyringe';
import { CloudHTTPv2, CloudTaskV2, Ctx, FirebaseStorageBucketControl, Logger, Param, RPCReflect } from '../shared';
import _ from 'lodash';
import { Request, Response } from 'express';
import { JinaEmbeddingsAuthDTO } from '../shared/dto/jina-embeddings-auth';
import robotsParser from 'robots-parser';
import { DOMParser } from '@xmldom/xmldom';

import { AdaptiveCrawlerOptions } from '../dto/adaptive-crawler-options';
import { CrawlerOptions } from '../dto/scrapping-options';
import { JinaEmbeddingsTokenAccount } from '../shared/db/jina-embeddings-token-account';
import { AdaptiveCrawlTask, AdaptiveCrawlTaskStatus } from '../db/adaptive-crawl-task';
import { getFunctions } from 'firebase-admin/functions';
import { getFunctionUrl } from '../utils/get-function-url';
import { Timestamp } from 'firebase-admin/firestore';

const md5Hasher = new HashManager('md5', 'hex');
const removeURLHash = (url: string) => {
    try {
        const o = new URL(url);
        o.hash = '';
        return o.toString();
    } catch (e) {
        return url;
    }
}

@singleton()
export class AdaptiveCrawlerHost extends RPCHost {
    logger = this.globalLogger.child({ service: this.constructor.name });
    // Actual cache storage (gcp buckets) exists for 7 days, so here we need to select a time < 7 days.
    cacheExpiry = 3 * 1000 * 60 * 60 * 24;

    static readonly __singleCrawlQueueName = 'singleCrawlQueue';

    constructor(
        protected globalLogger: Logger,
        protected firebaseObjectStorage: FirebaseStorageBucketControl,
    ) {
        super(...arguments);
    }

    override async init() {
        await this.dependencyReady();

        this.emit('ready');
    }

    @CloudHTTPv2({
        runtime: {
            memory: '1GiB',
            timeoutSeconds: 300,
            concurrency: 22,
        },
        tags: ['Crawler'],
        httpMethod: ['post', 'get'],
        returnType: [String],
    })
    async adaptiveCrawl(
        @RPCReflect() rpcReflect: RPCReflection,
        @Ctx() ctx: {
            req: Request,
            res: Response,
        },
        auth: JinaEmbeddingsAuthDTO,
        crawlerOptions: CrawlerOptions,
        adaptiveCrawlerOptions: AdaptiveCrawlerOptions,
    ) {
        this.logger.debug({
            adaptiveCrawlerOptions,
            crawlerOptions,
        });


        const uid = await auth.solveUID();
        const { useSitemap, maxPages } = adaptiveCrawlerOptions;

        let tmpUrl = ctx.req.url.slice(1)?.trim();
        if (!tmpUrl) {
            tmpUrl = crawlerOptions.url?.trim() ?? '';
        }
        const targetUrl = new URL(tmpUrl);

        if (!targetUrl) {
            const latestUser = uid ? await auth.assertUser() : undefined;
            if (!ctx.req.accepts('text/plain') && (ctx.req.accepts('text/json') || ctx.req.accepts('application/json'))) {
                return this.getIndex(latestUser);
            }

            return assignTransferProtocolMeta(`${this.getIndex(latestUser)}`,
                { contentType: 'text/plain', envelope: null }
            );
        }

        const meta = {
            targetUrl: targetUrl.toString(),
            useSitemap,
            maxPages,
        };

        const digest = md5Hasher.hash(JSON.stringify(meta));
        const shortDigest = Buffer.from(digest, 'hex').toString('base64url');
        const existing = await AdaptiveCrawlTask.fromFirestore(shortDigest);

        if (existing?.createdAt) {
            if (existing.createdAt.getTime() > Date.now() - this.cacheExpiry) {
                this.logger.info(`Cache hit for ${shortDigest}, created at ${existing.createdAt.toDateString()}`);
                return { taskId: shortDigest };
            } else {
                this.logger.info(`Cache expired for ${shortDigest}, created at ${existing.createdAt.toDateString()}`);
            }
        }

        await AdaptiveCrawlTask.COLLECTION.doc(shortDigest).set({
            _id: shortDigest,
            status: AdaptiveCrawlTaskStatus.PENDING,
            statusText: 'Pending',
            meta,
            createdAt: new Date(),
            urls: [],
            processed: {},
            failed: {},
        });

        let urls: string[] = [];
        if (useSitemap) {
            urls = await this.crawlUrlsFromSitemap(targetUrl, maxPages);
        }

        if (urls.length > 0) {
            await AdaptiveCrawlTask.COLLECTION.doc(shortDigest).update({
                status: AdaptiveCrawlTaskStatus.PROCESSING,
                statusText: `Processing 0/${urls.length}`,
                urls,
            });

            const promises = [];
            for (const url of urls) {
                promises.push(getFunctions().taskQueue(AdaptiveCrawlerHost.__singleCrawlQueueName).enqueue({
                    shortDigest, url, token: auth.bearerToken, meta
                }, {
                    dispatchDeadlineSeconds: 1800,
                    uri: await getFunctionUrl(AdaptiveCrawlerHost.__singleCrawlQueueName),
                }));
            };

            await Promise.all(promises);
        } else {
            meta.useSitemap = false;

            await AdaptiveCrawlTask.COLLECTION.doc(shortDigest).update({
                urls: [targetUrl.toString()],
            });

            await getFunctions().taskQueue(AdaptiveCrawlerHost.__singleCrawlQueueName).enqueue({
                shortDigest, url: targetUrl.toString(), token: auth.bearerToken, meta
            }, {
                dispatchDeadlineSeconds: 1800,
                uri: await getFunctionUrl(AdaptiveCrawlerHost.__singleCrawlQueueName),
            })
        }

        return { taskId: shortDigest };
    }

    @CloudHTTPv2({
        runtime: {
            memory: '1GiB',
            timeoutSeconds: 300,
            concurrency: 22,
        },
        tags: ['Crawler'],
        httpMethod: ['post', 'get'],
        returnType: AdaptiveCrawlTask,
    })
    async adaptiveCrawlStatus(
        @RPCReflect() rpcReflect: RPCReflection,
        @Ctx() ctx: {
            req: Request,
            res: Response,
        },
        auth: JinaEmbeddingsAuthDTO,
        @Param('taskId') taskId: string,
        @Param('urls') urls: string[] = [],
    ) {
        if (!taskId) {
            throw new ParamValidationError('taskId is required');
        }

        const state = await AdaptiveCrawlTask.fromFirestore(taskId);

        if (!state) {
            throw new AssertionFailureError('The task does not exist');
        }

        if (state?.createdAt && state.createdAt.getTime() < Date.now() - this.cacheExpiry) {
            throw new AssertionFailureError('The task has expired');
        }

        if (urls.length) {
            const promises = Object.entries(state?.processed ?? {}).map(async ([url, cachePath]) => {
                if (urls.includes(url)) {
                    const raw = await this.firebaseObjectStorage.downloadFile(cachePath);
                    state!.processed[url] = JSON.parse(raw.toString('utf-8'));
                }
            });

            await Promise.all(promises);
        }


        return state;
    }

    @CloudTaskV2({
        name: AdaptiveCrawlerHost.__singleCrawlQueueName,
        runtime: {
            cpu: 1,
            memory: '1GiB',
            timeoutSeconds: 3600,
            concurrency: 2,
            maxInstances: 200,
            retryConfig: {
                maxAttempts: 3,
                minBackoffSeconds: 60,
            },
            rateLimits: {
                maxConcurrentDispatches: 150,
                maxDispatchesPerSecond: 5,
            },
        }
    })
    async singleCrawlQueue(
        @Param('shortDigest') shortDigest: string,
        @Param('url') url: string,
        @Param('token') token: string,
        @Param('meta') meta: AdaptiveCrawlTask['meta'],
    ) {
        const error = {
            reason: ''
        };

        const state = await AdaptiveCrawlTask.fromFirestore(shortDigest);
        if (state?.status === AdaptiveCrawlTaskStatus.COMPLETED) {
            return;
        }

        try {
            url = removeURLHash(url);
        } catch(e) {
            error.reason = `Failed to parse url: ${url}`;
        }

        this.logger.debug(shortDigest, url, meta);
        const cachePath = `adaptive-crawl-task/${shortDigest}/${md5Hasher.hash(url)}`;

        if (!error.reason) {
            const result = meta.useSitemap
                ? await this.handleSingleCrawl(shortDigest, url, token, cachePath)
                : await this.handleSingleCrawlRecursively(shortDigest, url, token, meta, cachePath);

            if (!result) {
                return;
            }

            error.reason = result.error.reason;
        }

        await AdaptiveCrawlTask.DB.runTransaction(async (transaction) => {
            const ref = AdaptiveCrawlTask.COLLECTION.doc(shortDigest);
            const state = await transaction.get(ref);
            const data = state.data() as AdaptiveCrawlTask & { createdAt: Timestamp };

            if (error.reason) {
                data.failed[url] = error;
            } else {
                data.processed[url] = cachePath;
            }

            const status = Object.keys(data.processed).length + Object.keys(data.failed).length >= data.urls.length
                ? AdaptiveCrawlTaskStatus.COMPLETED : AdaptiveCrawlTaskStatus.PROCESSING;
            const statusText = Object.keys(data.processed).length + Object.keys(data.failed).length >= data.urls.length
                ? `Completed ${Object.keys(data.processed).length} Succeeded, ${Object.keys(data.failed).length} Failed`
                : `Processing ${Object.keys(data.processed).length + Object.keys(data.failed).length}/${data.urls.length}`;

            const payload: Partial<AdaptiveCrawlTask> = {
                status,
                statusText,
                processed: data.processed,
                failed: data.failed,
            };

            if (status === AdaptiveCrawlTaskStatus.COMPLETED) {
                payload.finishedAt = new Date();
                payload.duration = new Date().getTime() - data.createdAt.toDate().getTime();
            }

            transaction.update(ref, payload);
        });
    }

    async handleSingleCrawl(shortDigest: string, url: string, token: string, cachePath: string) {
        const error = {
            reason: ''
        }

        const response = await fetch('https://r.jina.ai', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json',
            },
            body: JSON.stringify({ url })
        })

        if (!response.ok) {
            error.reason = `Failed to crawl ${url}, ${response.statusText}`;
        } else {
            const json = await response.json();

            await this.firebaseObjectStorage.saveFile(cachePath,
                Buffer.from(
                    JSON.stringify(json),
                    'utf-8'
                ),
                {
                    metadata: {
                        contentType: 'application/json',
                    }
                }
            )
        }

        return {
            error,
        }
    }

    async handleSingleCrawlRecursively(
        shortDigest: string, url: string, token: string, meta: AdaptiveCrawlTask['meta'], cachePath: string
    ) {
        const error = {
            reason: ''
        }
        const response = await fetch('https://r.jina.ai', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json',
                'X-With-Links-Summary': 'true',
            },
            body: JSON.stringify({ url })
        });

        if (!response.ok) {
            error.reason = `Failed to crawl ${url}, ${response.statusText}`;
        } else {
            const json = await response.json();
            await this.firebaseObjectStorage.saveFile(cachePath,
                Buffer.from(
                    JSON.stringify(json),
                    'utf-8'
                ),
                {
                    metadata: {
                        contentType: 'application/json',
                    }
                }
            )

            const title = json.data.title;
            const description = json.data.description;
            const links = json.data.links as Record<string, string>;

            const relevantUrls = await this.getRelevantUrls(token, { title, description, links });
            this.logger.debug(`Total urls: ${Object.keys(links).length}, relevant urls: ${relevantUrls.length}`);

            for (const url of relevantUrls) {
                let abortContinue = false;
                let abortBreak = false;
                await AdaptiveCrawlTask.DB.runTransaction(async (transaction) => {
                    const ref = AdaptiveCrawlTask.COLLECTION.doc(shortDigest);
                    const state = await transaction.get(ref);
                    const data = state.data() as AdaptiveCrawlTask & { createdAt: Timestamp };

                    if (data.urls.includes(url)) {
                        this.logger.debug('Recursive CONTINUE', data);
                        abortContinue = true;
                        return;
                    }

                    const urls = [
                        ...data.urls,
                        url
                    ];

                    if (urls.length > meta.maxPages || data.status === AdaptiveCrawlTaskStatus.COMPLETED) {
                        this.logger.debug('Recursive BREAK', data);
                        abortBreak = true;
                        return;
                    }

                    transaction.update(ref, { urls });
                });

                if (abortContinue) {
                    continue;
                }
                if (abortBreak) {
                    break;
                }

                await getFunctions().taskQueue(AdaptiveCrawlerHost.__singleCrawlQueueName).enqueue({
                    shortDigest, url, token, meta
                }, {
                    dispatchDeadlineSeconds: 1800,
                    uri: await getFunctionUrl(AdaptiveCrawlerHost.__singleCrawlQueueName),
                });
            };
        }

        return {
            error,
        }
    }

    async getRelevantUrls(token: string, {
        title, description, links
    }: {
        title: string;
        description: string;
        links: Record<string, string>;
    }) {
        const invalidSuffix = [
            '.zip',
            '.docx',
            '.pptx',
            '.xlsx',
        ];

        const validLinks = Object.entries(links)
            .map(([title, link]) => link)
            .filter(link => link.startsWith('http') && !invalidSuffix.some(suffix => link.endsWith(suffix)));

        let query = '';
        if (!description) {
            query += title;
        } else  {
            query += `TITLE: ${title}; DESCRIPTION: ${description}`;
        }

        const data = {
            model: 'jina-reranker-v2-base-multilingual',
            query,
            top_n: 15,
            documents: validLinks,
        };

        const response = await fetch('https://api.jina.ai/v1/rerank', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(data)
        });

        const json = (await response.json()) as {
            results: {
                index: number;
                document: {
                    text: string;
                };
                relevance_score: number;
            }[];
        };

        const highestRelevanceScore = json.results[0]?.relevance_score ?? 0;
        return json.results.filter(r => r.relevance_score > Math.max(highestRelevanceScore * 0.6, 0.1)).map(r => removeURLHash(r.document.text));
    }

    getIndex(user?: JinaEmbeddingsTokenAccount) {
        // TODO: 需要更新使用方式
        // const indexObject: Record<string, string | number | undefined> = Object.create(indexProto);

        // Object.assign(indexObject, {
        //     usage1: 'https://r.jina.ai/YOUR_URL',
        //     usage2: 'https://s.jina.ai/YOUR_SEARCH_QUERY',
        //     homepage: 'https://jina.ai/reader',
        //     sourceCode: 'https://github.com/jina-ai/reader',
        // });

        // if (user) {
        //     indexObject[''] = undefined;
        //     indexObject.authenticatedAs = `${user.user_id} (${user.full_name})`;
        //     indexObject.balanceLeft = user.wallet.total_balance;
        // }

        // return indexObject;
    }

    async crawlUrlsFromSitemap(url: URL, maxPages: number) {
        const sitemapsFromRobotsTxt = await this.getSitemapsFromRobotsTxt(url);

        const initialSitemaps: string[] = [];
        if (sitemapsFromRobotsTxt === null) {
            initialSitemaps.push(`${url.origin}/sitemap.xml`);
        } else {
            initialSitemaps.push(...sitemapsFromRobotsTxt);
        }


        const allUrls: Set<string> = new Set();
        const processedSitemaps: Set<string> = new Set();

        const fetchSitemapUrls = async (sitemapUrl: string) => {
            sitemapUrl = sitemapUrl.trim();

            if (processedSitemaps.has(sitemapUrl)) {
                return;
            }

            processedSitemaps.add(sitemapUrl);

            try {
                const response = await fetch(sitemapUrl);
                const sitemapContent = await response.text();
                const parser = new DOMParser();
                const xmlDoc = parser.parseFromString(sitemapContent, 'text/xml');

                // handle normal sitemap
                const urlElements = xmlDoc.getElementsByTagName('url');
                for (let i = 0; i < urlElements.length; i++) {
                    const locElement = urlElements[i].getElementsByTagName('loc')[0];
                    if (locElement) {
                        const loc = locElement.textContent?.trim() || '';
                        if (loc.startsWith(url.origin) && !loc.endsWith('.xml')) {
                            allUrls.add(removeURLHash(loc));
                        }
                        if (allUrls.size >= maxPages) {
                            return;
                        }
                    }
                }

                // handle sitemap index
                const sitemapElements = xmlDoc.getElementsByTagName('sitemap');
                for (let i = 0; i < sitemapElements.length; i++) {
                    const locElement = sitemapElements[i].getElementsByTagName('loc')[0];
                    if (locElement) {
                        await fetchSitemapUrls(locElement.textContent?.trim() || '');
                        if (allUrls.size >= maxPages) {
                            return;
                        }
                    }
                }
            } catch (error) {
                this.logger.error(`Error fetching sitemap ${sitemapUrl}:`, error);
            }
        };

        for (const sitemapUrl of initialSitemaps) {
            await fetchSitemapUrls(sitemapUrl);
            if (allUrls.size >= maxPages) {
                break;
            }
        }

        const urlsToProcess = Array.from(allUrls).slice(0, maxPages);

        return urlsToProcess;
    }

    async getSitemapsFromRobotsTxt(url: URL) {
        const hostname = url.origin;
        const robotsUrl = `${hostname}/robots.txt`;
        const response = await fetch(robotsUrl);
        if (response.status === 404) {
            return null;
        }
        const robotsTxt = await response.text();
        if (robotsTxt.length) {
            const robot = robotsParser(robotsUrl, robotsTxt);
            return robot.getSitemaps();
        }

        return null;
    }
}

================
File: backend/functions/src/cloud-functions/crawler.ts
================
import {
    assignTransferProtocolMeta, marshalErrorLike,
    RPCHost, RPCReflection,
    AssertionFailureError, ParamValidationError, Defer,
} from 'civkit';
import { singleton } from 'tsyringe';
import { AsyncContext, BudgetExceededError, CloudHTTPv2, Ctx, FirebaseStorageBucketControl, InsufficientBalanceError, Logger, OutputServerEventStream, RPCReflect, SecurityCompromiseError } from '../shared';
import { RateLimitControl, RateLimitDesc } from '../shared/services/rate-limit';
import _ from 'lodash';
import { PageSnapshot, PuppeteerControl, ScrappingOptions } from '../services/puppeteer';
import { Request, Response } from 'express';
const pNormalizeUrl = import("@esm2cjs/normalize-url");
import { Crawled } from '../db/crawled';
import { randomUUID } from 'crypto';
import { JinaEmbeddingsAuthDTO } from '../shared/dto/jina-embeddings-auth';

import { countGPTToken as estimateToken } from '../shared/utils/openai';
import { CONTENT_FORMAT, CrawlerOptions, CrawlerOptionsHeaderOnly, ENGINE_TYPE } from '../dto/scrapping-options';
import { JinaEmbeddingsTokenAccount } from '../shared/db/jina-embeddings-token-account';
import { DomainBlockade } from '../db/domain-blockade';
import { DomainProfile } from '../db/domain-profile';
import { FirebaseRoundTripChecker } from '../shared/services/firebase-roundtrip-checker';
import { JSDomControl } from '../services/jsdom';
import { FormattedPage, md5Hasher, SnapshotFormatter } from '../services/snapshot-formatter';
import { CurlControl } from '../services/curl';
import { LmControl } from '../services/lm';

export interface ExtraScrappingOptions extends ScrappingOptions {
    withIframe?: boolean | 'quoted';
    withShadowDom?: boolean;
    targetSelector?: string | string[];
    removeSelector?: string | string[];
    keepImgDataUrl?: boolean;
    engine?: string;
}

const indexProto = {
    toString: function (): string {
        return _(this)
            .toPairs()
            .map(([k, v]) => k ? `[${_.upperFirst(_.lowerCase(k))}] ${v}` : '')
            .value()
            .join('\n') + '\n';
    }
};

@singleton()
export class CrawlerHost extends RPCHost {
    logger = this.globalLogger.child({ service: this.constructor.name });

    cacheRetentionMs = 1000 * 3600 * 24 * 7;
    cacheValidMs = 1000 * 3600;
    urlValidMs = 1000 * 3600 * 4;
    abuseBlockMs = 1000 * 3600;
    domainProfileRetentionMs = 1000 * 3600 * 24 * 30;

    constructor(
        protected globalLogger: Logger,
        protected puppeteerControl: PuppeteerControl,
        protected curlControl: CurlControl,
        protected lmControl: LmControl,
        protected jsdomControl: JSDomControl,
        protected snapshotFormatter: SnapshotFormatter,
        protected firebaseObjectStorage: FirebaseStorageBucketControl,
        protected rateLimitControl: RateLimitControl,
        protected threadLocal: AsyncContext,
        protected fbHealthCheck: FirebaseRoundTripChecker,
    ) {
        super(...arguments);

        puppeteerControl.on('crawled', async (snapshot: PageSnapshot, options: ExtraScrappingOptions & { url: URL; }) => {
            if (!snapshot.title?.trim() && !snapshot.pdfs?.length) {
                return;
            }
            if (options.cookies?.length) {
                // Potential privacy issue, dont cache if cookies are used
                return;
            }
            if (options.injectFrameScripts?.length || options.injectPageScripts?.length || options.viewport) {
                // Potentially mangeled content, dont cache if scripts are injected
                return;
            }
            if (options.locale) {
                Reflect.set(snapshot, 'locale', options.locale);
            }
            await this.setToCache(options.url, snapshot);

            await this.exploreDirectEngine(snapshot).catch(() => undefined);
        });

        puppeteerControl.on('abuse', async (abuseEvent: { url: URL; reason: string, sn: number; }) => {
            this.logger.warn(`Abuse detected on ${abuseEvent.url}, blocking ${abuseEvent.url.hostname}`, { reason: abuseEvent.reason, sn: abuseEvent.sn });

            await DomainBlockade.save(DomainBlockade.from({
                domain: abuseEvent.url.hostname.toLowerCase(),
                triggerReason: `${abuseEvent.reason}`,
                triggerUrl: abuseEvent.url.toString(),
                createdAt: new Date(),
                expireAt: new Date(Date.now() + this.abuseBlockMs),
            })).catch((err) => {
                this.logger.warn(`Failed to save domain blockade for ${abuseEvent.url.hostname}`, { err: marshalErrorLike(err) });
            });

        });
    }

    override async init() {
        await this.dependencyReady();

        this.emit('ready');
    }

    getIndex(user?: JinaEmbeddingsTokenAccount) {
        const indexObject: Record<string, string | number | undefined> = Object.create(indexProto);

        Object.assign(indexObject, {
            usage1: 'https://r.jina.ai/YOUR_URL',
            usage2: 'https://s.jina.ai/YOUR_SEARCH_QUERY',
            homepage: 'https://jina.ai/reader',
            sourceCode: 'https://github.com/jina-ai/reader',
        });

        if (user) {
            indexObject[''] = undefined;
            indexObject.authenticatedAs = `${user.user_id} (${user.full_name})`;
            indexObject.balanceLeft = user.wallet.total_balance;
        }

        return indexObject;
    }

    @CloudHTTPv2({
        name: 'crawl2',
        runtime: {
            memory: '4GiB',
            timeoutSeconds: 300,
            concurrency: 22,
        },
        tags: ['Crawler'],
        httpMethod: ['get', 'post'],
        returnType: [String, OutputServerEventStream],
        exposeRoot: true,
    })
    @CloudHTTPv2({
        runtime: {
            memory: '4GiB',
            cpu: 2,
            timeoutSeconds: 300,
            concurrency: 10,
            maxInstances: 1000,
            minInstances: 1,
        },
        tags: ['Crawler'],
        httpMethod: ['get', 'post'],
        returnType: [String, OutputServerEventStream],
        exposeRoot: true,
    })
    async crawl(
        @RPCReflect() rpcReflect: RPCReflection,
        @Ctx() ctx: {
            req: Request,
            res: Response,
        },
        auth: JinaEmbeddingsAuthDTO,
        crawlerOptionsHeaderOnly: CrawlerOptionsHeaderOnly,
        crawlerOptionsParamsAllowed: CrawlerOptions,
    ) {
        const uid = await auth.solveUID();
        let chargeAmount = 0;
        const crawlerOptions = ctx.req.method === 'GET' ? crawlerOptionsHeaderOnly : crawlerOptionsParamsAllowed;

        const targetUrl = await this.getTargetUrl(decodeURIComponent(ctx.req.url), crawlerOptions);
        if (!targetUrl) {
            const latestUser = uid ? await auth.assertUser() : undefined;
            if (!ctx.req.accepts('text/plain') && (ctx.req.accepts('text/json') || ctx.req.accepts('application/json'))) {
                return this.getIndex(latestUser);
            }

            return assignTransferProtocolMeta(`${this.getIndex(latestUser)}`,
                { contentType: 'text/plain', envelope: null }
            );
        }

        // Prevent circular crawling
        this.puppeteerControl.circuitBreakerHosts.add(
            ctx.req.hostname.toLowerCase()
        );

        if (uid) {
            const user = await auth.assertUser();
            if (!(user.wallet.total_balance > 0)) {
                throw new InsufficientBalanceError(`Account balance not enough to run this query, please recharge.`);
            }

            const rateLimitPolicy = auth.getRateLimits(rpcReflect.name.toUpperCase()) || [
                parseInt(user.metadata?.speed_level) >= 2 ?
                    RateLimitDesc.from({
                        occurrence: 1000,
                        periodSeconds: 60
                    }) :
                    RateLimitDesc.from({
                        occurrence: 200,
                        periodSeconds: 60
                    })
            ];

            const apiRoll = await this.rateLimitControl.simpleRPCUidBasedLimit(
                rpcReflect, uid, [rpcReflect.name.toUpperCase()],
                ...rateLimitPolicy
            );

            rpcReflect.finally(() => {
                if (crawlerOptions.tokenBudget && chargeAmount > crawlerOptions.tokenBudget) {
                    return;
                }
                if (chargeAmount) {
                    auth.reportUsage(chargeAmount, `reader-${rpcReflect.name}`).catch((err) => {
                        this.logger.warn(`Unable to report usage for ${uid}`, { err: marshalErrorLike(err) });
                    });
                    apiRoll.chargeAmount = chargeAmount;
                }
            });
        } else if (ctx.req.ip) {
            const apiRoll = await this.rateLimitControl.simpleRpcIPBasedLimit(rpcReflect, ctx.req.ip, [rpcReflect.name.toUpperCase()],
                [
                    // 20 requests per minute
                    new Date(Date.now() - 60 * 1000), 20
                ]
            );

            rpcReflect.finally(() => {
                if (crawlerOptions.tokenBudget && chargeAmount > crawlerOptions.tokenBudget) {
                    return;
                }
                if (chargeAmount) {
                    apiRoll._ref?.set({
                        chargeAmount,
                    }, { merge: true }).catch((err) => this.logger.warn(`Failed to log charge amount in apiRoll`, { err }));
                }
            });
        }

        if (!uid) {
            const blockade = (await DomainBlockade.fromFirestoreQuery(
                DomainBlockade.COLLECTION
                    .where('domain', '==', targetUrl.hostname.toLowerCase())
                    .where('expireAt', '>=', new Date())
                    .limit(1)
            ))[0];
            if (blockade) {
                throw new SecurityCompromiseError(`Domain ${targetUrl.hostname} blocked until ${blockade.expireAt || 'Eternally'} due to previous abuse found on ${blockade.triggerUrl || 'site'}: ${blockade.triggerReason}`);
            }
        }


        const crawlOpts = await this.configure(crawlerOptions);
        if (!ctx.req.accepts('text/plain') && ctx.req.accepts('text/event-stream')) {
            const sseStream = new OutputServerEventStream();
            rpcReflect.return(sseStream);

            try {
                for await (const scrapped of this.iterSnapshots(targetUrl, crawlOpts, crawlerOptions)) {
                    if (!scrapped) {
                        continue;
                    }

                    const formatted = await this.formatSnapshot(crawlerOptions, scrapped, targetUrl, this.urlValidMs);
                    chargeAmount = this.assignChargeAmount(formatted, crawlOpts);
                    if (crawlerOptions.tokenBudget && chargeAmount > crawlerOptions.tokenBudget) {
                        throw new BudgetExceededError(`Token budget (${crawlerOptions.tokenBudget}) exceeded, intended charge amount ${chargeAmount}.`);
                    }
                    sseStream.write({
                        event: 'data',
                        data: formatted,
                    });
                    if (chargeAmount && scrapped.pdfs?.length) {
                        break;
                    }
                }
            } catch (err: any) {
                this.logger.error(`Failed to crawl ${targetUrl}`, { err: marshalErrorLike(err) });
                sseStream.write({
                    event: 'error',
                    data: marshalErrorLike(err),
                });
            }

            sseStream.end();

            return sseStream;
        }

        let lastScrapped;
        if (!ctx.req.accepts('text/plain') && (ctx.req.accepts('text/json') || ctx.req.accepts('application/json'))) {
            for await (const scrapped of this.iterSnapshots(targetUrl, crawlOpts, crawlerOptions)) {
                lastScrapped = scrapped;
                if (!crawlerOptions.isEarlyReturnApplicable()) {
                    continue;
                }
                if (crawlerOptions.waitForSelector || ((!scrapped?.parsed?.content || !scrapped?.title?.trim()) && !scrapped?.pdfs?.length)) {
                    continue;
                }

                const formatted = await this.formatSnapshot(crawlerOptions, scrapped, targetUrl, this.urlValidMs);
                chargeAmount = this.assignChargeAmount(formatted, crawlOpts);

                if (crawlerOptions.tokenBudget && chargeAmount > crawlerOptions.tokenBudget) {
                    throw new BudgetExceededError(`Token budget (${crawlerOptions.tokenBudget}) exceeded, intended charge amount ${chargeAmount}.`);
                }

                if (scrapped?.pdfs?.length && !chargeAmount) {
                    continue;
                }

                return formatted;
            }

            if (!lastScrapped) {
                if (crawlOpts.targetSelector) {
                    throw new AssertionFailureError(`No content available for URL ${targetUrl} with target selector ${Array.isArray(crawlOpts.targetSelector) ? crawlOpts.targetSelector.join(', ') : crawlOpts.targetSelector}`);
                }
                throw new AssertionFailureError(`No content available for URL ${targetUrl}`);
            }

            const formatted = await this.formatSnapshot(crawlerOptions, lastScrapped, targetUrl, this.urlValidMs);
            chargeAmount = this.assignChargeAmount(formatted, crawlOpts);
            if (crawlerOptions.tokenBudget && chargeAmount > crawlerOptions.tokenBudget) {
                throw new BudgetExceededError(`Token budget (${crawlerOptions.tokenBudget}) exceeded, intended charge amount ${chargeAmount}.`);
            }

            return formatted;
        }

        if (crawlerOptions.isRequestingCompoundContentFormat()) {
            throw new ParamValidationError({
                path: 'respondWith',
                message: `You are requesting compound content format, please explicitly accept 'text/event-stream' or 'application/json' in header.`
            });
        }

        for await (const scrapped of this.iterSnapshots(targetUrl, crawlOpts, crawlerOptions)) {
            lastScrapped = scrapped;

            if (!crawlerOptions.isEarlyReturnApplicable()) {
                continue;
            }

            if (crawlerOptions.waitForSelector || ((!scrapped?.parsed?.content || !scrapped?.title?.trim()) && !scrapped?.pdfs?.length)) {
                continue;
            }

            const formatted = await this.formatSnapshot(crawlerOptions, scrapped, targetUrl, this.urlValidMs);
            chargeAmount = this.assignChargeAmount(formatted, crawlOpts);
            if (crawlerOptions.tokenBudget && chargeAmount > crawlerOptions.tokenBudget) {
                throw new BudgetExceededError(`Token budget (${crawlerOptions.tokenBudget}) exceeded, intended charge amount ${chargeAmount}.`);
            }

            if (crawlerOptions.respondWith === 'screenshot' && Reflect.get(formatted, 'screenshotUrl')) {

                return assignTransferProtocolMeta(`${formatted.textRepresentation}`,
                    { code: 302, envelope: null, headers: { Location: Reflect.get(formatted, 'screenshotUrl') } }
                );
            }
            if (crawlerOptions.respondWith === 'pageshot' && Reflect.get(formatted, 'pageshotUrl')) {

                return assignTransferProtocolMeta(`${formatted.textRepresentation}`,
                    { code: 302, envelope: null, headers: { Location: Reflect.get(formatted, 'pageshotUrl') } }
                );
            }

            return assignTransferProtocolMeta(`${formatted.textRepresentation}`, { contentType: 'text/plain', envelope: null });
        }

        if (!lastScrapped) {
            if (crawlOpts.targetSelector) {
                throw new AssertionFailureError(`No content available for URL ${targetUrl} with target selector ${Array.isArray(crawlOpts.targetSelector) ? crawlOpts.targetSelector.join(', ') : crawlOpts.targetSelector}`);
            }
            throw new AssertionFailureError(`No content available for URL ${targetUrl}`);
        }

        const formatted = await this.formatSnapshot(crawlerOptions, lastScrapped, targetUrl, this.urlValidMs);
        chargeAmount = this.assignChargeAmount(formatted, crawlOpts);
        if (crawlerOptions.tokenBudget && chargeAmount > crawlerOptions.tokenBudget) {
            throw new BudgetExceededError(`Token budget (${crawlerOptions.tokenBudget}) exceeded, intended charge amount ${chargeAmount}.`);
        }

        if (crawlerOptions.respondWith === 'screenshot' && Reflect.get(formatted, 'screenshotUrl')) {

            return assignTransferProtocolMeta(`${formatted.textRepresentation}`,
                { code: 302, envelope: null, headers: { Location: Reflect.get(formatted, 'screenshotUrl') } }
            );
        }
        if (crawlerOptions.respondWith === 'pageshot' && Reflect.get(formatted, 'pageshotUrl')) {

            return assignTransferProtocolMeta(`${formatted.textRepresentation}`,
                { code: 302, envelope: null, headers: { Location: Reflect.get(formatted, 'pageshotUrl') } }
            );
        }

        return assignTransferProtocolMeta(`${formatted.textRepresentation}`, { contentType: 'text/plain', envelope: null });

    }

    async getTargetUrl(originPath: string, crawlerOptions: CrawlerOptions) {
        let url: string;

        const targetUrlFromGet = originPath.slice(1);
        if (crawlerOptions.pdf) {
            const pdfBuf = crawlerOptions.pdf instanceof Blob ? await crawlerOptions.pdf.arrayBuffer().then((x) => Buffer.from(x)) : Buffer.from(crawlerOptions.pdf, 'base64');
            url = `file://pdf.${md5Hasher.hash(pdfBuf)}`;
        } else if (targetUrlFromGet) {
            url = targetUrlFromGet.trim();
        } else if (crawlerOptions.url) {
            url = crawlerOptions.url.trim();
        } else {
            return null;
        }

        let result: URL;
        const normalizeUrl = (await pNormalizeUrl).default;
        try {
            result = new URL(
                normalizeUrl(
                    url,
                    {
                        stripWWW: false,
                        removeTrailingSlash: false,
                        removeSingleSlash: false,
                        sortQueryParameters: false,
                    }
                )
            );
        } catch (err) {
            throw new ParamValidationError({
                message: `${err}`,
                path: 'url'
            });
        }

        if (!['http:', 'https:', 'file:'].includes(result.protocol)) {
            throw new ParamValidationError({
                message: `Invalid protocol ${result.protocol}`,
                path: 'url'
            });
        }

        return result;
    }

    getUrlDigest(urlToCrawl: URL) {
        const normalizedURL = new URL(urlToCrawl);
        if (!normalizedURL.hash.startsWith('#/')) {
            normalizedURL.hash = '';
        }
        const normalizedUrl = normalizedURL.toString().toLowerCase();
        const digest = md5Hasher.hash(normalizedUrl.toString());

        return digest;
    }

    async queryCache(urlToCrawl: URL, cacheTolerance: number) {
        const digest = this.getUrlDigest(urlToCrawl);

        const cache = (await Crawled.fromFirestoreQuery(Crawled.COLLECTION.where('urlPathDigest', '==', digest).orderBy('createdAt', 'desc').limit(1)))?.[0];

        if (!cache) {
            return undefined;
        }

        const age = Date.now() - cache.createdAt.valueOf();
        const stale = cache.createdAt.valueOf() < (Date.now() - cacheTolerance);
        this.logger.info(`${stale ? 'Stale cache exists' : 'Cache hit'} for ${urlToCrawl}, normalized digest: ${digest}, ${age}ms old, tolerance ${cacheTolerance}ms`, {
            url: urlToCrawl, digest, age, stale, cacheTolerance
        });

        let snapshot: PageSnapshot | undefined;
        let screenshotUrl: string | undefined;
        let pageshotUrl: string | undefined;
        const preparations = [
            this.firebaseObjectStorage.downloadFile(`snapshots/${cache._id}`).then((r) => {
                snapshot = JSON.parse(r.toString('utf-8'));
            }),
            cache.screenshotAvailable ?
                this.firebaseObjectStorage.signDownloadUrl(`screenshots/${cache._id}`, Date.now() + this.urlValidMs).then((r) => {
                    screenshotUrl = r;
                }) :
                Promise.resolve(undefined),
            cache.pageshotAvailable ?
                this.firebaseObjectStorage.signDownloadUrl(`pageshots/${cache._id}`, Date.now() + this.urlValidMs).then((r) => {
                    pageshotUrl = r;
                }) :
                Promise.resolve(undefined)
        ];
        try {
            await Promise.all(preparations);
        } catch (_err) {
            // Swallow cache errors.
            return undefined;
        }

        return {
            isFresh: !stale,
            ...cache,
            snapshot: {
                ...snapshot,
                screenshot: undefined,
                pageshot: undefined,
                screenshotUrl,
                pageshotUrl,
            } as PageSnapshot & { screenshotUrl?: string; pageshotUrl?: string; }
        };
    }

    async setToCache(urlToCrawl: URL, snapshot: PageSnapshot) {
        const digest = this.getUrlDigest(urlToCrawl);

        this.logger.info(`Caching snapshot of ${urlToCrawl}...`, { url: urlToCrawl, digest, title: snapshot?.title, href: snapshot?.href });
        const nowDate = new Date();

        const cache = Crawled.from({
            _id: randomUUID(),
            url: urlToCrawl.toString(),
            createdAt: nowDate,
            expireAt: new Date(nowDate.valueOf() + this.cacheRetentionMs),
            urlPathDigest: digest,
        });

        const savingOfSnapshot = this.firebaseObjectStorage.saveFile(`snapshots/${cache._id}`,
            Buffer.from(
                JSON.stringify({
                    ...snapshot,
                    screenshot: undefined,
                    pageshot: undefined,
                }),
                'utf-8'
            ),
            {
                metadata: {
                    contentType: 'application/json',
                }
            }
        ).then((r) => {
            cache.snapshotAvailable = true;
            return r;
        });

        if (snapshot.screenshot) {
            await this.firebaseObjectStorage.saveFile(`screenshots/${cache._id}`, snapshot.screenshot, {
                metadata: {
                    contentType: 'image/png',
                }
            });
            cache.screenshotAvailable = true;
        }
        if (snapshot.pageshot) {
            await this.firebaseObjectStorage.saveFile(`pageshots/${cache._id}`, snapshot.pageshot, {
                metadata: {
                    contentType: 'image/png',
                }
            });
            cache.pageshotAvailable = true;
        }
        await savingOfSnapshot;
        const r = await Crawled.save(cache.degradeForFireStore()).catch((err) => {
            this.logger.error(`Failed to save cache for ${urlToCrawl}`, { err: marshalErrorLike(err) });

            return undefined;
        });

        return r;
    }

    async *iterSnapshots(urlToCrawl: URL, crawlOpts?: ExtraScrappingOptions, crawlerOpts?: CrawlerOptions) {
        // if (crawlerOpts?.respondWith.includes(CONTENT_FORMAT.VLM)) {
        //     const finalBrowserSnapshot = await this.getFinalSnapshot(urlToCrawl, {
        //         ...crawlOpts, engine: ENGINE_TYPE.BROWSER
        //     }, crawlerOpts);

        //     yield* this.lmControl.geminiFromBrowserSnapshot(finalBrowserSnapshot);

        //     return;
        // }

        if (crawlerOpts?.respondWith.includes(CONTENT_FORMAT.READER_LM)) {
            const finalAutoSnapshot = await this.getFinalSnapshot(urlToCrawl, {
                ...crawlOpts,
                engine: crawlOpts?.engine || ENGINE_TYPE.AUTO,
            }, crawlerOpts);

            if (!finalAutoSnapshot?.html) {
                throw new AssertionFailureError(`Unexpected non HTML content for ReaderLM: ${urlToCrawl}`);
            }

            if (crawlerOpts?.instruction || crawlerOpts?.jsonSchema) {
                const jsonSchema = crawlerOpts.jsonSchema ? JSON.stringify(crawlerOpts.jsonSchema, undefined, 2) : undefined;
                yield* this.lmControl.readerLMFromSnapshot(crawlerOpts.instruction, jsonSchema, finalAutoSnapshot);

                return;
            }

            yield* this.lmControl.readerLMMarkdownFromSnapshot(finalAutoSnapshot);

            return;
        }

        yield* this.cachedScrap(urlToCrawl, crawlOpts, crawlerOpts);
    }

    async *cachedScrap(urlToCrawl: URL, crawlOpts?: ExtraScrappingOptions, crawlerOpts?: CrawlerOptions) {
        if (crawlerOpts?.html) {
            const snapshot = {
                href: urlToCrawl.toString(),
                html: crawlerOpts.html,
                title: '',
                text: '',
            } as PageSnapshot;
            yield this.jsdomControl.narrowSnapshot(snapshot, crawlOpts);

            return;
        }

        if (crawlerOpts?.pdf) {
            const pdfBuf = crawlerOpts.pdf instanceof Blob ? await crawlerOpts.pdf.arrayBuffer().then((x) => Buffer.from(x)) : Buffer.from(crawlerOpts.pdf, 'base64');
            const pdfDataUrl = `data:application/pdf;base64,${pdfBuf.toString('base64')}`;
            const snapshot = {
                href: urlToCrawl.toString(),
                html: `<!DOCTYPE html><html><head></head><body style="height: 100%; width: 100%; overflow: hidden; margin:0px; background-color: rgb(82, 86, 89);"><embed style="position:absolute; left: 0; top: 0;" width="100%" height="100%" src="${pdfDataUrl}"></body></html>`,
                title: '',
                text: '',
                pdfs: [pdfDataUrl],
            } as PageSnapshot;

            yield this.jsdomControl.narrowSnapshot(snapshot, crawlOpts);

            return;
        }

        if (crawlOpts?.engine === ENGINE_TYPE.DIRECT) {
            yield this.curlControl.urlToSnapshot(urlToCrawl, crawlOpts);
            return;
        }

        let cache;

        if (!crawlerOpts || crawlerOpts.isCacheQueryApplicable()) {
            const cacheTolerance = crawlerOpts?.cacheTolerance ?? this.cacheValidMs;
            cache = await this.queryCache(urlToCrawl, cacheTolerance);
        }

        if (cache?.isFresh &&
            (!crawlOpts?.favorScreenshot || (crawlOpts?.favorScreenshot && (cache.screenshotAvailable && cache.pageshotAvailable))) &&
            (_.get(cache.snapshot, 'locale') === crawlOpts?.locale)
        ) {
            yield this.jsdomControl.narrowSnapshot(cache.snapshot, crawlOpts);

            return;
        }

        if (crawlOpts?.engine !== ENGINE_TYPE.BROWSER && crawlerOpts?.browserIsNotRequired()) {
            const { digest } = this.getDomainProfileUrlDigest(urlToCrawl);
            const domainProfile = await DomainProfile.fromFirestore(digest);
            if (domainProfile?.engine === ENGINE_TYPE.DIRECT) {
                try {
                    const snapshot = await this.curlControl.urlToSnapshot(urlToCrawl, crawlOpts);

                    // Expect downstream code to "break" here if it's satisfied with the direct engine
                    yield snapshot;
                    if (crawlOpts?.engine === ENGINE_TYPE.AUTO) {
                        return;
                    }
                } catch (err: any) {
                    this.logger.warn(`Failed to scrap ${urlToCrawl} with direct engine`, { err: marshalErrorLike(err) });
                }
            }
        }

        try {
            if (crawlOpts?.targetSelector || crawlOpts?.removeSelector || crawlOpts?.withIframe || crawlOpts?.withShadowDom) {
                for await (const x of this.puppeteerControl.scrap(urlToCrawl, crawlOpts)) {
                    yield this.jsdomControl.narrowSnapshot(x, crawlOpts);
                }

                return;
            }

            yield* this.puppeteerControl.scrap(urlToCrawl, crawlOpts);
        } catch (err: any) {
            if (cache && !(err instanceof SecurityCompromiseError)) {
                this.logger.warn(`Failed to scrap ${urlToCrawl}, but a stale cache is available. Falling back to cache`, { err: marshalErrorLike(err) });
                yield this.jsdomControl.narrowSnapshot(cache.snapshot, crawlOpts);
                return;
            }
            throw err;
        }
    }

    assignChargeAmount(formatted: FormattedPage, scrappingOptions?: ExtraScrappingOptions) {
        if (!formatted) {
            return 0;
        }

        let amount = 0;
        if (formatted.content) {
            const x1 = estimateToken(formatted.content);
            if (scrappingOptions?.engine?.toLowerCase().includes('lm')) {
                amount += x1 * 2;
            }
            amount += x1;
        } else if (formatted.description) {
            amount += estimateToken(formatted.description);
        }
        if (formatted.text) {
            amount += estimateToken(formatted.text);
        }
        if (formatted.html) {
            amount += estimateToken(formatted.html);
        }
        if (formatted.screenshotUrl || formatted.screenshot) {
            // OpenAI image token count for 1024x1024 image
            amount += 765;
        }

        Object.assign(formatted, { usage: { tokens: amount } });

        return amount;
    }


    async *scrapMany(urls: URL[], options?: ExtraScrappingOptions, crawlerOpts?: CrawlerOptions) {
        const iterators = urls.map((url) => this.cachedScrap(url, options, crawlerOpts));

        const results: (PageSnapshot | undefined)[] = iterators.map((_x) => undefined);

        let nextDeferred = Defer();
        let concluded = false;

        const handler = async (it: AsyncGenerator<PageSnapshot | undefined>, idx: number) => {
            try {
                for await (const x of it) {
                    results[idx] = x;

                    if (x) {
                        nextDeferred.resolve();
                        nextDeferred = Defer();
                    }

                }
            } catch (err: any) {
                this.logger.warn(`Failed to scrap ${urls[idx]}`, { err: marshalErrorLike(err) });
            }
        };

        Promise.all(
            iterators.map((it, idx) => handler(it, idx))
        ).finally(() => {
            concluded = true;
            nextDeferred.resolve();
        });

        yield results;

        try {
            while (!concluded) {
                await nextDeferred.promise;

                yield results;
            }
        } finally {
            for (const x of iterators) {
                x.return();
            }
        }
    }

    async configure(opts: CrawlerOptions) {

        this.threadLocal.set('withGeneratedAlt', opts.withGeneratedAlt);
        this.threadLocal.set('withLinksSummary', opts.withLinksSummary);
        this.threadLocal.set('withImagesSummary', opts.withImagesSummary);
        this.threadLocal.set('keepImgDataUrl', opts.keepImgDataUrl);
        this.threadLocal.set('cacheTolerance', opts.cacheTolerance);
        this.threadLocal.set('userAgent', opts.userAgent);
        if (opts.timeout) {
            this.threadLocal.set('timeout', opts.timeout * 1000);
        }
        this.threadLocal.set('retainImages', opts.retainImages);
        this.threadLocal.set('noGfm', opts.noGfm);

        const crawlOpts: ExtraScrappingOptions = {
            proxyUrl: opts.proxyUrl,
            cookies: opts.setCookies,
            favorScreenshot: ['screenshot', 'pageshot'].some((x) => opts.respondWith.includes(x)),
            removeSelector: opts.removeSelector,
            targetSelector: opts.targetSelector,
            waitForSelector: opts.waitForSelector,
            overrideUserAgent: opts.userAgent,
            timeoutMs: opts.timeout ? opts.timeout * 1000 : undefined,
            withIframe: opts.withIframe,
            withShadowDom: opts.withShadowDom,
            locale: opts.locale,
            referer: opts.referer,
            viewport: opts.viewport,
            engine: opts.engine,
        };

        if (opts.locale) {
            crawlOpts.extraHeaders ??= {};
            crawlOpts.extraHeaders['Accept-Language'] = opts.locale;
        }

        if (opts.engine?.toLowerCase() === ENGINE_TYPE.VLM) {
            crawlOpts.favorScreenshot = true;
        }

        if (opts.injectFrameScript?.length) {
            crawlOpts.injectFrameScripts = (await Promise.all(
                opts.injectFrameScript.map((x) => {
                    if (URL.canParse(x)) {
                        return fetch(x).then((r) => r.text());
                    }

                    return x;
                })
            )).filter(Boolean);
        }

        if (opts.injectPageScript?.length) {
            crawlOpts.injectPageScripts = (await Promise.all(
                opts.injectPageScript.map((x) => {
                    if (URL.canParse(x)) {
                        return fetch(x).then((r) => r.text());
                    }

                    return x;
                })
            )).filter(Boolean);
        }

        return crawlOpts;
    }

    formatSnapshot(
        crawlerOptions: CrawlerOptions,
        snapshot: PageSnapshot & {
            screenshotUrl?: string;
            pageshotUrl?: string;
        },
        nominalUrl?: URL,
        urlValidMs?: number
    ) {
        const presumedURL = crawlerOptions.base === 'final' ? new URL(snapshot.href) : nominalUrl;

        const respondWith = crawlerOptions.respondWith;
        if (respondWith === CONTENT_FORMAT.READER_LM || respondWith === CONTENT_FORMAT.VLM) {
            const output: FormattedPage = {
                title: snapshot.title,
                content: snapshot.parsed?.textContent,
                url: presumedURL?.href || snapshot.href,
                [Symbol.dispose]: () => undefined,
            };

            Object.defineProperty(output, 'textRepresentation', {
                value: snapshot.parsed?.textContent,
                enumerable: false,
            });

            return output;
        }

        return this.snapshotFormatter.formatSnapshot(respondWith, snapshot, presumedURL, urlValidMs);
    }

    async getFinalSnapshot(url: URL, opts?: ExtraScrappingOptions, crawlerOptions?: CrawlerOptions): Promise<PageSnapshot | undefined> {
        const it = this.cachedScrap(url, opts, crawlerOptions);

        let lastSnapshot;
        let lastError;
        try {
            for await (const x of it) {
                lastSnapshot = x;
            }
        } catch (err) {
            lastError = err;
        }

        if (!lastSnapshot && lastError) {
            throw lastError;
        }

        if (!lastSnapshot) {
            throw new AssertionFailureError(`No content available`);
        }

        return lastSnapshot;
    }

    async simpleCrawl(mode: string, url: URL, opts?: ExtraScrappingOptions) {
        const it = this.iterSnapshots(url, { ...opts, minIntervalMs: 500 });

        let lastSnapshot;
        let goodEnough = false;
        try {
            for await (const x of it) {
                lastSnapshot = x;

                if (goodEnough) {
                    break;
                }

                if (lastSnapshot?.parsed?.content) {
                    // After it's good enough, wait for next snapshot;
                    goodEnough = true;
                }
            }

        } catch (err) {
            if (lastSnapshot) {
                return this.snapshotFormatter.formatSnapshot(mode, lastSnapshot, url, this.urlValidMs);
            }

            throw err;
        }

        if (!lastSnapshot) {
            throw new AssertionFailureError(`No content available`);
        }

        return this.snapshotFormatter.formatSnapshot(mode, lastSnapshot, url, this.urlValidMs);
    }

    async exploreDirectEngine(knownSnapshot: PageSnapshot) {
        const realUrl = new URL(knownSnapshot.href);
        const { digest, path } = this.getDomainProfileUrlDigest(realUrl);
        const profile = await DomainProfile.fromFirestore(digest);

        if (!profile) {
            const record = DomainProfile.from({
                _id: digest,
                origin: realUrl.origin.toLowerCase(),
                path,
                triggerUrl: realUrl.href,
                engine: knownSnapshot.htmlModifiedByJs ? ENGINE_TYPE.BROWSER : ENGINE_TYPE.DIRECT,
                createdAt: new Date(),
                expireAt: new Date(Date.now() + this.domainProfileRetentionMs),
            });
            await DomainProfile.save(record);

            return;
        }

        if (profile.engine === ENGINE_TYPE.BROWSER) {
            // Mixed engine, always use browser
            return;
        }

        profile.origin = realUrl.origin.toLowerCase();
        profile.triggerUrl = realUrl.href;
        profile.path = path;
        profile.engine = knownSnapshot.htmlModifiedByJs ? ENGINE_TYPE.BROWSER : ENGINE_TYPE.DIRECT;
        profile.expireAt = new Date(Date.now() + this.domainProfileRetentionMs);

        await DomainProfile.save(profile);

        return;
    }

    getDomainProfileUrlDigest(url: URL) {
        const pathname = url.pathname;
        const pathVec = pathname.split('/');
        const parentPath = pathVec.slice(0, -1).join('/');

        const finalPath = parentPath || pathname;

        const key = url.origin.toLocaleLowerCase() + finalPath;

        return {
            digest: md5Hasher.hash(key),
            path: finalPath,
        };
    }
}

================
File: backend/functions/src/cloud-functions/data-crunching.ts
================
import {
    Defer,
    PromiseThrottle,
    RPCHost,
} from 'civkit';
import { singleton } from 'tsyringe';
import {
    // CloudScheduleV2, CloudTaskV2,
    FirebaseStorageBucketControl, Logger, Param, TempFileManager
} from '../shared';
import _ from 'lodash';
import { CrawlerHost } from './crawler';

import { Crawled } from '../db/crawled';
import dayjs from 'dayjs';
import { createReadStream } from 'fs';
import { appendFile } from 'fs/promises';
import { createGzip } from 'zlib';
import { getFunctions } from 'firebase-admin/functions';
import { SnapshotFormatter } from '../services/snapshot-formatter';
import { getFunctionUrl } from '../utils/get-function-url';

dayjs.extend(require('dayjs/plugin/utc'));

@singleton()
export class DataCrunchingHost extends RPCHost {
    logger = this.globalLogger.child({ service: this.constructor.name });

    pageCacheCrunchingPrefix = 'crunched-pages';
    pageCacheCrunchingBatchSize = 5000;
    pageCacheCrunchingTMinus = 6 * 24 * 60 * 60 * 1000;
    rev = 7;

    constructor(
        protected globalLogger: Logger,

        protected crawler: CrawlerHost,
        protected snapshotFormatter: SnapshotFormatter,
        protected tempFileManager: TempFileManager,
        protected firebaseObjectStorage: FirebaseStorageBucketControl,
    ) {
        super(..._.without(arguments, crawler));
    }

    override async init() {
        await this.dependencyReady();

        this.emit('ready');
    }

    // @CloudTaskV2({
    //     runtime: {
    //         cpu: 2,
    //         memory: '4GiB',
    //         timeoutSeconds: 3600,
    //         concurrency: 2,
    //         maxInstances: 200,
    //         retryConfig: {
    //             maxAttempts: 3,
    //             minBackoffSeconds: 60,
    //         },
    //         rateLimits: {
    //             maxConcurrentDispatches: 150,
    //             maxDispatchesPerSecond: 2,
    //         },
    //     },
    //     tags: ['DataCrunching'],
    // })
    async crunchPageCacheWorker(
        @Param('date') date: string,
        @Param('offset', { default: 0 }) offset: number
    ) {
        this.logger.info(`Crunching page cache @${date}+${offset}...`);
        for await (const { fileName, records } of this.iterPageCacheRecords(date, offset)) {
            this.logger.info(`Crunching ${fileName}...`);
            const fileOnDrive = await this.crunchCacheRecords(records);
            const fstream = createReadStream(fileOnDrive.path);
            const gzipStream = createGzip();
            fstream.pipe(gzipStream, { end: true });
            await this.firebaseObjectStorage.bucket.file(fileName).save(gzipStream, {
                contentType: 'application/jsonl+gzip',
            });
        }

        this.logger.info(`Crunching page cache @${date}+${offset} done.`);

        return true;
    }

    // @CloudScheduleV2('2 0 * * *', {
    //     name: 'crunchPageCacheEveryday',
    //     runtime: {
    //         cpu: 2,
    //         memory: '4GiB',
    //         timeoutSeconds: 1800,
    //         timeZone: 'UTC',
    //         retryCount: 3,
    //         minBackoffSeconds: 60,
    //     },
    //     tags: ['DataCrunching'],
    // })
    async dispatchPageCacheCrunching() {
        for await (const { fileName, date, offset } of this.iterPageCacheChunks()) {
            this.logger.info(`Dispatching ${fileName}...`);
            // sse.write({ data: `Dispatching ${fileName}...` });

            await getFunctions().taskQueue('crunchPageCacheWorker').enqueue({ date, offset }, {
                dispatchDeadlineSeconds: 1800,
                uri: await getFunctionUrl('crunchPageCacheWorker'),
            });
        }

        return true;
    }

    // @CloudHTTPv2({
    //     runtime: {
    //         cpu: 2,
    //         memory: '4GiB',
    //         timeoutSeconds: 3600,
    //         concurrency: 2,
    //         maxInstances: 200,
    //     },
    //     tags: ['DataCrunching'],
    // })
    // async dispatchPageCacheCrunching(
    //     @RPCReflect() rpcReflect: RPCReflection
    // ) {
    //     const sse = new OutputServerEventStream({ highWaterMark: 4096 });
    //     rpcReflect.return(sse);
    //     rpcReflect.catch((err) => {
    //         sse.end({ data: `Error: ${err.message}` });
    //     });
    //     for await (const { fileName, date, offset } of this.iterPageCacheChunks()) {
    //         this.logger.info(`Dispatching ${fileName}...`);
    //         sse.write({ data: `Dispatching ${fileName}...` });

    //         await getFunctions().taskQueue('crunchPageCacheWorker').enqueue({ date, offset }, {
    //             dispatchDeadlineSeconds: 1800,
    //             uri: await getFunctionUrl('crunchPageCacheWorker'),
    //         });
    //     }

    //     sse.end({ data: 'done' });

    //     return true;
    // }

    async* iterPageCacheRecords(date?: string, inputOffset?: number | string) {
        const startOfToday = dayjs().utc().startOf('day');
        const startingPoint = dayjs().utc().subtract(this.pageCacheCrunchingTMinus, 'ms').startOf('day');
        let theDay = startingPoint;

        if (date) {
            theDay = dayjs(date).utc().startOf('day');
        }

        let counter = 0;
        if (inputOffset) {
            counter = parseInt(inputOffset as string, 10);
        }

        while (theDay.isBefore(startOfToday)) {
            const fileName = `${this.pageCacheCrunchingPrefix}/r${this.rev}/${theDay.format('YYYY-MM-DD')}/${counter}.jsonl.gz`;
            const offset = counter;
            counter += this.pageCacheCrunchingBatchSize;
            const fileExists = (await this.firebaseObjectStorage.bucket.file(fileName).exists())[0];
            if (fileExists) {
                continue;
            }

            const records = await Crawled.fromFirestoreQuery(Crawled.COLLECTION
                .where('createdAt', '>=', theDay.toDate())
                .where('createdAt', '<', theDay.add(1, 'day').toDate())
                .orderBy('createdAt', 'asc')
                .offset(offset)
                .limit(this.pageCacheCrunchingBatchSize)
            );

            this.logger.info(`Found ${records.length} records for ${theDay.format('YYYY-MM-DD')} at offset ${offset}`, { fileName, counter });

            if (!records.length) {
                if (date) {
                    break;
                }
                theDay = theDay.add(1, 'day');
                counter = 0;
                continue;
            }

            yield { fileName, records };

            if (offset) {
                break;
            }
        }
    }

    async* iterPageCacheChunks() {
        const startOfToday = dayjs().utc().startOf('day');
        const startingPoint = dayjs().utc().subtract(this.pageCacheCrunchingTMinus, 'ms').startOf('day');
        let theDay = startingPoint;

        let counter = 0;

        while (theDay.isBefore(startOfToday)) {
            const fileName = `${this.pageCacheCrunchingPrefix}/r${this.rev}/${theDay.format('YYYY-MM-DD')}/${counter}.jsonl.gz`;
            const offset = counter;
            counter += this.pageCacheCrunchingBatchSize;
            const fileExists = (await this.firebaseObjectStorage.bucket.file(fileName).exists())[0];
            if (fileExists) {
                continue;
            }

            const nRecords = (await Crawled.COLLECTION
                .where('createdAt', '>=', theDay.toDate())
                .where('createdAt', '<', theDay.add(1, 'day').toDate())
                .orderBy('createdAt', 'asc')
                .offset(offset)
                .limit(this.pageCacheCrunchingBatchSize)
                .count().get()).data().count;

            this.logger.info(`Found ${nRecords} records for ${theDay.format('YYYY-MM-DD')} at offset ${offset}`, { fileName, counter });
            if (nRecords < this.pageCacheCrunchingBatchSize) {
                theDay = theDay.add(1, 'day');
                counter = 0;
            }
            if (nRecords) {
                yield { fileName, date: theDay.toISOString(), offset };
            }
        }
    }

    async crunchCacheRecords(records: Crawled[]) {
        const throttle = new PromiseThrottle(30);
        const localFilePath = this.tempFileManager.alloc();
        let nextDrainDeferred = Defer();
        nextDrainDeferred.resolve();

        for (const record of records) {
            await throttle.acquire();
            this.firebaseObjectStorage.downloadFile(`snapshots/${record._id}`)
                .then(async (snapshotTxt) => {
                    try {
                        const snapshot = JSON.parse(snapshotTxt.toString('utf-8'));

                        let formatted = await this.snapshotFormatter.formatSnapshot('default', snapshot);
                        if (!formatted.content) {
                            formatted = await this.snapshotFormatter.formatSnapshot('markdown', snapshot);
                        }

                        await nextDrainDeferred.promise;
                        await appendFile(localFilePath, JSON.stringify({
                            url: snapshot.href,
                            title: snapshot.title || '',
                            html: snapshot.html || '',
                            text: snapshot.text || '',
                            content: formatted.content || '',
                        }) + '\n', { encoding: 'utf-8' });

                    } catch (err) {
                        this.logger.warn(`Failed to parse snapshot for ${record._id}`, { err });
                    }
                })
                .finally(() => {
                    throttle.release();
                });
        }

        await throttle.nextDrain();


        const ro = {
            path: localFilePath
        };

        this.tempFileManager.bindPathTo(ro, localFilePath);

        return ro;
    }
}

================
File: backend/functions/src/cloud-functions/searcher.ts
================
import {
    assignTransferProtocolMeta, marshalErrorLike,
    RPCHost, RPCReflection,
    AssertionFailureError,
    objHashMd5B64Of,
} from 'civkit';
import { singleton } from 'tsyringe';
import { AsyncContext, CloudHTTPv2, Ctx, InsufficientBalanceError, Logger, OutputServerEventStream, Param, RPCReflect } from '../shared';
import { RateLimitControl, RateLimitDesc } from '../shared/services/rate-limit';
import _ from 'lodash';
import { Request, Response } from 'express';
import { JinaEmbeddingsAuthDTO } from '../shared/dto/jina-embeddings-auth';
import { BraveSearchExplicitOperatorsDto, BraveSearchService } from '../services/brave-search';
import { CrawlerHost, ExtraScrappingOptions } from './crawler';
import { WebSearchQueryParams } from '../shared/3rd-party/brave-search';
import { SearchResult } from '../db/searched';
import { WebSearchApiResponse, SearchResult as WebSearchResult } from '../shared/3rd-party/brave-types';
import { CrawlerOptions } from '../dto/scrapping-options';
import { SnapshotFormatter, FormattedPage } from '../services/snapshot-formatter';


@singleton()
export class SearcherHost extends RPCHost {
    logger = this.globalLogger.child({ service: this.constructor.name });

    cacheRetentionMs = 1000 * 3600 * 24 * 7;
    cacheValidMs = 1000 * 3600;
    pageCacheToleranceMs = 1000 * 3600 * 24;

    reasonableDelayMs = 15_000;

    targetResultCount = 5;

    constructor(
        protected globalLogger: Logger,
        protected rateLimitControl: RateLimitControl,
        protected threadLocal: AsyncContext,
        protected braveSearchService: BraveSearchService,
        protected crawler: CrawlerHost,
        protected snapshotFormatter: SnapshotFormatter,
    ) {
        super(...arguments);
    }

    override async init() {
        await this.dependencyReady();

        this.emit('ready');
    }

    @CloudHTTPv2({
        name: 'search2',
        runtime: {
            cpu: 4,
            memory: '4GiB',
            timeoutSeconds: 300,
            concurrency: 4,
        },
        tags: ['Searcher'],
        httpMethod: ['get', 'post'],
        returnType: [String, OutputServerEventStream],
        exposeRoot: true,
    })
    @CloudHTTPv2({
        runtime: {
            cpu: 4,
            memory: '16GiB',
            timeoutSeconds: 300,
            concurrency: 4,
            maxInstances: 200,
            minInstances: 1,
        },
        tags: ['Searcher'],
        httpMethod: ['get', 'post'],
        returnType: [String, OutputServerEventStream],
        exposeRoot: true,
    })
    async search(
        @RPCReflect() rpcReflect: RPCReflection,
        @Ctx() ctx: {
            req: Request,
            res: Response,
        },
        auth: JinaEmbeddingsAuthDTO,
        @Param('count', { default: 5, validate: (v) => v >= 0 && v <= 10 })
        count: number,
        crawlerOptions: CrawlerOptions,
        braveSearchExplicitOperators: BraveSearchExplicitOperatorsDto,
        @Param('q') q?: string,
    ) {
        const uid = await auth.solveUID();
        let chargeAmount = 0;
        const noSlashPath = decodeURIComponent(ctx.req.path).slice(1);
        if (!noSlashPath && !q) {
            const latestUser = uid ? await auth.assertUser() : undefined;
            const index = this.crawler.getIndex(latestUser);
            if (!uid) {
                index.note = 'Authentication is required to use this endpoint. Please provide a valid API key via Authorization header.';
            }
            if (!ctx.req.accepts('text/plain') && (ctx.req.accepts('text/json') || ctx.req.accepts('application/json'))) {

                return index;
            }

            return assignTransferProtocolMeta(`${index}`,
                { contentType: 'text/plain', envelope: null }
            );
        }

        const user = await auth.assertUser();
        if (!(user.wallet.total_balance > 0)) {
            throw new InsufficientBalanceError(`Account balance not enough to run this query, please recharge.`);
        }

        const rateLimitPolicy = auth.getRateLimits(rpcReflect.name.toUpperCase()) || [
            parseInt(user.metadata?.speed_level) >= 2 ?
                RateLimitDesc.from({
                    occurrence: 100,
                    periodSeconds: 60
                }) :
                RateLimitDesc.from({
                    occurrence: 40,
                    periodSeconds: 60
                })
        ];

        const apiRoll = await this.rateLimitControl.simpleRPCUidBasedLimit(
            rpcReflect, uid!, [rpcReflect.name.toUpperCase()],
            ...rateLimitPolicy
        );

        rpcReflect.finally(() => {
            if (chargeAmount) {
                auth.reportUsage(chargeAmount, `reader-${rpcReflect.name}`).catch((err) => {
                    this.logger.warn(`Unable to report usage for ${uid}`, { err: marshalErrorLike(err) });
                });
                apiRoll.chargeAmount = chargeAmount;
            }
        });

        delete crawlerOptions.html;

        const crawlOpts = await this.crawler.configure(crawlerOptions);
        const searchQuery = braveSearchExplicitOperators.addTo(q || noSlashPath);
        const r = await this.cachedWebSearch({
            q: searchQuery,
            count: count ? Math.floor(count + 2) : 20
        }, crawlerOptions.noCache);

        if (!r.web?.results.length) {
            throw new AssertionFailureError(`No search results available for query ${searchQuery}`);
        }

        if (crawlOpts.timeoutMs && crawlOpts.timeoutMs < 30_000) {
            delete crawlOpts.timeoutMs;
        }

        const it = this.fetchSearchResults(crawlerOptions.respondWith, r.web?.results, crawlOpts,
            CrawlerOptions.from({ ...crawlerOptions, cacheTolerance: crawlerOptions.cacheTolerance ?? this.pageCacheToleranceMs }),
            count,
        );

        if (!ctx.req.accepts('text/plain') && ctx.req.accepts('text/event-stream')) {
            const sseStream = new OutputServerEventStream();
            rpcReflect.return(sseStream);

            try {
                for await (const scrapped of it) {
                    if (!scrapped) {
                        continue;
                    }

                    chargeAmount = this.assignChargeAmount(scrapped);
                    sseStream.write({
                        event: 'data',
                        data: scrapped,
                    });
                }
            } catch (err: any) {
                this.logger.error(`Failed to collect search result for query ${searchQuery}`,
                    { err: marshalErrorLike(err) }
                );
                sseStream.write({
                    event: 'error',
                    data: marshalErrorLike(err),
                });
            }

            sseStream.end();

            return sseStream;
        }

        let lastScrapped: any[] | undefined;
        let earlyReturn = false;
        if (!ctx.req.accepts('text/plain') && (ctx.req.accepts('text/json') || ctx.req.accepts('application/json'))) {
            let earlyReturnTimer: ReturnType<typeof setTimeout> | undefined;
            const setEarlyReturnTimer = () => {
                if (earlyReturnTimer) {
                    return;
                }
                earlyReturnTimer = setTimeout(() => {
                    if (!lastScrapped) {
                        return;
                    }
                    chargeAmount = this.assignChargeAmount(lastScrapped);
                    rpcReflect.return(lastScrapped);
                    earlyReturn = true;
                }, ((crawlerOptions.timeout || 0) * 1000) || this.reasonableDelayMs);
            };

            for await (const scrapped of it) {
                lastScrapped = scrapped;
                if (_.some(scrapped, (x) => this.pageQualified(x))) {
                    setEarlyReturnTimer();
                }
                if (!this.searchResultsQualified(scrapped, count)) {
                    continue;
                }
                if (earlyReturnTimer) {
                    clearTimeout(earlyReturnTimer);
                }
                chargeAmount = this.assignChargeAmount(scrapped);

                return scrapped;
            }

            if (earlyReturnTimer) {
                clearTimeout(earlyReturnTimer);
            }

            if (!lastScrapped) {
                throw new AssertionFailureError(`No content available for query ${searchQuery}`);
            }

            if (!earlyReturn) {
                chargeAmount = this.assignChargeAmount(lastScrapped);
            }

            return lastScrapped;
        }

        let earlyReturnTimer: ReturnType<typeof setTimeout> | undefined;
        const setEarlyReturnTimer = () => {
            if (earlyReturnTimer) {
                return;
            }
            earlyReturnTimer = setTimeout(() => {
                if (!lastScrapped) {
                    return;
                }
                chargeAmount = this.assignChargeAmount(lastScrapped);
                rpcReflect.return(assignTransferProtocolMeta(`${lastScrapped}`, { contentType: 'text/plain', envelope: null }));
                earlyReturn = true;
            }, ((crawlerOptions.timeout || 0) * 1000) || this.reasonableDelayMs);
        };

        for await (const scrapped of it) {
            lastScrapped = scrapped;

            if (_.some(scrapped, (x) => this.pageQualified(x))) {
                setEarlyReturnTimer();
            }

            if (!this.searchResultsQualified(scrapped, count)) {
                continue;
            }

            if (earlyReturnTimer) {
                clearTimeout(earlyReturnTimer);
            }

            chargeAmount = this.assignChargeAmount(scrapped);

            return assignTransferProtocolMeta(`${scrapped}`, { contentType: 'text/plain', envelope: null });
        }

        if (earlyReturnTimer) {
            clearTimeout(earlyReturnTimer);
        }

        if (!lastScrapped) {
            throw new AssertionFailureError(`No content available for query ${searchQuery}`);
        }

        if (!earlyReturn) {
            chargeAmount = this.assignChargeAmount(lastScrapped);
        }

        return assignTransferProtocolMeta(`${lastScrapped}`, { contentType: 'text/plain', envelope: null });
    }

    async *fetchSearchResults(
        mode: string | 'markdown' | 'html' | 'text' | 'screenshot',
        searchResults?: WebSearchResult[],
        options?: ExtraScrappingOptions,
        crawlerOptions?: CrawlerOptions,
        count?: number,
    ) {
        if (!searchResults) {
            return;
        }
        if (count === 0) {
            const resultArray = searchResults.map((upstreamSearchResult, i) => ({
                url: upstreamSearchResult.url,
                title: upstreamSearchResult.title,
                description: upstreamSearchResult.description,
                content: ['html', 'text', 'screenshot'].includes(mode) ? undefined : '',
                toString() {
                    return `[${i + 1}] Title: ${this.title}
[${i + 1}] URL Source: ${this.url}
[${i + 1}] Description: ${this.description}
`;
                }

            })) as FormattedPage[];
            resultArray.toString = function () {
                return this.map((x, i) => x ? x.toString() : '').join('\n\n').trimEnd() + '\n';
            };
            yield resultArray;
            return;
        }
        const urls = searchResults.map((x) => new URL(x.url));
        const snapshotMap = new WeakMap();
        for await (const scrapped of this.crawler.scrapMany(urls, options, crawlerOptions)) {
            const mapped = scrapped.map((x, i) => {
                const upstreamSearchResult = searchResults[i];
                if (!x || (!x.parsed && mode !== 'markdown')) {
                    return {
                        url: upstreamSearchResult.url,
                        title: upstreamSearchResult.title,
                        description: upstreamSearchResult.description,
                        content: ['html', 'text', 'screenshot'].includes(mode) ? undefined : ''
                    };
                }
                if (snapshotMap.has(x)) {
                    return snapshotMap.get(x);
                }
                return this.snapshotFormatter.formatSnapshot(mode, x, urls[i]).then((r) => {
                    r.title ??= upstreamSearchResult.title;
                    r.description = upstreamSearchResult.description;
                    snapshotMap.set(x, r);

                    return r;
                }).catch((err) => {
                    this.logger.error(`Failed to format snapshot for ${urls[i].href}`, { err: marshalErrorLike(err) });

                    return {
                        url: upstreamSearchResult.url,
                        title: upstreamSearchResult.title,
                        description: upstreamSearchResult.description,
                        content: x.text,
                    };
                });
            });

            const resultArray = await Promise.all(mapped) as FormattedPage[];

            yield this.reOrganizeSearchResults(resultArray, count);
        }
    }

    reOrganizeSearchResults(searchResults: FormattedPage[], count?: number) {
        const targetResultCount = count || this.targetResultCount;
        const [qualifiedPages, unqualifiedPages] = _.partition(searchResults, (x) => this.pageQualified(x));
        const acceptSet = new Set(qualifiedPages);

        const n = targetResultCount - qualifiedPages.length;
        for (const x of unqualifiedPages.slice(0, n >= 0 ? n : 0)) {
            acceptSet.add(x);
        }

        const filtered = searchResults.filter((x) => acceptSet.has(x)).slice(0, targetResultCount);
        filtered.toString = searchResults.toString;

        const resultArray = filtered.map((x, i) => {

            return {
                ...x,
                toString(this: any) {
                    if (!this.content && this.description) {
                        if (this.title) {
                            return `[${i + 1}] Title: ${this.title}
[${i + 1}] URL Source: ${this.url}
[${i + 1}] Description: ${this.description}
`;
                        }

                        return `[${i + 1}] No content available for ${this.url}`;
                    }

                    const mixins = [];
                    if (this.description) {
                        mixins.push(`[${i + 1}] Description: ${this.description}`);
                    }
                    if (this.publishedTime) {
                        mixins.push(`[${i + 1}] Published Time: ${this.publishedTime}`);
                    }

                    const suffixMixins = [];
                    if (this.images) {
                        const imageSummaryChunks = [`[${i + 1}] Images:`];
                        for (const [k, v] of Object.entries(this.images)) {
                            imageSummaryChunks.push(`- ![${k}](${v})`);
                        }
                        if (imageSummaryChunks.length === 1) {
                            imageSummaryChunks.push('This page does not seem to contain any images.');
                        }
                        suffixMixins.push(imageSummaryChunks.join('\n'));
                    }
                    if (this.links) {
                        const linkSummaryChunks = [`[${i + 1}] Links/Buttons:`];
                        for (const [k, v] of Object.entries(this.links)) {
                            linkSummaryChunks.push(`- [${k}](${v})`);
                        }
                        if (linkSummaryChunks.length === 1) {
                            linkSummaryChunks.push('This page does not seem to contain any buttons/links.');
                        }
                        suffixMixins.push(linkSummaryChunks.join('\n'));
                    }

                    return `[${i + 1}] Title: ${this.title}
[${i + 1}] URL Source: ${this.url}${mixins.length ? `\n${mixins.join('\n')}` : ''}
[${i + 1}] Markdown Content:
${this.content}
${suffixMixins.length ? `\n${suffixMixins.join('\n')}\n` : ''}`;
                }
            };
        });

        resultArray.toString = function () {
            return this.map((x, i) => x ? x.toString() : `[${i + 1}] No content available for ${this[i].url}`).join('\n\n').trimEnd() + '\n';
        };

        return resultArray;
    }

    assignChargeAmount(formatted: FormattedPage[]) {
        return _.sum(
            formatted.map((x) => this.crawler.assignChargeAmount(x) || 0)
        );
    }

    pageQualified(formattedPage: FormattedPage) {
        return formattedPage.title &&
            formattedPage.content ||
            formattedPage.screenshotUrl ||
            formattedPage.text ||
            formattedPage.html;
    }

    searchResultsQualified(results: FormattedPage[], targetResultCount = this.targetResultCount) {
        return _.every(results, (x) => this.pageQualified(x)) && results.length >= targetResultCount;
    }

    async cachedWebSearch(query: WebSearchQueryParams, noCache: boolean = false) {
        const queryDigest = objHashMd5B64Of(query);
        let cache;
        if (!noCache) {
            cache = (await SearchResult.fromFirestoreQuery(
                SearchResult.COLLECTION.where('queryDigest', '==', queryDigest)
                    .orderBy('createdAt', 'desc')
                    .limit(1)
            ))[0];
            if (cache) {
                const age = Date.now() - cache.createdAt.valueOf();
                const stale = cache.createdAt.valueOf() < (Date.now() - this.cacheValidMs);
                this.logger.info(`${stale ? 'Stale cache exists' : 'Cache hit'} for search query "${query.q}", normalized digest: ${queryDigest}, ${age}ms old`, {
                    query, digest: queryDigest, age, stale
                });

                if (!stale) {
                    return cache.response as WebSearchApiResponse;
                }
            }
        }

        try {
            const r = await this.braveSearchService.webSearch(query);

            const nowDate = new Date();
            const record = SearchResult.from({
                query,
                queryDigest,
                response: r,
                createdAt: nowDate,
                expireAt: new Date(nowDate.valueOf() + this.cacheRetentionMs)
            });
            SearchResult.save(record.degradeForFireStore()).catch((err) => {
                this.logger.warn(`Failed to cache search result`, { err });
            });

            return r;
        } catch (err: any) {
            if (cache) {
                this.logger.warn(`Failed to fetch search result, but a stale cache is available. falling back to stale cache`, { err: marshalErrorLike(err) });

                return cache.response as WebSearchApiResponse;
            }

            throw err;
        }

    }
}

================
File: backend/functions/src/db/adaptive-crawl-task.ts
================
import { Also, Prop, parseJSONText } from 'civkit';
import { FirestoreRecord } from '../shared/lib/firestore';
import _ from 'lodash';

export enum AdaptiveCrawlTaskStatus {
    PENDING = 'pending',
    PROCESSING = 'processing',
    COMPLETED = 'completed',
    FAILED = 'failed',
}

@Also({
    dictOf: Object
})
export class AdaptiveCrawlTask extends FirestoreRecord {
    static override collectionName = 'adaptiveCrawlTasks';

    override _id!: string;

    @Prop({
        required: true
    })
    status!: AdaptiveCrawlTaskStatus;

    @Prop({
        required: true
    })
    statusText!: string;

    @Prop()
    meta!: {
        useSitemap: boolean;
        maxPages: number;
        targetUrl: string;
    };

    @Prop()
    urls!: string[];

    @Prop()
    processed!: {
        [url: string]: string;
    };

    @Prop()
    failed!: {
        [url: string]: any;
    };

    @Prop()
    createdAt!: Date;

    @Prop()
    finishedAt?: Date;

    @Prop()
    duration?: number;

    static patchedFields = [
        'meta',
    ];

    static override from(input: any) {
        for (const field of this.patchedFields) {
            if (typeof input[field] === 'string') {
                input[field] = parseJSONText(input[field]);
            }
        }

        return super.from(input) as AdaptiveCrawlTask;
    }

    override degradeForFireStore() {
        const copy: any = { ...this };

        for (const field of (this.constructor as typeof AdaptiveCrawlTask).patchedFields) {
            if (typeof copy[field] === 'object') {
                copy[field] = JSON.stringify(copy[field]) as any;
            }
        }

        return copy;
    }

    [k: string]: any;
}

================
File: backend/functions/src/db/crawled.ts
================
import { Also, parseJSONText, Prop } from 'civkit';
import { FirestoreRecord } from '../shared/lib/firestore';
import _ from 'lodash';
import type { PageSnapshot } from '../services/puppeteer';

@Also({
    dictOf: Object
})
export class Crawled extends FirestoreRecord {
    static override collectionName = 'crawled';

    override _id!: string;

    @Prop({
        required: true
    })
    url!: string;

    @Prop({
        required: true
    })
    urlPathDigest!: string;

    @Prop()
    snapshot?: PageSnapshot & { screenshot: never; pageshot: never; };

    @Prop()
    screenshotAvailable?: boolean;

    @Prop()
    pageshotAvailable?: boolean;

    @Prop()
    snapshotAvailable?: boolean;

    @Prop()
    createdAt!: Date;

    @Prop()
    expireAt!: Date;

    static patchedFields = [
        'snapshot'
    ];

    static override from(input: any) {
        for (const field of this.patchedFields) {
            if (typeof input[field] === 'string') {
                input[field] = parseJSONText(input[field]);
            }
        }

        return super.from(input) as Crawled;
    }

    override degradeForFireStore() {
        const copy: any = { ...this };

        for (const field of (this.constructor as typeof Crawled).patchedFields) {
            if (typeof copy[field] === 'object') {
                copy[field] = JSON.stringify(copy[field]) as any;
            }
        }

        return copy;
    }

    [k: string]: any;
}

================
File: backend/functions/src/db/domain-blockade.ts
================
import { Also, Prop } from 'civkit';
import { FirestoreRecord } from '../shared/lib/firestore';

@Also({
    dictOf: Object
})
export class DomainBlockade extends FirestoreRecord {
    static override collectionName = 'domainBlockades';

    override _id!: string;

    @Prop({
        required: true
    })
    domain!: string;

    @Prop({ required: true })
    triggerReason!: string;

    @Prop()
    triggerUrl?: string;

    @Prop()
    createdAt!: Date;

    @Prop()
    expireAt?: Date;

    [k: string]: any;
}

================
File: backend/functions/src/db/domain-profile.ts
================
import { Also, Prop } from 'civkit';
import { FirestoreRecord } from '../shared/lib/firestore';
import { ENGINE_TYPE } from '../dto/scrapping-options';

@Also({
    dictOf: Object
})
export class DomainProfile extends FirestoreRecord {
    static override collectionName = 'domainProfiles';

    override _id!: string;

    @Prop({
        required: true
    })
    path!: string;

    @Prop()
    triggerUrl?: string;

    @Prop({ required: true, type: ENGINE_TYPE })
    engine!: string;

    @Prop()
    createdAt!: Date;

    @Prop()
    expireAt?: Date;

    [k: string]: any;
}

================
File: backend/functions/src/db/img-alt.ts
================
import { Also, Prop } from 'civkit';
import { FirestoreRecord } from '../shared/lib/firestore';
import _ from 'lodash';

@Also({
    dictOf: Object
})
export class ImgAlt extends FirestoreRecord {
    static override collectionName = 'imgAlts';

    override _id!: string;

    @Prop({
        required: true
    })
    src!: string;

    @Prop({
        required: true
    })
    urlDigest!: string;

    @Prop()
    width?: number;

    @Prop()
    height?: number;

    @Prop()
    generatedAlt?: string;

    @Prop()
    originalAlt?: string;

    @Prop()
    createdAt!: Date;

    @Prop()
    expireAt?: Date;

    [k: string]: any;
}

================
File: backend/functions/src/db/pdf.ts
================
import { Also, Prop, parseJSONText } from 'civkit';
import { FirestoreRecord } from '../shared/lib/firestore';
import _ from 'lodash';

@Also({
    dictOf: Object
})
export class PDFContent extends FirestoreRecord {
    static override collectionName = 'pdfs';

    override _id!: string;

    @Prop({
        required: true
    })
    src!: string;

    @Prop({
        required: true
    })
    urlDigest!: string;

    @Prop()
    meta?: { [k: string]: any; };

    @Prop()
    text?: string;

    @Prop()
    content?: string;

    @Prop()
    createdAt!: Date;

    @Prop()
    expireAt?: Date;

    static patchedFields = [
        'meta'
    ];

    static override from(input: any) {
        for (const field of this.patchedFields) {
            if (typeof input[field] === 'string') {
                input[field] = parseJSONText(input[field]);
            }
        }

        return super.from(input) as PDFContent;
    }

    override degradeForFireStore() {
        const copy: any = { ...this };

        for (const field of (this.constructor as typeof PDFContent).patchedFields) {
            if (typeof copy[field] === 'object') {
                copy[field] = JSON.stringify(copy[field]) as any;
            }
        }

        return copy;
    }

    [k: string]: any;
}

================
File: backend/functions/src/db/searched.ts
================
import { Also, parseJSONText, Prop } from 'civkit';
import { FirestoreRecord } from '../shared/lib/firestore';
import _ from 'lodash';

@Also({
    dictOf: Object
})
export class SearchResult extends FirestoreRecord {
    static override collectionName = 'searchResults';

    override _id!: string;

    @Prop({
        required: true
    })
    query!: any;

    @Prop({
        required: true
    })
    queryDigest!: string;

    @Prop()
    response?: any;

    @Prop()
    createdAt!: Date;

    @Prop()
    expireAt?: Date;

    [k: string]: any;

    static patchedFields = [
        'query',
        'response',
    ];

    static override from(input: any) {
        for (const field of this.patchedFields) {
            if (typeof input[field] === 'string') {
                input[field] = parseJSONText(input[field]);
            }
        }

        return super.from(input) as SearchResult;
    }

    override degradeForFireStore() {
        const copy: any = { ...this };

        for (const field of (this.constructor as typeof SearchResult).patchedFields) {
            if (typeof copy[field] === 'object') {
                copy[field] = JSON.stringify(copy[field]) as any;
            }
        }

        return copy;
    }
}

================
File: backend/functions/src/dto/adaptive-crawler-options.ts
================
import { Also, AutoCastable, Prop, RPC_CALL_ENVIRONMENT } from 'civkit';
import type { Request, Response } from 'express';


@Also({
    openapi: {
        operation: {
            parameters: {
                'X-Use-Sitemap': {
                    description: 'Use sitemap to crawl the website.',
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Max-Depth': {
                    description: 'Max deep level to crawl.',
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Max-Pages': {
                    description: 'Max number of pages to crawl.',
                    in: 'header',
                    schema: { type: 'string' }
                },
            }
        }
    }
})
export class AdaptiveCrawlerOptions extends AutoCastable {
    @Prop({
        default: true,
        desc: 'Use sitemap to crawl the website.',
    })
    useSitemap!: boolean;

    @Prop({
        default: 10,
        desc: 'Max number of pages to crawl.',
        validate: (v: number) => v >= 1 && v <= 100,
    })
    maxPages!: number;

    static override from(input: any) {
        const instance = super.from(input) as AdaptiveCrawlerOptions;
        const ctx = Reflect.get(input, RPC_CALL_ENVIRONMENT) as {
            req: Request,
            res: Response,
        } | undefined;

        let maxPages = parseInt(ctx?.req.get('x-max-pages') || '');
        if (!isNaN(maxPages) && maxPages > 0) {
            instance.maxPages = maxPages <= 100 ? maxPages : 100;
        }

        const useSitemap = ctx?.req.get('x-use-sitemap');
        if (useSitemap !== undefined) {
            instance.useSitemap = Boolean(useSitemap);
        }

        return instance;
    }
}

================
File: backend/functions/src/dto/scrapping-options.ts
================
import { Also, AutoCastable, ParamValidationError, Prop, RPC_CALL_ENVIRONMENT } from 'civkit'; // Adjust the import based on where your decorators are defined
import type { Request, Response } from 'express';
import { Cookie, parseString as parseSetCookieString } from 'set-cookie-parser';

export enum CONTENT_FORMAT {
    CONTENT = 'content',
    MARKDOWN = 'markdown',
    HTML = 'html',
    TEXT = 'text',
    PAGESHOT = 'pageshot',
    SCREENSHOT = 'screenshot',
    VLM = 'vlm',
    READER_LM = 'readerlm-v2',
}

export enum ENGINE_TYPE {
    AUTO = 'auto',
    BROWSER = 'browser',
    DIRECT = 'direct',
    VLM = 'vlm',
    READER_LM = 'readerlm-v2',
}

const CONTENT_FORMAT_VALUES = new Set<string>(Object.values(CONTENT_FORMAT));

export const IMAGE_RETENTION_MODES = ['none', 'all', 'alt', 'all_p', 'alt_p'] as const;
const IMAGE_RETENTION_MODE_VALUES = new Set<string>(IMAGE_RETENTION_MODES);
export const BASE_URL_MODES = ['initial', 'final'] as const;
const BASE_URL_MODE_VALUES = new Set<string>(BASE_URL_MODES);

class Viewport extends AutoCastable {
    @Prop({
        default: 1024
    })
    width!: number;
    @Prop({
        default: 1024
    })
    height!: number;
    @Prop()
    deviceScaleFactor?: number;
    @Prop()
    isMobile?: boolean;
    @Prop()
    isLandscape?: boolean;
    @Prop()
    hasTouch?: boolean;
}

@Also({
    openapi: {
        operation: {
            parameters: {
                'Accept': {
                    description: `Specifies your preference for the response format.\n\n` +
                        `Supported formats: \n` +
                        `- text/event-stream\n` +
                        `- application/json or text/json\n` +
                        `- text/plain`
                    ,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Cache-Tolerance': {
                    description: `Sets internal cache tolerance in seconds if this header is specified with a integer.`,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-No-Cache': {
                    description: `Ignores internal cache if this header is specified with a value.\n\nEquivalent to X-Cache-Tolerance: 0`,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Respond-With': {
                    description: `Specifies the (non-default) form factor of the crawled data you prefer.\n\n` +
                        `Supported formats: \n` +
                        `- markdown\n` +
                        `- html\n` +
                        `- text\n` +
                        `- pageshot\n` +
                        `- screenshot\n` +
                        `- content\n` +
                        `- any combination of the above\n\n` +
                        `Default: content\n`
                    ,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Wait-For-Selector': {
                    description: `Specifies a CSS selector to wait for the appearance of such an element before returning.\n\n` +
                        'Example: `X-Wait-For-Selector: .content-block`\n'
                    ,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Target-Selector': {
                    description: `Specifies a CSS selector for return target instead of the full html.\n\n` +
                        'Implies `X-Wait-For-Selector: (same selector)`'
                    ,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Remove-Selector': {
                    description: `Specifies a CSS selector to remove elements from the full html.\n\n` +
                        'Example `X-Remove-Selector: nav`'
                    ,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Keep-Img-Data-Url': {
                    description: `Keep data-url as it instead of transforming them to object-url. (Only applicable when targeting markdown format)\n\n` +
                        'Example `X-Keep-Img-Data-Url: true`'
                    ,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Proxy-Url': {
                    description: `Specifies your custom proxy if you prefer to use one.\n\n` +
                        `Supported protocols: \n` +
                        `- http\n` +
                        `- https\n` +
                        `- socks4\n` +
                        `- socks5\n\n` +
                        `For authentication, https://user:pass@host:port`,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Set-Cookie': {
                    description: `Sets cookie(s) to the headless browser for your request. \n\n` +
                        `Syntax is the same with standard Set-Cookie`,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-With-Generated-Alt': {
                    description: `Enable automatic alt-text generating for images without an meaningful alt-text.\n\n` +
                        `Note: Does not work when \`X-Respond-With\` is specified`,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-With-Images-Summary': {
                    description: `Enable dedicated summary section for images on the page.`,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-With-links-Summary': {
                    description: `Enable dedicated summary section for hyper links on the page.`,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Retain-Images': {
                    description: `Image retention modes.\n\n` +
                        `Supported modes: \n` +
                        `- all: all images\n` +
                        `- none: no images\n` +
                        `- alt: only alt text\n` +
                        `- all_p: all images and with generated alt text\n` +
                        `- alt_p: only alt text and with generated alt\n\n`,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-With-Iframe': {
                    description: `Enable filling iframe contents into main. (violates standards)`,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-With-Shadow-Dom': {
                    description: `Enable filling shadow dom contents into main. (violates standards)`,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-User-Agent': {
                    description: `Override User-Agent.`,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Timeout': {
                    description: `Specify timeout in seconds. Max 180.`,
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Locale': {
                    description: 'Specify browser locale for the page.',
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Referer': {
                    description: 'Specify referer for the page.',
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Token-Budget': {
                    description: 'Specify a budget in tokens.\n\nIf the resulting token cost exceeds the budget, the request is rejected.',
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Engine': {
                    description: 'Specify the engine to use for crawling.\n\nSupported: browser, direct, vlm, readerlm-v2',
                    in: 'header',
                    schema: { type: 'string' }
                },
                'X-Base': {
                    description: 'Select base modes of relative URLs.\n\nSupported: initial, final',
                    in: 'header',
                    schema: { type: 'string' }
                },
            }
        }
    }
})
export class CrawlerOptions extends AutoCastable {

    @Prop()
    url?: string;

    @Prop()
    html?: string;

    @Prop({
        type: BASE_URL_MODE_VALUES,
        default: 'initial',
    })
    base?: typeof BASE_URL_MODES[number];

    @Prop({
        desc: 'Base64 encoded PDF.',
        type: [File, String]
    })
    pdf?: File | string;

    @Prop({
        default: CONTENT_FORMAT.CONTENT,
        type: [CONTENT_FORMAT, String]
    })
    respondWith!: string;

    @Prop({
        default: false,
    })
    withGeneratedAlt!: boolean;

    @Prop({ default: 'all', type: IMAGE_RETENTION_MODE_VALUES })
    retainImages?: typeof IMAGE_RETENTION_MODES[number];

    @Prop({
        default: false,
    })
    withLinksSummary!: boolean | string;

    @Prop({
        default: false,
    })
    withImagesSummary!: boolean;

    @Prop({
        default: false,
    })
    noCache!: boolean;

    @Prop({
        default: false,
    })
    noGfm!: string | boolean;

    @Prop()
    cacheTolerance?: number;

    @Prop({ arrayOf: String })
    targetSelector?: string | string[];

    @Prop({ arrayOf: String })
    waitForSelector?: string | string[];

    @Prop({ arrayOf: String })
    removeSelector?: string | string[];

    @Prop({
        default: false,
    })
    keepImgDataUrl!: boolean;

    @Prop({
        default: false,
        type: [String, Boolean]
    })
    withIframe!: boolean | 'quoted';

    @Prop({
        default: false,
    })
    withShadowDom!: boolean;

    @Prop({
        arrayOf: String,
    })
    setCookies?: Cookie[];

    @Prop()
    proxyUrl?: string;

    @Prop()
    userAgent?: string;

    @Prop()
    engine?: string;

    @Prop({
        arrayOf: String,
    })
    injectPageScript?: string[];

    @Prop({
        arrayOf: String,
    })
    injectFrameScript?: string[];

    @Prop({
        validate: (v: number) => v > 0 && v <= 180,
        type: Number,
        nullable: true,
    })
    timeout?: number | null;

    @Prop()
    locale?: string;

    @Prop()
    referer?: string;

    @Prop()
    tokenBudget?: number;

    @Prop()
    viewport?: Viewport;

    @Prop()
    instruction?: string;

    @Prop()
    jsonSchema?: object;

    static override from(input: any) {
        const instance = super.from(input) as CrawlerOptions;
        const ctx = Reflect.get(input, RPC_CALL_ENVIRONMENT) as {
            req: Request,
            res: Response,
        } | undefined;

        const customMode = ctx?.req.get('x-respond-with') || ctx?.req.get('x-return-format');
        if (customMode !== undefined) {
            instance.respondWith = customMode;
        }
        if (instance.respondWith) {
            instance.respondWith = instance.respondWith.toLowerCase();
        }
        if (instance.respondWith?.includes('lm')) {
            if (instance.respondWith.includes('content') || instance.respondWith.includes('markdown')) {
                throw new ParamValidationError({
                    path: 'respondWith',
                    message: `LM formats conflicts with content/markdown.`,
                });
            }
        }

        const locale = ctx?.req.get('x-locale');
        if (locale !== undefined) {
            instance.locale = locale;
        }

        const referer = ctx?.req.get('x-referer');
        if (referer !== undefined) {
            instance.referer = referer;
        }

        const withGeneratedAlt = ctx?.req.get('x-with-generated-alt');
        if (withGeneratedAlt !== undefined) {
            instance.withGeneratedAlt = Boolean(withGeneratedAlt);
        }
        const withLinksSummary = ctx?.req.get('x-with-links-summary');
        if (withLinksSummary !== undefined) {
            if (withLinksSummary === 'all') {
                instance.withLinksSummary = withLinksSummary;
            } else {
                instance.withLinksSummary = Boolean(withLinksSummary);
            }
        }
        const withImagesSummary = ctx?.req.get('x-with-images-summary');
        if (withImagesSummary !== undefined) {
            instance.withImagesSummary = Boolean(withImagesSummary);
        }
        const retainImages = ctx?.req.get('x-retain-images');
        if (retainImages && IMAGE_RETENTION_MODE_VALUES.has(retainImages)) {
            instance.retainImages = retainImages as any;
        }
        if (instance.withGeneratedAlt) {
            instance.retainImages = 'all_p';
        }
        const noCache = ctx?.req.get('x-no-cache');
        if (noCache !== undefined) {
            instance.noCache = Boolean(noCache);
        }
        if (instance.noCache && instance.cacheTolerance === undefined) {
            instance.cacheTolerance = 0;
        }
        let cacheTolerance = parseInt(ctx?.req.get('x-cache-tolerance') || '');
        if (!isNaN(cacheTolerance)) {
            instance.cacheTolerance = cacheTolerance;
        }

        const noGfm = ctx?.req.get('x-no-gfm');
        if (noGfm) {
            instance.noGfm = noGfm === 'table' ? noGfm : Boolean(noGfm);
        }

        let timeoutSeconds = parseInt(ctx?.req.get('x-timeout') || '');
        if (!isNaN(timeoutSeconds) && timeoutSeconds > 0) {
            instance.timeout = timeoutSeconds <= 180 ? timeoutSeconds : 180;
        } else if (ctx?.req.get('x-timeout')) {
            instance.timeout = null;
        }

        const removeSelector = ctx?.req.get('x-remove-selector')?.split(', ');
        instance.removeSelector ??= removeSelector;
        const targetSelector = ctx?.req.get('x-target-selector')?.split(', ');
        instance.targetSelector ??= targetSelector;
        const waitForSelector = ctx?.req.get('x-wait-for-selector')?.split(', ');
        instance.waitForSelector ??= waitForSelector || instance.targetSelector;
        instance.targetSelector = filterSelector(instance.targetSelector);
        const overrideUserAgent = ctx?.req.get('x-user-agent');
        instance.userAgent ??= overrideUserAgent;

        const engine = ctx?.req.get('x-engine');
        if (engine) {
            instance.engine = engine;
        }
        if (instance.engine) {
            instance.engine = instance.engine.toLowerCase();
        }
        if (instance.engine === ENGINE_TYPE.VLM) {
            instance.engine = ENGINE_TYPE.BROWSER;
            instance.respondWith = CONTENT_FORMAT.VLM;
        } else if (instance.engine === ENGINE_TYPE.READER_LM) {
            instance.engine = ENGINE_TYPE.AUTO;
            instance.respondWith = CONTENT_FORMAT.READER_LM;
        }

        const keepImgDataUrl = ctx?.req.get('x-keep-img-data-url');
        if (keepImgDataUrl !== undefined) {
            instance.keepImgDataUrl = Boolean(keepImgDataUrl);
        }
        const withIframe = ctx?.req.get('x-with-iframe');
        if (withIframe !== undefined) {
            instance.withIframe = withIframe.toLowerCase() === 'quoted' ? 'quoted' : Boolean(withIframe);
        }
        if (instance.withIframe) {
            instance.timeout ??= null;
        }
        const withShadowDom = ctx?.req.get('x-with-shadow-dom');
        if (withShadowDom) {
            instance.withShadowDom = Boolean(withShadowDom);
        }
        if (instance.withShadowDom) {
            instance.timeout ??= null;
        }

        const cookies: Cookie[] = [];
        const setCookieHeaders = ctx?.req.get('x-set-cookie')?.split(', ') || (instance.setCookies as any as string[]);
        if (Array.isArray(setCookieHeaders)) {
            for (const setCookie of setCookieHeaders) {
                cookies.push({
                    ...parseSetCookieString(setCookie, { decodeValues: true }),
                });
            }
        } else if (setCookieHeaders && typeof setCookieHeaders === 'string') {
            cookies.push({
                ...parseSetCookieString(setCookieHeaders, { decodeValues: true }),
            });
        }
        instance.setCookies = cookies;

        const proxyUrl = ctx?.req.get('x-proxy-url');
        instance.proxyUrl ??= proxyUrl;

        if (instance.cacheTolerance) {
            instance.cacheTolerance = instance.cacheTolerance * 1000;
        }

        const tokenBudget = ctx?.req.get('x-token-budget') || undefined;
        instance.tokenBudget ??= parseInt(tokenBudget || '') || undefined;

        const baseMode = ctx?.req.get('x-base') || undefined;
        if (baseMode) {
            instance.base = baseMode as any;
        }

        if (instance.cacheTolerance) {
            instance.cacheTolerance = instance.cacheTolerance * 1000;
        }

        return instance;
    }

    isEarlyReturnApplicable() {
        if (this.timeout !== undefined) {
            return false;
        }
        if (this.waitForSelector?.length) {
            return false;
        }
        if (this.injectFrameScript?.length || this.injectPageScript?.length) {
            return false;
        }
        if (this.respondWith.includes('lm')) {
            return false;
        }

        return true;
    }

    isCacheQueryApplicable() {
        if (this.noCache) {
            return false;
        }
        if (this.cacheTolerance === 0) {
            return false;
        }
        if (this.setCookies?.length) {
            return false;
        }
        if (this.injectFrameScript?.length || this.injectPageScript?.length) {
            return false;
        }
        if (this.viewport) {
            return false;
        }

        return true;
    }

    isRequestingCompoundContentFormat() {
        return !CONTENT_FORMAT_VALUES.has(this.respondWith);
    }

    browserIsNotRequired() {
        if (this.respondWith.includes(CONTENT_FORMAT.PAGESHOT) || this.respondWith.includes(CONTENT_FORMAT.SCREENSHOT)) {
            return false;
        }
        if (this.injectFrameScript?.length || this.injectPageScript?.length) {
            return false;
        }
        if (this.waitForSelector?.length) {
            return false;
        }
        if (this.withIframe || this.withShadowDom) {
            return false;
        }
        if (this.viewport) {
            return false;
        }
        if (this.pdf) {
            return false;
        }
        if (this.html) {
            return false;
        }

        return true;
    }
}

export class CrawlerOptionsHeaderOnly extends CrawlerOptions {
    static override from(input: any) {
        const instance = super.from({
            [RPC_CALL_ENVIRONMENT]: Reflect.get(input, RPC_CALL_ENVIRONMENT),
        }) as CrawlerOptionsHeaderOnly;

        return instance;
    }
}

function filterSelector(s?: string | string[]) {
    if (!s) {
        return s;
    }
    const sr = Array.isArray(s) ? s : [s];
    const selectors = sr.filter((i) => {
        const innerSelectors = i.split(',').map((s) => s.trim());
        const someViolation = innerSelectors.find((x) => x.startsWith('*') || x.startsWith(':') || x.includes('*:'));
        if (someViolation) {
            return false;
        }
        return true;
    });

    return selectors;
};

================
File: backend/functions/src/services/alt-text.ts
================
import { AssertionFailureError, AsyncService, HashManager } from 'civkit';
import { singleton } from 'tsyringe';
import { Logger } from '../shared/services/logger';
import { CanvasService } from '../shared/services/canvas';
import { ImageInterrogationManager } from '../shared/services/common-iminterrogate';
import { ImgBrief } from './puppeteer';
import { ImgAlt } from '../db/img-alt';

const md5Hasher = new HashManager('md5', 'hex');

@singleton()
export class AltTextService extends AsyncService {

    altsToIgnore = 'image,img,photo,picture,pic,alt,figure,fig'.split(',');
    logger = this.globalLogger.child({ service: this.constructor.name });

    constructor(
        protected globalLogger: Logger,
        protected imageInterrogator: ImageInterrogationManager,
        protected canvasService: CanvasService
    ) {
        super(...arguments);
    }

    override async init() {
        await this.dependencyReady();
        this.emit('ready');
    }

    async caption(url: string) {
        try {
            const img = await this.canvasService.loadImage(url);
            const resized = this.canvasService.fitImageToSquareBox(img, 1024);
            const exported = await this.canvasService.canvasToBuffer(resized, 'image/png');

            const r = await this.imageInterrogator.interrogate('vertex-gemini-1.5-flash-002', {
                image: exported,
                prompt: `Yield a concise image caption sentence in third person.`,
                system: 'You are BLIP2, an image caption model.',
            });

            return r.replaceAll(/[\n\"]|(\.\s*$)/g, '').trim();
        } catch (err) {
            throw new AssertionFailureError({ message: `Could not generate alt text for url ${url}`, cause: err });
        }
    }

    async getAltText(imgBrief: ImgBrief) {
        if (!imgBrief.src) {
            return undefined;
        }
        if (imgBrief.alt && !this.altsToIgnore.includes(imgBrief.alt.trim().toLowerCase())) {
            return imgBrief.alt;
        }
        const digest = md5Hasher.hash(imgBrief.src);
        const shortDigest = Buffer.from(digest, 'hex').toString('base64url');

        const existing = await ImgAlt.fromFirestore(shortDigest);

        if (existing) {
            return existing.generatedAlt || existing.originalAlt || '';
        }

        let generatedCaption = '';

        try {
            generatedCaption = await this.caption(imgBrief.src);
        } catch (err) {
            this.logger.warn(`Unable to generate alt text for ${imgBrief.src}`, { err });
        }

        // Don't try again until the next day
        const expireMixin = generatedCaption ? {} : { expireAt: new Date(Date.now() + 1000 * 3600 * 24) };

        await ImgAlt.COLLECTION.doc(shortDigest).set(
            {
                _id: shortDigest,
                src: imgBrief.src || '',
                width: imgBrief.naturalWidth || 0,
                height: imgBrief.naturalHeight || 0,
                urlDigest: digest,
                originalAlt: imgBrief.alt || '',
                generatedAlt: generatedCaption || '',
                createdAt: new Date(),
                ...expireMixin
            }, { merge: true }
        );

        return generatedCaption;
    }
}

================
File: backend/functions/src/services/brave-search.ts
================
import { AsyncService, AutoCastable, DownstreamServiceFailureError, Prop, RPC_CALL_ENVIRONMENT, delay, marshalErrorLike } from 'civkit';
import { singleton } from 'tsyringe';
import { Logger } from '../shared/services/logger';
import { SecretExposer } from '../shared/services/secrets';
import { BraveSearchHTTP, WebSearchQueryParams } from '../shared/3rd-party/brave-search';
import { GEOIP_SUPPORTED_LANGUAGES, GeoIPService } from './geoip';
import { AsyncContext } from '../shared';
import { WebSearchOptionalHeaderOptions } from '../shared/3rd-party/brave-types';
import type { Request, Response } from 'express';

@singleton()
export class BraveSearchService extends AsyncService {

    logger = this.globalLogger.child({ service: this.constructor.name });

    braveSearchHTTP!: BraveSearchHTTP;

    constructor(
        protected globalLogger: Logger,
        protected secretExposer: SecretExposer,
        protected geoipControl: GeoIPService,
        protected threadLocal: AsyncContext,
    ) {
        super(...arguments);
    }

    override async init() {
        await this.dependencyReady();
        this.emit('ready');

        this.braveSearchHTTP = new BraveSearchHTTP(this.secretExposer.BRAVE_SEARCH_API_KEY);
    }

    async webSearch(query: WebSearchQueryParams) {
        const ip = this.threadLocal.get('ip');
        const extraHeaders: WebSearchOptionalHeaderOptions = {};
        if (ip) {
            const geoip = await this.geoipControl.lookupCity(ip, GEOIP_SUPPORTED_LANGUAGES.EN);

            if (geoip?.city) {
                extraHeaders['X-Loc-City'] = encodeURIComponent(geoip.city);
            }
            if (geoip?.country) {
                extraHeaders['X-Loc-Country'] = geoip.country.code;
            }
            if (geoip?.timezone) {
                extraHeaders['X-Loc-Timezone'] = geoip.timezone;
            }
            if (geoip?.coordinates) {
                extraHeaders['X-Loc-Lat'] = `${geoip.coordinates[0]}`;
                extraHeaders['X-Loc-Long'] = `${geoip.coordinates[1]}`;
            }
            if (geoip?.subdivisions?.length) {
                extraHeaders['X-Loc-State'] = encodeURIComponent(`${geoip.subdivisions[0].code}`);
                extraHeaders['X-Loc-State-Name'] = encodeURIComponent(`${geoip.subdivisions[0].name}`);
            }
        }
        if (this.threadLocal.get('userAgent')) {
            extraHeaders['User-Agent'] = this.threadLocal.get('userAgent');
        }

        const encoded = { ...query };
        if (encoded.q) {
            encoded.q = (Buffer.from(encoded.q).toString('ascii') === encoded.q) ? encoded.q : encodeURIComponent(encoded.q);
        }

        let maxTries = 11;

        while (maxTries--) {
            try {
                const r = await this.braveSearchHTTP.webSearch(encoded, { headers: extraHeaders as Record<string, string> });

                return r.parsed;
            } catch (err: any) {
                this.logger.error(`Web search failed: ${err?.message}`, { err: marshalErrorLike(err) });
                if (err?.status === 429) {
                    await delay(500 + 1000 * Math.random());
                    continue;
                }

                throw new DownstreamServiceFailureError({ message: `Search failed` });
            }
        }

        throw new DownstreamServiceFailureError({ message: `Search failed` });
    }

}


export class BraveSearchExplicitOperatorsDto extends AutoCastable {
    @Prop({
        arrayOf: String,
        desc: `Returns web pages with a specific file extension. Example: to find the Honda GX120 Owner’s manual in PDF, type “Honda GX120 ownners manual ext:pdf”.`
    })
    ext?: string | string[];

    @Prop({
        arrayOf: String,
        desc: `Returns web pages created in the specified file type. Example: to find a web page created in PDF format about the evaluation of age-related cognitive changes, type “evaluation of age cognitive changes filetype:pdf”.`
    })
    filetype?: string | string[];

    @Prop({
        arrayOf: String,
        desc: `Returns web pages containing the specified term in the body of the page. Example: to find information about the Nvidia GeForce GTX 1080 Ti, making sure the page contains the keywords “founders edition” in the body, type “nvidia 1080 ti inbody:“founders edition””.`
    })
    inbody?: string | string[];

    @Prop({
        arrayOf: String,
        desc: `Returns webpages containing the specified term in the title of the page. Example: to find pages about SEO conferences making sure the results contain 2023 in the title, type “seo conference intitle:2023”.`
    })
    intitle?: string | string[];

    @Prop({
        arrayOf: String,
        desc: `Returns webpages containing the specified term either in the title or in the body of the page. Example: to find pages about the 2024 Oscars containing the keywords “best costume design” in the page, type “oscars 2024 inpage:“best costume design””.`
    })
    inpage?: string | string[];

    @Prop({
        arrayOf: String,
        desc: `Returns web pages written in the specified language. The language code must be in the ISO 639-1 two-letter code format. Example: to find information on visas only in Spanish, type “visas lang:es”.`
    })
    lang?: string | string[];

    @Prop({
        arrayOf: String,
        desc: `Returns web pages written in the specified language. The language code must be in the ISO 639-1 two-letter code format. Example: to find information on visas only in Spanish, type “visas lang:es”.`
    })
    loc?: string | string[];

    @Prop({
        arrayOf: String,
        desc: `Returns web pages coming only from a specific web site. Example: to find information about Goggles only on Brave pages, type “goggles site:brave.com”.`
    })
    site?: string | string[];

    addTo(searchTerm: string) {
        const chunks = [];
        for (const [key, value] of Object.entries(this)) {
            if (value) {
                const values = Array.isArray(value) ? value : [value];
                const textValue = values.map((v) => `${key}:${v}`).join(' OR ');
                if (textValue) {
                    chunks.push(textValue);
                }
            }
        }
        const opPart = chunks.length > 1 ? chunks.map((x) => `(${x})`).join(' AND ') : chunks;

        if (opPart.length) {
            return [searchTerm, opPart].join(' ');
        }

        return searchTerm;
    }

    static override from(input: any) {
        const instance = super.from(input) as BraveSearchExplicitOperatorsDto;
        const ctx = Reflect.get(input, RPC_CALL_ENVIRONMENT) as {
            req: Request,
            res: Response,
        } | undefined;

        const params = ['ext', 'filetype', 'inbody', 'intitle', 'inpage', 'lang', 'loc', 'site'];

        for (const p of params) {
            const customValue = ctx?.req.get(`x-${p}`) || ctx?.req.get(`${p}`);
            if (!customValue) {
                continue;
            }

            const filtered = customValue.split(', ').filter(Boolean);
            if (filtered.length) {
                Reflect.set(instance, p, filtered);
            }
        }

        return instance;
    }
}

================
File: backend/functions/src/services/curl.ts
================
import { marshalErrorLike } from 'civkit/lang';
import { AsyncService } from 'civkit/async-service';
import { singleton } from 'tsyringe';

import { Curl, CurlFeature, HeaderInfo } from 'node-libcurl';
import { PageSnapshot, ScrappingOptions } from './puppeteer';
import { Logger } from '../shared/services/logger';
import { JSDomControl } from './jsdom';
import { AssertionFailureError, FancyFile } from 'civkit';
import { TempFileManager } from '../shared';
import { readFile } from 'fs/promises';
import { pathToFileURL } from 'url';
import { createBrotliDecompress, createInflate, createGunzip } from 'zlib';

@singleton()
export class CurlControl extends AsyncService {

    logger = this.globalLogger.child({ service: this.constructor.name });

    constructor(
        protected globalLogger: Logger,
        protected jsdomControl: JSDomControl,
        protected tempFileManager: TempFileManager,
    ) {
        super(...arguments);
    }

    override async init() {
        await this.dependencyReady();

        this.emit('ready');
    }

    curlImpersonateHeader(curl: Curl, headers?: object, chromeVersion: number = 132) {
        const mixinHeaders = {
            'sch-ch-ua': `Not A(Brand";v="8", "Chromium";v="${chromeVersion}", "Google Chrome";v="${chromeVersion}"`,
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': 'Windows',
            'Upgrade-Insecure-Requests': '1',
            'User-Agent': `Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${chromeVersion}.0.0.0 Safari/537.36`,
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'Sec-Fetch-Site': 'none',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-User': '?1',
            'Sec-Fetch-Dest': 'document',
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept-Language': 'en-US,en;q=0.9',
        };

        curl.setOpt(Curl.option.HTTPHEADER, Object.entries({ ...mixinHeaders, ...headers }).map(([k, v]) => `${k}: ${v}`));

        return curl;
    }

    async urlToSnapshot(urlToCrawl: URL, crawlOpts?: ScrappingOptions, throwOnNon200 = false): Promise<PageSnapshot> {
        const snapshot = {
            href: urlToCrawl.toString(),
            html: '',
            title: '',
            text: '',
        } as PageSnapshot;

        let contentType = '';
        const result = await new Promise<{
            statusCode: number,
            data?: FancyFile,
            headers: Buffer | HeaderInfo[],
        }>((resolve, reject) => {
            const curl = new Curl();
            curl.enable(CurlFeature.StreamResponse);
            curl.setOpt('URL', urlToCrawl.toString());
            curl.setOpt(Curl.option.FOLLOWLOCATION, true);

            curl.setOpt(Curl.option.TIMEOUT_MS, Math.min(10_000, crawlOpts?.timeoutMs || 10_000));

            if (crawlOpts?.overrideUserAgent) {
                curl.setOpt(Curl.option.USERAGENT, crawlOpts.overrideUserAgent);
            }

            this.curlImpersonateHeader(curl, crawlOpts?.extraHeaders);
            // if (crawlOpts?.extraHeaders) {
            //     curl.setOpt(Curl.option.HTTPHEADER, Object.entries(crawlOpts.extraHeaders).map(([k, v]) => `${k}: ${v}`));
            // }
            if (crawlOpts?.proxyUrl) {
                curl.setOpt(Curl.option.PROXY, crawlOpts.proxyUrl);
            }
            if (crawlOpts?.cookies?.length) {
                const cookieChunks = crawlOpts.cookies.map((cookie) => `${cookie.name}=${cookie.value}`);
                curl.setOpt(Curl.option.COOKIE, cookieChunks.join('; '));
            }
            if (crawlOpts?.referer) {
                curl.setOpt(Curl.option.REFERER, crawlOpts.referer);
            }

            curl.on('end', (statusCode, _data, headers) => {
                this.logger.debug(`CURL: [${statusCode}] ${urlToCrawl}`, { statusCode, headers });
                curl.close();
            });

            curl.on('error', (err) => {
                curl.close();
                this.logger.warn(`Curl ${urlToCrawl}: ${err} (Not necessarily an error)`, { err: marshalErrorLike(err) });
                reject(new AssertionFailureError(`Failed to directly access ${urlToCrawl}: ${err.message}`));
            });
            curl.setOpt(Curl.option.MAXFILESIZE, 1024 * 1024 * 1024); // 1GB
            let status = -1;
            let contentEncoding = '';
            curl.on('stream', (stream, statusCode, headers) => {
                status = statusCode;
                outerLoop:
                for (const headerVec of headers) {
                    for (const [k, v] of Object.entries(headerVec)) {
                        const kl = k.toLowerCase();
                        if (kl === 'content-type') {
                            contentType = v.toLowerCase();
                        }
                        if (kl === 'content-encoding') {
                            contentEncoding = v.toLowerCase();
                        }
                        if (contentType && contentEncoding) {
                            break outerLoop;
                        }
                    }
                }

                if (!contentType) {
                    reject(new AssertionFailureError(`Failed to directly access ${urlToCrawl}: no content-type`));
                    stream.destroy();
                    return;
                }
                if (contentType.startsWith('image/')) {
                    snapshot.html = `<html style="height: 100%;"><head><meta name="viewport" content="width=device-width, minimum-scale=0.1"><title>${urlToCrawl.origin}${urlToCrawl.pathname}</title></head><body style="margin: 0px; height: 100%; background-color: rgb(14, 14, 14);"><img style="display: block;-webkit-user-select: none;margin: auto;background-color: hsl(0, 0%, 90%);transition: background-color 300ms;" src="${urlToCrawl.href}"></body></html>`;
                    stream.destroy();
                    resolve({
                        statusCode: status,
                        headers,
                    });
                    return;
                }

                switch (contentEncoding) {
                    case 'gzip': {
                        const decompressed = createGunzip();
                        stream.pipe(decompressed);
                        stream = decompressed;
                        break;
                    }
                    case 'deflate': {
                        const decompressed = createInflate();
                        stream.pipe(decompressed);
                        stream = decompressed;
                        break;
                    }
                    case 'br': {
                        const decompressed = createBrotliDecompress();
                        stream.pipe(decompressed);
                        stream = decompressed;
                        break;
                    }
                    default: {
                        break;
                    }
                }

                const fpath = this.tempFileManager.alloc();
                const fancyFile = FancyFile.auto(stream, fpath);
                this.tempFileManager.bindPathTo(fancyFile, fpath);
                resolve({
                    statusCode: status,
                    data: fancyFile,
                    headers,
                });
            });

            curl.perform();
        });

        if (throwOnNon200 && result.statusCode && (result.statusCode < 200 || result.statusCode >= 300)) {
            throw new AssertionFailureError(`Failed to access ${urlToCrawl}: HTTP ${result.statusCode}`);
        }

        if (contentType === 'application/octet-stream') {
            // Content declared as binary is same as unknown.
            contentType = '';
        }

        if (result.data) {
            const mimeType: string = contentType || await result.data.mimeType;
            if (mimeType.startsWith('text/html')) {
                if ((await result.data.size) > 1024 * 1024 * 32) {
                    throw new AssertionFailureError(`Failed to access ${urlToCrawl}: file too large`);
                }
                snapshot.html = await readFile(await result.data.filePath, { encoding: 'utf-8' });
            } else if (mimeType.startsWith('text/') || mimeType.startsWith('application/json')) {
                if ((await result.data.size) > 1024 * 1024 * 32) {
                    throw new AssertionFailureError(`Failed to access ${urlToCrawl}: file too large`);
                }
                snapshot.text = await readFile(await result.data.filePath, { encoding: 'utf-8' });
                snapshot.html = `<html><head><meta name="color-scheme" content="light dark"></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">${snapshot.text}</pre></body></html>`;
            } else if (mimeType.startsWith('application/pdf')) {
                snapshot.pdfs = [pathToFileURL(await result.data.filePath).href];
            } else {
                throw new AssertionFailureError(`Failed to access ${urlToCrawl}: unexpected type ${mimeType}`);
            }
        }

        const curlSnapshot = await this.jsdomControl.narrowSnapshot(snapshot, crawlOpts);

        return curlSnapshot!;
    }


}

================
File: backend/functions/src/services/geoip.ts
================
import { container, singleton } from 'tsyringe';
import fsp from 'fs/promises';
import { CityResponse, Reader } from 'maxmind';
import { AsyncService, AutoCastable, Prop, runOnce } from 'civkit';
import { Logger } from '../shared';
import path from 'path';

export enum GEOIP_SUPPORTED_LANGUAGES {
    EN = 'en',
    ZH_CN = 'zh-CN',
    JA = 'ja',
    DE = 'de',
    FR = 'fr',
    ES = 'es',
    PT_BR = 'pt-BR',
    RU = 'ru',
}

export class GeoIPInfo extends AutoCastable {
    @Prop()
    code?: string;

    @Prop()
    name?: string;
}

export class GeoIPCountryInfo extends GeoIPInfo {
    @Prop()
    eu?: boolean;
}

export class GeoIPCityResponse extends AutoCastable {
    @Prop()
    continent?: GeoIPInfo;

    @Prop()
    country?: GeoIPCountryInfo;

    @Prop({
        arrayOf: GeoIPInfo
    })
    subdivisions?: GeoIPInfo[];

    @Prop()
    city?: string;

    @Prop({
        arrayOf: Number
    })
    coordinates?: [number, number, number];

    @Prop()
    timezone?: string;
}

@singleton()
export class GeoIPService extends AsyncService {

    logger = this.globalLogger.child({ service: this.constructor.name });

    mmdbCity!: Reader<CityResponse>;

    constructor(
        protected globalLogger: Logger,
    ) {
        super(...arguments);
    }


    override async init() {
        await this.dependencyReady();

        this.emit('ready');
    }

    @runOnce()
    async _lazyload() {
        const mmdpPath = path.resolve(__dirname, '..', '..', 'licensed', 'GeoLite2-City.mmdb');

        const dbBuff = await fsp.readFile(mmdpPath, { flag: 'r', encoding: null });

        this.mmdbCity = new Reader<CityResponse>(dbBuff);

        this.logger.info(`Loaded GeoIP database, ${dbBuff.byteLength} bytes`);
    }


    async lookupCity(ip: string, lang: GEOIP_SUPPORTED_LANGUAGES = GEOIP_SUPPORTED_LANGUAGES.EN) {
        await this._lazyload();

        const r = this.mmdbCity.get(ip);

        if (!r) {
            return undefined;
        }

        return GeoIPCityResponse.from({
            continent: r.continent ? {
                code: r.continent?.code,
                name: r.continent?.names?.[lang] || r.continent?.names?.en,
            } : undefined,
            country: r.country ? {
                code: r.country?.iso_code,
                name: r.country?.names?.[lang] || r.country?.names.en,
                eu: r.country?.is_in_european_union,
            } : undefined,
            city: r.city?.names?.[lang] || r.city?.names?.en,
            subdivisions: r.subdivisions?.map((x) => ({
                code: x.iso_code,
                name: x.names?.[lang] || x.names?.en,
            })),
            coordinates: r.location ? [
                r.location.latitude, r.location.longitude, r.location.accuracy_radius
            ] : undefined,
            timezone: r.location?.time_zone,
        });
    }

}

const instance = container.resolve(GeoIPService);

export default instance;

================
File: backend/functions/src/services/jsdom.ts
================
import { container, singleton } from 'tsyringe';
import { AsyncService, marshalErrorLike } from 'civkit';
import { Logger } from '../shared/services/logger';
import { ExtendedSnapshot, PageSnapshot } from './puppeteer';
import { Readability } from '@mozilla/readability';
import TurndownService from 'turndown';
import { Threaded } from '../shared/services/threaded';
import type { ExtraScrappingOptions } from '../cloud-functions/crawler';
import { tailwindClasses } from '../utils/tailwind-classes';

const pLinkedom = import('linkedom');

@singleton()
export class JSDomControl extends AsyncService {

    logger = this.globalLogger.child({ service: this.constructor.name });

    linkedom!: Awaited<typeof pLinkedom>;

    constructor(
        protected globalLogger: Logger,
    ) {
        super(...arguments);
    }

    override async init() {
        await this.dependencyReady();
        this.linkedom = await pLinkedom;
        this.emit('ready');
    }

    async narrowSnapshot(snapshot: PageSnapshot | undefined, options?: ExtraScrappingOptions) {
        if (snapshot?.parsed && !options?.targetSelector && !options?.removeSelector && !options?.withIframe && !options?.withShadowDom) {
            return snapshot;
        }
        if (!snapshot?.html) {
            return snapshot;
        }

        return this.actualNarrowSnapshot(snapshot, options);
    }

    @Threaded()
    async actualNarrowSnapshot(snapshot: PageSnapshot, options?: ExtraScrappingOptions): Promise<PageSnapshot | undefined> {
        const t0 = Date.now();
        let sourceHTML = snapshot.html;
        if (options?.withShadowDom && snapshot.shadowExpanded) {
            sourceHTML = snapshot.shadowExpanded;
        }
        let jsdom = this.linkedom.parseHTML(sourceHTML);
        if (!jsdom.window.document.documentElement) {
            jsdom = this.linkedom.parseHTML(`<html><body>${sourceHTML}</body></html>`);
        }
        const allNodes: Node[] = [];
        jsdom.window.document.querySelectorAll('svg').forEach((x) => x.innerHTML = '');
        if (options?.withIframe) {
            jsdom.window.document.querySelectorAll('iframe[src],frame[src]').forEach((x) => {
                const src = x.getAttribute('src');
                const thisSnapshot = snapshot.childFrames?.find((f) => f.href === src);
                if (options?.withIframe === 'quoted') {
                    const blockquoteElem = jsdom.window.document.createElement('blockquote');
                    const preElem = jsdom.window.document.createElement('pre');
                    preElem.innerHTML = thisSnapshot?.text || '';
                    blockquoteElem.appendChild(preElem);
                    x.replaceWith(blockquoteElem);
                } else if (thisSnapshot?.html) {
                    x.innerHTML = thisSnapshot.html;
                    x.querySelectorAll('script, style').forEach((s) => s.remove());
                    x.querySelectorAll('[src]').forEach((el) => {
                        el.setAttribute('src', new URL(el.getAttribute('src')!, src!).toString());
                    });
                    x.querySelectorAll('[href]').forEach((el) => {
                        el.setAttribute('href', new URL(el.getAttribute('href')!, src!).toString());
                    });
                }
            });
        }

        if (Array.isArray(options?.removeSelector)) {
            for (const rl of options!.removeSelector) {
                jsdom.window.document.querySelectorAll(rl).forEach((x) => x.remove());
            }
        } else if (options?.removeSelector) {
            jsdom.window.document.querySelectorAll(options.removeSelector).forEach((x) => x.remove());
        }

        let bewareTargetContentDoesNotExist = false;
        if (Array.isArray(options?.targetSelector)) {
            bewareTargetContentDoesNotExist = true;
            for (const x of options!.targetSelector.map((x) => jsdom.window.document.querySelectorAll(x))) {
                x.forEach((el) => {
                    if (!allNodes.includes(el)) {
                        allNodes.push(el);
                    }
                });
            }
        } else if (options?.targetSelector) {
            bewareTargetContentDoesNotExist = true;
            jsdom.window.document.querySelectorAll(options.targetSelector).forEach((el) => {
                if (!allNodes.includes(el)) {
                    allNodes.push(el);
                }
            });
        } else {
            allNodes.push(jsdom.window.document);
        }

        if (!allNodes.length) {

            if (bewareTargetContentDoesNotExist) {
                return undefined;
            }

            return snapshot;
        }
        const textNodes: HTMLElement[] = [];
        let rootDoc: Document;
        if (allNodes.length === 1 && allNodes[0].nodeName === '#document' && (allNodes[0] as any).documentElement) {
            rootDoc = allNodes[0] as any;
            if (rootDoc.body?.innerText) {
                textNodes.push(rootDoc.body);
            }
        } else {
            rootDoc = this.linkedom.parseHTML('<html><body></body></html>').window.document;
            for (const n of allNodes) {
                rootDoc.body.appendChild(n);
                rootDoc.body.appendChild(rootDoc.createTextNode('\n\n'));
                if ((n as HTMLElement).innerText) {
                    textNodes.push(n as HTMLElement);
                }
            }
        }
        const textChunks = textNodes.map((x) => {
            const clone = x.cloneNode(true) as HTMLElement;
            clone.querySelectorAll('script,style,link,svg').forEach((s) => s.remove());

            return clone.innerText;
        });

        let parsed;
        try {
            parsed = new Readability(rootDoc.cloneNode(true) as any).parse();
        } catch (err: any) {
            this.logger.warn(`Failed to parse selected element`, { err: marshalErrorLike(err) });
        }

        const imageTags = Array.from(rootDoc.querySelectorAll('img[src],img[data-src]'))
            .map((x: any) => [x.getAttribute('src'), x.getAttribute('data-src')])
            .flat()
            .map((x) => {
                try {
                    return new URL(x, snapshot.rebase || snapshot.href).toString();
                } catch (err) {
                    return null;
                }
            })
            .filter(Boolean);

        const imageSet = new Set(imageTags);
        const r = {
            ...snapshot,
            title: snapshot.title || jsdom.window.document.title,
            description: snapshot.description ||
                (jsdom.window.document.head?.querySelector('meta[name="description"]')?.getAttribute('content') ?? ''),
            parsed,
            html: rootDoc.documentElement.outerHTML,
            text: textChunks.join('\n'),
            imgs: snapshot.imgs?.filter((x) => imageSet.has(x.src)) || [],
        } as PageSnapshot;

        const dt = Date.now() - t0;
        if (dt > 1000) {
            this.logger.warn(`Performance issue: Narrowing snapshot took ${dt}ms`, { url: snapshot.href, dt });
        }

        return r;
    }

    @Threaded()
    inferSnapshot(snapshot: PageSnapshot): ExtendedSnapshot {
        const t0 = Date.now();
        const extendedSnapshot = { ...snapshot } as ExtendedSnapshot;
        try {
            const jsdom = this.linkedom.parseHTML(snapshot.html);

            jsdom.window.document.querySelectorAll('svg').forEach((x) => x.innerHTML = '');
            const links = Array.from(jsdom.window.document.querySelectorAll('a[href]'))
                .map((x: any) => [x.textContent.replace(/\s+/g, ' ').trim(), x.getAttribute('href'),])
                .map(([text, href]) => {
                    if (!href) {
                        return undefined;
                    }
                    try {
                        const parsed = new URL(href, snapshot.rebase || snapshot.href);

                        return [text, parsed.toString()] as const;
                    } catch (err) {
                        return undefined;
                    }
                })
                .filter(Boolean) as [string, string][];

            extendedSnapshot.links = links;

            const imgs = Array.from(jsdom.window.document.querySelectorAll('img[src],img[data-src]'))
                .map((x: any) => {
                    let linkPreferredSrc = x.getAttribute('src') || '';
                    if (linkPreferredSrc.startsWith('data:')) {
                        const dataSrc = x.getAttribute('data-src') || '';
                        if (dataSrc && !dataSrc.startsWith('data:')) {
                            linkPreferredSrc = dataSrc;
                        }
                    }

                    return {
                        src: new URL(linkPreferredSrc, snapshot.rebase || snapshot.href).toString(),
                        width: parseInt(x.getAttribute('width') || '0'),
                        height: parseInt(x.getAttribute('height') || '0'),
                        alt: x.getAttribute('alt') || x.getAttribute('title'),
                    };
                });

            extendedSnapshot.imgs = imgs as any;
        } catch (_err) {
            void 0;
        }

        const dt = Date.now() - t0;
        if (dt > 1000) {
            this.logger.warn(`Performance issue: Inferring snapshot took ${dt}ms`, { url: snapshot.href, dt });
        }

        return extendedSnapshot;
    }

    cleanRedundantEmptyLines(text: string) {
        const lines = text.split(/\r?\n/g);
        const mappedFlag = lines.map((line) => Boolean(line.trim()));

        return lines.filter((_line, i) => mappedFlag[i] || mappedFlag[i - 1]).join('\n');
    }

    @Threaded()
    async cleanHTMLforLMs(sourceHTML: string, ...discardSelectors: string[]): Promise<string> {
        const t0 = Date.now();
        let jsdom = this.linkedom.parseHTML(sourceHTML);
        if (!jsdom.window.document.documentElement) {
            jsdom = this.linkedom.parseHTML(`<html><body>${sourceHTML}</body></html>`);
        }

        for (const rl of discardSelectors) {
            jsdom.window.document.querySelectorAll(rl).forEach((x) => x.remove());
        }

        jsdom.window.document.querySelectorAll('img[src],img[data-src]').forEach((x) => {
            const src = x.getAttribute('src') || x.getAttribute('data-src');
            if (src?.startsWith('data:')) {
                x.setAttribute('src', 'blob:opaque');
            }
            x.removeAttribute('data-src');
            x.removeAttribute('srcset');
        });

        jsdom.window.document.querySelectorAll('[class]').forEach((x) => {
            const classes = x.getAttribute('class')?.split(/\s+/g) || [];
            const newClasses = classes.filter((c) => tailwindClasses.has(c));
            x.setAttribute('class', newClasses.join(' '));
        });
        jsdom.window.document.querySelectorAll('[style]').forEach((x) => {
            const style = x.getAttribute('style')?.toLocaleLowerCase() || '';
            if (style.startsWith('display: none')) {
                return;
            }
            x.removeAttribute('style');
        });
        const treeWalker = jsdom.window.document.createTreeWalker(
            jsdom.window.document, // Start from the root document
            0x80 // Only show comment nodes
        );

        let currentNode;
        while ((currentNode = treeWalker.nextNode())) {
            currentNode.parentNode?.removeChild(currentNode); // Remove each comment node
        }

        jsdom.window.document.querySelectorAll('*').forEach((x)=> {
            const attrs = x.getAttributeNames();
            for (const attr of attrs) {
                if (attr.startsWith('data-') || attr.startsWith('aria-')) {
                    x.removeAttribute(attr);
                }
            }
        });

        const dt = Date.now() - t0;
        if (dt > 1000) {
            this.logger.warn(`Performance issue: Cleaning HTML for LMs took ${dt}ms`, { dt });
        }

        return this.cleanRedundantEmptyLines(jsdom.window.document.documentElement.outerHTML);
    }

    snippetToElement(snippet?: string, url?: string) {
        const parsed = this.linkedom.parseHTML(snippet || '<html><body></body></html>');

        // Hack for turndown gfm table plugin.
        parsed.window.document.querySelectorAll('table').forEach((x) => {
            Object.defineProperty(x, 'rows', { value: Array.from(x.querySelectorAll('tr')), enumerable: true });
        });
        Object.defineProperty(parsed.window.document.documentElement, 'cloneNode', {
            value: function () { return this; },
        });

        return parsed.window.document.documentElement;
    }

    runTurndown(turndownService: TurndownService, html: TurndownService.Node | string) {
        const t0 = Date.now();

        try {
            return turndownService.turndown(html);
        } finally {
            const dt = Date.now() - t0;
            if (dt > 1000) {
                this.logger.warn(`Performance issue: Turndown took ${dt}ms`, { dt });
            }
        }
    }
}

const jsdomControl = container.resolve(JSDomControl);

export default jsdomControl;

================
File: backend/functions/src/services/lm.ts
================
import { AsyncService } from 'civkit/async-service';
import { singleton } from 'tsyringe';

import { PageSnapshot } from './puppeteer';
import { Logger } from '../shared/services/logger';
import _ from 'lodash';
import { AssertionFailureError } from 'civkit';
import { LLMManager } from '../shared/services/common-llm';
import { JSDomControl } from './jsdom';

const tripleBackTick = '```';

@singleton()
export class LmControl extends AsyncService {

    logger = this.globalLogger.child({ service: this.constructor.name });

    constructor(
        protected globalLogger: Logger,
        protected commonLLM: LLMManager,
        protected jsdomControl: JSDomControl,
    ) {
        super(...arguments);
    }

    override async init() {
        await this.dependencyReady();

        this.emit('ready');
    }

    async* geminiFromBrowserSnapshot(snapshot?: PageSnapshot & {
        pageshotUrl?: string,
    }) {
        const pageshot = snapshot?.pageshotUrl || snapshot?.pageshot;

        if (!pageshot) {
            throw new AssertionFailureError('Screenshot of the page is not available');
        }

        const html = await this.jsdomControl.cleanHTMLforLMs(snapshot.html, 'script,link,style,textarea,select>option,svg');

        const it = this.commonLLM.iterRun('vertex-gemini-1.5-flash-002', {
            prompt: [
                `HTML: \n${html}\n\nSCREENSHOT: \n`,
                typeof pageshot === 'string' ? new URL(pageshot) : pageshot,
                `Convert this webpage into a markdown source file that does not contain HTML tags, retaining the page language and visual structures.`,
            ],

            options: {
                system: 'You are ReaderLM-v7, a model that generates Markdown source files only. No HTML, notes and chit-chats allowed',
                stream: true
            }
        });

        const chunks: string[] = [];
        for await (const txt of it) {
            chunks.push(txt);
            const output: PageSnapshot = {
                ...snapshot,
                parsed: {
                    ...snapshot?.parsed,
                    textContent: chunks.join(''),
                }
            };
            yield output;
        }

        return;
    }

    async* readerLMMarkdownFromSnapshot(snapshot?: PageSnapshot) {
        if (!snapshot) {
            throw new AssertionFailureError('Snapshot of the page is not available');
        }

        const html = await this.jsdomControl.cleanHTMLforLMs(snapshot.html, 'script,link,style,textarea,select>option,svg');

        const it = this.commonLLM.iterRun('readerlm-v2', {
            prompt: `Extract the main content from the given HTML and convert it to Markdown format.\n\n${tripleBackTick}html\n${html}\n${tripleBackTick}\n`,

            options: {
                // system: 'You are an AI assistant developed by Jina AI',
                stream: true,
                modelSpecific: {
                    top_k: 1,
                    temperature: 0,
                    repetition_penalty: 1.13,
                    presence_penalty: 0.25,
                    frequency_penalty: 0.25,
                    max_tokens: 8192,
                }
            }
        });

        const chunks: string[] = [];
        for await (const txt of it) {
            chunks.push(txt);
            const output: PageSnapshot = {
                ...snapshot,
                parsed: {
                    ...snapshot?.parsed,
                    textContent: chunks.join(''),
                }
            };
            yield output;
        }

        return;
    }

    async* readerLMFromSnapshot(schema?: string, instruction: string = 'Infer useful information from the HTML and present it in a structured JSON object.', snapshot?: PageSnapshot) {
        if (!snapshot) {
            throw new AssertionFailureError('Snapshot of the page is not available');
        }

        const html = await this.jsdomControl.cleanHTMLforLMs(snapshot.html, 'script,link,style,textarea,select>option,svg');

        const it = this.commonLLM.iterRun('readerlm-v2', {
            prompt: `${instruction}\n\n${tripleBackTick}html\n${html}\n${tripleBackTick}\n${schema ? `The JSON schema:\n${tripleBackTick}json\n${schema}\n${tripleBackTick}\n` : ''}`,
            options: {
                // system: 'You are an AI assistant developed by Jina AI',
                stream: true,
                modelSpecific: {
                    top_k: 1,
                    temperature: 0,
                    repetition_penalty: 1.13,
                    presence_penalty: 0.25,
                    frequency_penalty: 0.25,
                    max_tokens: 8192,
                }
            }
        });

        const chunks: string[] = [];
        for await (const txt of it) {
            chunks.push(txt);
            const output: PageSnapshot = {
                ...snapshot,
                parsed: {
                    ...snapshot?.parsed,
                    textContent: chunks.join(''),
                }
            };
            yield output;
        }

        return;
    }
}

================
File: backend/functions/src/services/pdf-extract.ts
================
import 'core-js/actual/promise/with-resolvers';
import { singleton } from 'tsyringe';
import _ from 'lodash';
import { TextItem } from 'pdfjs-dist/types/src/display/api';
import { AsyncService, HashManager } from 'civkit';
import { Logger } from '../shared/services/logger';
import { PDFContent } from '../db/pdf';
import dayjs from 'dayjs';
import { FirebaseStorageBucketControl } from '../shared';
import { randomUUID } from 'crypto';
import { PDFDocumentLoadingTask } from 'pdfjs-dist';
const utc = require('dayjs/plugin/utc');  // Import the UTC plugin
dayjs.extend(utc);  // Extend dayjs with the UTC plugin
const timezone = require('dayjs/plugin/timezone');
dayjs.extend(timezone);

const pPdfjs = import('pdfjs-dist');


const md5Hasher = new HashManager('md5', 'hex');

function stdDev(numbers: number[]) {
    const mean = _.mean(numbers);
    const squareDiffs = numbers.map((num) => Math.pow(num - mean, 2));
    const avgSquareDiff = _.mean(squareDiffs);
    return Math.sqrt(avgSquareDiff);
}

function isRotatedByAtLeast35Degrees(transform: [number, number, number, number, number, number]): boolean {
    const [a, b, c, d, _e, _f] = transform;

    // Calculate the rotation angles using arctan(b/a) and arctan(-c/d)
    const angle1 = Math.atan2(b, a) * (180 / Math.PI); // from a, b
    const angle2 = Math.atan2(-c, d) * (180 / Math.PI); // from c, d

    // Either angle1 or angle2 can be used to determine the rotation, they should be equivalent
    const rotationAngle1 = Math.abs(angle1);
    const rotationAngle2 = Math.abs(angle2);

    // Check if the absolute rotation angle is greater than or equal to 35 degrees
    return rotationAngle1 >= 35 || rotationAngle2 >= 35;
}

@singleton()
export class PDFExtractor extends AsyncService {

    logger = this.globalLogger.child({ service: this.constructor.name });
    pdfjs!: Awaited<typeof pPdfjs>;

    cacheRetentionMs = 1000 * 3600 * 24 * 7;

    constructor(
        protected globalLogger: Logger,
        protected firebaseObjectStorage: FirebaseStorageBucketControl,
    ) {
        super(...arguments);
    }

    override async init() {
        await this.dependencyReady();
        this.pdfjs = await pPdfjs;

        this.emit('ready');
    }

    isDataUrl(url: string) {
        return url.startsWith('data:');
    }

    parseDataUrl(url: string) {
        const protocol = url.slice(0, url.indexOf(':'));
        const contentType = url.slice(url.indexOf(':') + 1, url.indexOf(';'));
        const data = url.slice(url.indexOf(',') + 1);
        if (protocol !== 'data' || !data) {
            throw new Error('Invalid data URL');
        }

        if (contentType !== 'application/pdf') {
            throw new Error('Invalid data URL type');
        }

        return {
            type: contentType,
            data: data
        };
    }

    async extract(url: string | URL) {
        let loadingTask: PDFDocumentLoadingTask;

        if (typeof url === 'string' && this.isDataUrl(url)) {
            const { data } = this.parseDataUrl(url);
            const binary = Uint8Array.from(Buffer.from(data, 'base64'));
            loadingTask = this.pdfjs.getDocument({
                data: binary,
                disableFontFace: true,
                verbosity: 0
            });
        } else {
            loadingTask = this.pdfjs.getDocument({
                url,
                disableFontFace: true,
                verbosity: 0
            });
        }


        const doc = await loadingTask.promise;
        const meta = await doc.getMetadata();

        const textItems: TextItem[][] = [];

        for (const pg of _.range(0, doc.numPages)) {
            const page = await doc.getPage(pg + 1);
            const textContent = await page.getTextContent();
            textItems.push((textContent.items as TextItem[]));
        }

        const articleCharHeights: number[] = [];
        for (const textItem of textItems.flat()) {
            if (textItem.height) {
                articleCharHeights.push(...Array(textItem.str.length).fill(textItem.height));
            }
        }
        const articleAvgHeight = _.mean(articleCharHeights);
        const articleStdDevHeight = stdDev(articleCharHeights);
        // const articleMedianHeight = articleCharHeights.sort()[Math.floor(articleCharHeights.length / 2)];
        const mdOps: Array<{
            text: string;
            op?: 'new' | 'append';
            mode: 'h1' | 'h2' | 'p' | 'appendix' | 'space';
        }> = [];

        const rawChunks: string[] = [];

        let op: 'append' | 'new' = 'new';
        let mode: 'h1' | 'h2' | 'p' | 'space' | 'appendix' = 'p';
        for (const pageTextItems of textItems) {
            const charHeights = [];
            for (const textItem of pageTextItems as TextItem[]) {
                if (textItem.height) {
                    charHeights.push(...Array(textItem.str.length).fill(textItem.height));
                }
                rawChunks.push(`${textItem.str}${textItem.hasEOL ? '\n' : ''}`);
            }

            const avgHeight = _.mean(charHeights);
            const stdDevHeight = stdDev(charHeights);
            // const medianHeight = charHeights.sort()[Math.floor(charHeights.length / 2)];

            for (const textItem of pageTextItems) {
                if (textItem.height > articleAvgHeight + 3 * articleStdDevHeight) {
                    mode = 'h1';
                } else if (textItem.height > articleAvgHeight + 2 * articleStdDevHeight) {
                    mode = 'h2';
                } else if (textItem.height && textItem.height < avgHeight - stdDevHeight) {
                    mode = 'appendix';
                } else if (textItem.height) {
                    mode = 'p';
                } else {
                    mode = 'space';
                }

                if (isRotatedByAtLeast35Degrees(textItem.transform as any)) {
                    mode = 'appendix';
                }

                mdOps.push({
                    op,
                    mode,
                    text: textItem.str
                });

                if (textItem.hasEOL && !textItem.str) {
                    op = 'new';
                } else {
                    op = 'append';
                }
            }
        }

        const mdChunks = [];
        const appendixChunks = [];
        mode = 'space';
        for (const x of mdOps) {
            const previousMode: string = mode;
            const changeToMdChunks = [];

            const isNewStart = x.mode !== 'space' && (x.op === 'new' || (previousMode === 'appendix' && x.mode !== previousMode));

            if (isNewStart) {
                switch (x.mode) {
                    case 'h1': {
                        changeToMdChunks.push(`\n\n# `);
                        mode = x.mode;
                        break;
                    }

                    case 'h2': {
                        changeToMdChunks.push(`\n\n## `);
                        mode = x.mode;
                        break;
                    }

                    case 'p': {
                        changeToMdChunks.push(`\n\n`);
                        mode = x.mode;
                        break;
                    }

                    case 'appendix': {
                        mode = x.mode;
                        appendixChunks.push(`\n\n`);
                        break;
                    }

                    default: {
                        break;
                    }
                }
            } else {
                if (x.mode === 'appendix' && appendixChunks.length) {
                    const lastChunk = appendixChunks[appendixChunks.length - 1];
                    if (!lastChunk.match(/(\s+|-)$/) && lastChunk.length !== 1) {
                        appendixChunks.push(' ');
                    }
                } else if (mdChunks.length) {
                    const lastChunk = mdChunks[mdChunks.length - 1];
                    if (!lastChunk.match(/(\s+|-)$/) && lastChunk.length !== 1) {
                        changeToMdChunks.push(' ');
                    }
                }
            }

            if (x.text) {
                if (x.mode == 'appendix') {
                    if (appendixChunks.length || isNewStart) {
                        appendixChunks.push(x.text);
                    } else {
                        changeToMdChunks.push(x.text);
                    }
                } else {
                    changeToMdChunks.push(x.text);
                }
            }

            if (isNewStart && x.mode !== 'appendix' && appendixChunks.length) {
                const appendix = appendixChunks.join('').split(/\r?\n/).map((x) => x.trim()).filter(Boolean).map((x) => `> ${x}`).join('\n');
                changeToMdChunks.unshift(appendix);
                changeToMdChunks.unshift(`\n\n`);
                appendixChunks.length = 0;
            }

            if (x.mode === 'space' && changeToMdChunks.length) {
                changeToMdChunks.length = 1;
            }
            if (changeToMdChunks.length) {
                mdChunks.push(...changeToMdChunks);
            }
        }

        if (mdChunks.length) {
            mdChunks[0] = mdChunks[0].trimStart();
        }

        return { meta: meta.info as Record<string, any>, content: mdChunks.join(''), text: rawChunks.join('') };
    }

    async cachedExtract(url: string | URL, cacheTolerance: number = 1000 * 3600 * 24, alternativeUrl?: string) {
        if (!url) {
            return undefined;
        }
        const nameUrl = alternativeUrl || url.toString();
        const digest = md5Hasher.hash(nameUrl);

        const data = url;
        if (typeof url === 'string' && this.isDataUrl(url)) {
            url = `dataurl://digest:${digest}`;
        }

        const cache: PDFContent | undefined = (await PDFContent.fromFirestoreQuery(PDFContent.COLLECTION.where('urlDigest', '==', digest).orderBy('createdAt', 'desc').limit(1)))?.[0];

        if (cache) {
            const age = Date.now() - cache?.createdAt.valueOf();
            const stale = cache.createdAt.valueOf() < (Date.now() - cacheTolerance);
            this.logger.info(`${stale ? 'Stale cache exists' : 'Cache hit'} for PDF ${nameUrl}, normalized digest: ${digest}, ${age}ms old, tolerance ${cacheTolerance}ms`, {
                data: url, url: nameUrl, digest, age, stale, cacheTolerance
            });

            if (!stale) {
                if (cache.content && cache.text) {
                    return {
                        meta: cache.meta,
                        content: cache.content,
                        text: cache.text
                    };
                }

                try {
                    const r = await this.firebaseObjectStorage.downloadFile(`pdfs/${cache._id}`);
                    let cached = JSON.parse(r.toString('utf-8'));

                    return {
                        meta: cached.meta,
                        content: cached.content,
                        text: cached.text
                    };
                } catch (err) {
                    this.logger.warn(`Unable to load cached content for ${nameUrl}`, { err });

                    return undefined;
                }
            }
        }

        let extracted;

        try {
            extracted = await this.extract(data);

            const theID = randomUUID();
            await this.firebaseObjectStorage.saveFile(`pdfs/${theID}`,
                Buffer.from(JSON.stringify(extracted), 'utf-8'), { contentType: 'application/json' });
            PDFContent.save(
                PDFContent.from({
                    _id: theID,
                    src: nameUrl,
                    meta: extracted?.meta || {},
                    urlDigest: digest,
                    createdAt: new Date(),
                    expireAt: new Date(Date.now() + this.cacheRetentionMs)
                }).degradeForFireStore()
            ).catch((r) => {
                this.logger.warn(`Unable to cache PDF content for ${nameUrl}`, { err: r });
            });
        } catch (err) {
            this.logger.warn(`Unable to extract from pdf ${nameUrl}`, { err });
        }

        return extracted;
    }

    parsePdfDate(pdfDate: string | undefined) {
        if (!pdfDate) {
            return undefined;
        }
        // Remove the 'D:' prefix
        const cleanedDate = pdfDate.slice(2);

        // Define the format without the timezone part first
        const dateTimePart = cleanedDate.slice(0, 14);
        const timezonePart = cleanedDate.slice(14);

        // Construct the full date string in a standard format
        const formattedDate = `${dateTimePart}${timezonePart.replace("'", "").replace("'", "")}`;

        // Parse the date with timezone
        const parsedDate = dayjs(formattedDate, "YYYYMMDDHHmmssZ");

        const date = parsedDate.toDate();

        if (!date.valueOf()) {
            return undefined;
        }

        return date;
    }
}

================
File: backend/functions/src/services/puppeteer.ts
================
import os from 'os';
import fs from 'fs';
import { container, singleton } from 'tsyringe';
import { AsyncService, Defer, marshalErrorLike, AssertionFailureError, delay, Deferred, perNextTick, ParamValidationError } from 'civkit';
import { Logger } from '../shared/services/logger';

import type { Browser, CookieParam, GoToOptions, HTTPResponse, Page, Viewport } from 'puppeteer';
import type { Cookie } from 'set-cookie-parser';
import puppeteer from 'puppeteer-extra';

import puppeteerBlockResources from 'puppeteer-extra-plugin-block-resources';
import puppeteerPageProxy from 'puppeteer-extra-plugin-page-proxy';
import { SecurityCompromiseError, ServiceCrashedError, ServiceNodeResourceDrainError } from '../shared/lib/errors';
import { TimeoutError } from 'puppeteer';
import _ from 'lodash';
import { isIP } from 'net';
const tldExtract = require('tld-extract');

const READABILITY_JS = fs.readFileSync(require.resolve('@mozilla/readability/Readability.js'), 'utf-8');


export interface ImgBrief {
    src: string;
    loaded?: boolean;
    width?: number;
    height?: number;
    naturalWidth?: number;
    naturalHeight?: number;
    alt?: string;
}

export interface ReadabilityParsed {
    title: string;
    content: string;
    textContent: string;
    length: number;
    excerpt: string;
    byline: string;
    dir: string;
    siteName: string;
    lang: string;
    publishedTime: string;
}

export interface PageSnapshot {
    title: string;
    description?: string;
    href: string;
    rebase?: string;
    html: string;
    htmlModifiedByJs?: boolean;
    shadowExpanded?: string;
    text: string;
    status?: number;
    statusText?: string;
    parsed?: Partial<ReadabilityParsed> | null;
    screenshot?: Buffer;
    pageshot?: Buffer;
    imgs?: ImgBrief[];
    pdfs?: string[];
    maxElemDepth?: number;
    elemCount?: number;
    childFrames?: PageSnapshot[];
}

export interface ExtendedSnapshot extends PageSnapshot {
    links: [string, string][];
    imgs: ImgBrief[];
}

export interface ScrappingOptions {
    proxyUrl?: string;
    cookies?: Cookie[];
    favorScreenshot?: boolean;
    waitForSelector?: string | string[];
    minIntervalMs?: number;
    overrideUserAgent?: string;
    timeoutMs?: number;
    locale?: string;
    referer?: string;
    extraHeaders?: Record<string, string>;
    injectFrameScripts?: string[];
    injectPageScripts?: string[];
    viewport?: Viewport;
}


const puppeteerStealth = require('puppeteer-extra-plugin-stealth');
puppeteer.use(puppeteerStealth());
// const puppeteerUAOverride = require('puppeteer-extra-plugin-stealth/evasions/user-agent-override');
// puppeteer.use(puppeteerUAOverride({
//     userAgent: `Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko; compatible; GPTBot/1.0; +https://openai.com/gptbot)`,
//     platform: `Linux`,
// }))

puppeteer.use(puppeteerBlockResources({
    blockedTypes: new Set(['media']),
    interceptResolutionPriority: 1,
}));
puppeteer.use(puppeteerPageProxy({
    interceptResolutionPriority: 1,
}));

const SIMULATE_SCROLL = `
(function () {
    function createIntersectionObserverEntry(target, isIntersecting, timestamp) {
        const targetRect = target.getBoundingClientRect();
        const record = {
            target,
            isIntersecting,
            time: timestamp,
            // If intersecting, intersectionRect matches boundingClientRect
            // If not intersecting, intersectionRect is empty (0x0)
            intersectionRect: isIntersecting
                ? targetRect
                : new DOMRectReadOnly(0, 0, 0, 0),
            // Current bounding client rect of the target
            boundingClientRect: targetRect,
            // Intersection ratio is either 0 (not intersecting) or 1 (fully intersecting)
            intersectionRatio: isIntersecting ? 1 : 0,
            // Root bounds (viewport in our case)
            rootBounds: new DOMRectReadOnly(
                0,
                0,
                window.innerWidth,
                window.innerHeight
            )
        };
        Object.setPrototypeOf(record, window.IntersectionObserverEntry.prototype);
        return record;
    }
    function cloneIntersectionObserverEntry(entry) {
        const record = {
            target: entry.target,
            isIntersecting: entry.isIntersecting,
            time: entry.time,
            intersectionRect: entry.intersectionRect,
            boundingClientRect: entry.boundingClientRect,
            intersectionRatio: entry.intersectionRatio,
            rootBounds: entry.rootBounds
        };
        Object.setPrototypeOf(record, window.IntersectionObserverEntry.prototype);
        return record;
    }
    const orig = window.IntersectionObserver;
    const kCallback = Symbol('callback');
    const kLastEntryMap = Symbol('lastEntryMap');
    const liveObservers = new Map();
    class MangledIntersectionObserver extends orig {
        constructor(callback, options) {
            super((entries, observer) => {
                const lastEntryMap = observer[kLastEntryMap];
                const lastEntry = entries[entries.length - 1];
                lastEntryMap.set(lastEntry.target, lastEntry);
                return callback(entries, observer);
            }, options);
            this[kCallback] = callback;
            this[kLastEntryMap] = new WeakMap();
            liveObservers.set(this, new Set());
        }
        disconnect() {
            liveObservers.get(this)?.clear();
            liveObservers.delete(this);
            return super.disconnect();
        }
        observe(target) {
            const observer = liveObservers.get(this);
            observer?.add(target);
            return super.observe(target);
        }
        unobserve(target) {
            const observer = liveObservers.get(this);
            observer?.delete(target);
            return super.unobserve(target);
        }
    }
    Object.defineProperty(MangledIntersectionObserver, 'name', { value: 'IntersectionObserver', writable: false });
    window.IntersectionObserver = MangledIntersectionObserver;
    function simulateScroll() {
        for (const [observer, targets] of liveObservers.entries()) {
            const t0 = performance.now();
            for (const target of targets) {
                const entry = createIntersectionObserverEntry(target, true, t0);
                observer[kCallback]([entry], observer);
                setTimeout(() => {
                    const t1 = performance.now();
                    const lastEntry = observer[kLastEntryMap].get(target);
                    if (!lastEntry) {
                        return;
                    }
                    const entry2 = { ...cloneIntersectionObserverEntry(lastEntry), time: t1 };
                    observer[kCallback]([entry2], observer);
                });
            }
        }
    }
    window.simulateScroll = simulateScroll;
})();
`;

const MUTATION_IDLE_WATCH = `
(function () {
    let timeout;
    const sendMsg = ()=> {
        document.dispatchEvent(new CustomEvent('mutationIdle'));
    };

    const cb = () => {
        if (timeout) {
            clearTimeout(timeout);
            timeout = setTimeout(sendMsg, 200);
        }
    };
    const mutationObserver = new MutationObserver(cb);

    document.addEventListener('DOMContentLoaded', () => {
        mutationObserver.observe(document.documentElement, {
            childList: true,
            subtree: true,
        });
        timeout = setTimeout(sendMsg, 200);
    }, { once: true })
})();
`;

const DONT_MESS_WITH_THE_FUNDAMENTALS = `
delete Function.prototype.toString;
delete Function.prototype.bind.apply;
delete Function.prototype.bind.call;
`;

const SCRIPT_TO_INJECT_INTO_FRAME = `
${DONT_MESS_WITH_THE_FUNDAMENTALS}
${READABILITY_JS}
${SIMULATE_SCROLL}
${MUTATION_IDLE_WATCH}

(function(){
function briefImgs(elem) {
    const imageTags = Array.from((elem || document).querySelectorAll('img[src],img[data-src]'));

    return imageTags.map((x)=> {
        let linkPreferredSrc = x.src;
        if (linkPreferredSrc.startsWith('data:')) {
            if (typeof x.dataset?.src === 'string' && !x.dataset.src.startsWith('data:')) {
                linkPreferredSrc = x.dataset.src;
            }
        }

        return {
            src: new URL(linkPreferredSrc, document.baseURI).toString(),
            loaded: x.complete,
            width: x.width,
            height: x.height,
            naturalWidth: x.naturalWidth,
            naturalHeight: x.naturalHeight,
            alt: x.alt || x.title,
        };
    });
}
function getMaxDepthAndCountUsingTreeWalker(root) {
  let maxDepth = 0;
  let currentDepth = 0;
  let elementCount = 0;

  const treeWalker = document.createTreeWalker(
    root,
    NodeFilter.SHOW_ELEMENT,
    (node) => {
      const nodeName = node.nodeName.toLowerCase();
      return (nodeName === 'svg') ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
    },
    false
  );

  while (true) {
    maxDepth = Math.max(maxDepth, currentDepth);
    elementCount++; // Increment the count for the current node

    if (treeWalker.firstChild()) {
      currentDepth++;
    } else {
      while (!treeWalker.nextSibling() && currentDepth > 0) {
        treeWalker.parentNode();
        currentDepth--;
      }

      if (currentDepth <= 0) {
        break;
      }
    }
  }

  return {
    maxDepth: maxDepth + 1,
    elementCount: elementCount
  };
}

function cloneAndExpandShadowRoots(rootElement = document.documentElement) {
  // Create a shallow clone of the root element
  const clone = rootElement.cloneNode(false);
  // Function to process an element and its shadow root
  function processShadowRoot(original, cloned) {
    if (original.shadowRoot && original.shadowRoot.mode === 'open') {
      shadowDomPresents = true;
      const shadowContent = document.createDocumentFragment();

      // Clone shadow root content normally
      original.shadowRoot.childNodes.forEach(childNode => {
        const clonedNode = childNode.cloneNode(true);
        shadowContent.appendChild(clonedNode);
      });

      // Handle slots
      const slots = shadowContent.querySelectorAll('slot');
      slots.forEach(slot => {
        const slotName = slot.getAttribute('name') || '';
        const assignedElements = original.querySelectorAll(
          slotName ? \`[slot="\${slotName}"]\` : ':not([slot])'
        );

        if (assignedElements.length > 0) {
          const slotContent = document.createDocumentFragment();
          assignedElements.forEach(el => {
            const clonedEl = el.cloneNode(true);
            slotContent.appendChild(clonedEl);
          });
          slot.parentNode.replaceChild(slotContent, slot);
        } else if (!slotName) {
          // Keep default slot content
          // No need to do anything as it's already cloned
        }
      });

      cloned.appendChild(shadowContent);
    }
  }

  // Use a TreeWalker on the original root to clone the entire structure
  const treeWalker = document.createTreeWalker(
    rootElement,
    NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT
  );

  const elementMap = new Map([[rootElement, clone]]);

  let currentNode;
  while (currentNode = treeWalker.nextNode()) {
    const parentClone = elementMap.get(currentNode.parentNode);
    const clonedNode = currentNode.cloneNode(false);
    parentClone.appendChild(clonedNode);

    if (currentNode.nodeType === Node.ELEMENT_NODE) {
      elementMap.set(currentNode, clonedNode);
      processShadowRoot(currentNode, clonedNode);
    }
  }

  return clone;
}

function shadowDomPresent(rootElement = document.documentElement) {
    const elems = rootElement.querySelectorAll('*');
    for (const x of elems) {
        if (x.shadowRoot && x.shadowRoot.mode === 'open') {
            return true;
        }
    }
    return false;
}

let initialHTML;
function giveSnapshot(stopActiveSnapshot) {
    initialHTML ??= document.documentElement?.outerHTML;
    if (stopActiveSnapshot) {
        window.haltSnapshot = true;
    }
    let parsed;
    try {
        parsed = new Readability(document.cloneNode(true)).parse();
    } catch (err) {
        void 0;
    }
    const domAnalysis = getMaxDepthAndCountUsingTreeWalker(document.documentElement);
    const r = {
        title: document.title,
        description: document.head?.querySelector('meta[name="description"]')?.getAttribute('content') ?? '',
        href: document.location.href,
        html: document.documentElement?.outerHTML,
        htmlModifiedByJs: false,
        text: document.body?.innerText,
        shadowExpanded: shadowDomPresent() ? cloneAndExpandShadowRoots()?.outerHTML : undefined,
        parsed: parsed,
        imgs: [],
        maxElemDepth: domAnalysis.maxDepth,
        elemCount: domAnalysis.elementCount,
    };
    if (initialHTML) {
        r.htmlModifiedByJs = initialHTML !== r.html && !r.shadowExpanded;
    }
    if (document.baseURI !== r.href) {
        r.rebase = document.baseURI;
    }
    if (parsed && parsed.content) {
        const elem = document.createElement('div');
        elem.innerHTML = parsed.content;
        r.imgs = briefImgs(elem);
    } else {
        const allImgs = briefImgs();
        if (allImgs.length === 1) {
            r.imgs = allImgs;
        }
    }

    return r;
}
function waitForSelector(selectorText) {
  return new Promise((resolve) => {
    const existing = document.querySelector(selectorText);
    if (existing) {
      resolve(existing);
      return;
    }
    const observer = new MutationObserver(() => {
      const elem = document.querySelector(selectorText);
      if (elem) {
        resolve(document.querySelector(selectorText));
        observer.disconnect();
      }
    });
    observer.observe(document.documentElement, {
      childList: true,
      subtree: true
    });
  });
}
window.waitForSelector = waitForSelector;
window.giveSnapshot = giveSnapshot;
window.briefImgs = briefImgs;
})();
`;

@singleton()
export class PuppeteerControl extends AsyncService {

    _sn = 0;
    browser!: Browser;
    logger = this.globalLogger.child({ service: this.constructor.name });

    private __reqCapInterval?: NodeJS.Timeout;

    __loadedPage: Page[] = [];

    finalizerMap = new WeakMap<Page, ReturnType<typeof setTimeout>>();
    snMap = new WeakMap<Page, number>();
    livePages = new Set<Page>();
    pagePhase = new WeakMap<Page, 'idle' | 'active' | 'background'>();
    lastPageCratedAt: number = 0;

    rpsCap: number = 500;
    lastReqSentAt: number = 0;
    requestDeferredQueue: Deferred<boolean>[] = [];

    circuitBreakerHosts: Set<string> = new Set();

    constructor(
        protected globalLogger: Logger,
    ) {
        super(...arguments);
        this.setMaxListeners(2 * Math.floor(os.totalmem() / (256 * 1024 * 1024)) + 1); 148 - 95;

        let crippledTimes = 0;
        this.on('crippled', () => {
            crippledTimes += 1;
            this.__loadedPage.length = 0;
            this.livePages.clear();
            if (crippledTimes > 5) {
                process.nextTick(() => {
                    this.emit('error', new Error('Browser crashed too many times, quitting...'));
                    // process.exit(1);
                });
            }
        });
    }

    override async init() {
        if (this.__reqCapInterval) {
            clearInterval(this.__reqCapInterval);
            this.__reqCapInterval = undefined;
        }
        await this.dependencyReady();

        if (this.browser) {
            if (this.browser.connected) {
                await this.browser.close();
            } else {
                this.browser.process()?.kill('SIGKILL');
            }
        }
        this.browser = await puppeteer.launch({
            timeout: 10_000,
            args: ['--disable-dev-shm-usage']
        }).catch((err: any) => {
            this.logger.error(`Unknown firebase issue, just die fast.`, { err });
            process.nextTick(() => {
                this.emit('error', err);
                // process.exit(1);
            });
            return Promise.reject(err);
        });
        this.browser.once('disconnected', () => {
            this.logger.warn(`Browser disconnected`);
            if (this.browser) {
                this.emit('crippled');
            }
            process.nextTick(() => this.serviceReady());
        });
        this.logger.info(`Browser launched: ${this.browser.process()?.pid}`);

        this.emit('ready');

        this.newPage().then((r) => this.__loadedPage.push(r));
    }

    @perNextTick()
    reqCapRoutine() {
        const now = Date.now();
        const numToPass = Math.round((now - this.lastReqSentAt) / 1000 * this.rpsCap);
        this.requestDeferredQueue.splice(0, numToPass).forEach((x) => x.resolve(true));
        if (numToPass) {
            this.lastReqSentAt = now;
        }
        if (!this.requestDeferredQueue.length) {
            if (this.__reqCapInterval) {
                clearInterval(this.__reqCapInterval);
                this.__reqCapInterval = undefined;
            }
        } else if (!this.__reqCapInterval) {
            this.__reqCapInterval = setInterval(() => this.reqCapRoutine(), 1000 / this.rpsCap).unref();
        }
    }

    async newPage() {
        await this.serviceReady();
        const sn = this._sn++;
        let page;
        try {
            const dedicatedContext = await this.browser.createBrowserContext();
            page = await dedicatedContext.newPage();
        } catch (err: any) {
            this.logger.warn(`Failed to create page ${sn}`, { err: marshalErrorLike(err) });
            this.browser.process()?.kill('SIGKILL');
            throw new ServiceNodeResourceDrainError(`This specific worker node failed to open a new page, try again.`);
        }
        const preparations = [];

        // preparations.push(page.setUserAgent(`Slackbot-LinkExpanding 1.0 (+https://api.slack.com/robots)`));
        // preparations.push(page.setUserAgent(`Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko; compatible; GPTBot/1.0; +https://openai.com/gptbot)`));
        preparations.push(page.setBypassCSP(true));
        preparations.push(page.setViewport({ width: 1024, height: 1024 }));
        preparations.push(page.exposeFunction('reportSnapshot', (snapshot: PageSnapshot) => {
            if (snapshot.href === 'about:blank') {
                return;
            }
            page.emit('snapshot', snapshot);
        }));
        preparations.push(page.exposeFunction('setViewport', (viewport: Viewport | null) => {
            page.setViewport(viewport).catch(() => undefined);
        }));
        preparations.push(page.evaluateOnNewDocument(SCRIPT_TO_INJECT_INTO_FRAME));
        preparations.push(page.setRequestInterception(true));

        await Promise.all(preparations);

        await page.goto('about:blank', { waitUntil: 'domcontentloaded' });

        const domainSet = new Set<string>();
        let reqCounter = 0;
        let t0: number | undefined;
        let halt = false;

        page.on('request', async (req) => {
            reqCounter++;
            if (halt) {
                return req.abort('blockedbyclient', 1000);
            }
            t0 ??= Date.now();
            const requestUrl = req.url();
            if (!requestUrl.startsWith('http:') && !requestUrl.startsWith('https:') && !requestUrl.startsWith('chrome-extension:') && requestUrl !== 'about:blank') {
                return req.abort('blockedbyclient', 1000);
            }

            const parsedUrl = new URL(requestUrl);
            try {
                if (isIP(parsedUrl.hostname)) {
                    domainSet.add(parsedUrl.hostname);
                } else {
                    const tldParsed = tldExtract(requestUrl);
                    domainSet.add(tldParsed.domain);
                }
            } catch (err) {
                return req.abort('blockedbyclient', 1000);
            }

            if (this.circuitBreakerHosts.has(parsedUrl.hostname.toLowerCase())) {
                page.emit('abuse', { url: requestUrl, page, sn, reason: `Abusive request: ${requestUrl}` });
                return req.abort('blockedbyclient', 1000);
            }

            if (
                parsedUrl.hostname === 'localhost' ||
                parsedUrl.hostname.startsWith('127.')
            ) {
                page.emit('abuse', { url: requestUrl, page, sn, reason: `Suspicious action: Request to localhost: ${requestUrl}` });

                return req.abort('blockedbyclient', 1000);
            }

            const dt = Math.ceil((Date.now() - t0) / 1000);
            const rps = reqCounter / dt;
            // console.log(`rps: ${rps}`);
            const pagePhase = this.pagePhase.get(page);
            if (pagePhase === 'background') {
                if (rps > 10 || reqCounter > 1000) {
                    halt = true;

                    return req.abort('blockedbyclient', 1000);
                }
            }
            if (reqCounter > 1000) {
                if (rps > 60 || reqCounter > 2000) {
                    page.emit('abuse', { url: requestUrl, page, sn, reason: `DDoS attack suspected: Too many requests` });
                    halt = true;

                    return req.abort('blockedbyclient', 1000);
                }
            }

            if (domainSet.size > 200) {
                page.emit('abuse', { url: requestUrl, page, sn, reason: `DDoS attack suspected: Too many domains` });
                halt = true;

                return req.abort('blockedbyclient', 1000);
            }

            if (requestUrl.startsWith('http')) {
                const d = Defer();
                this.requestDeferredQueue.push(d);
                this.reqCapRoutine();
                await d.promise;
            }

            if (req.isInterceptResolutionHandled()) {
                return;
            };

            const continueArgs = req.continueRequestOverrides
                ? [req.continueRequestOverrides(), 0] as const
                : [];

            return req.continue(continueArgs[0], continueArgs[1]);
        });

        await page.evaluateOnNewDocument(`
(function () {
    if (window.self === window.top) {
        let lastTextLength = 0;
        const handlePageLoad = () => {
            const thisTextLength = (document.body.innerText || '').length;
            const deltaLength = Math.abs(thisTextLength - lastTextLength);
            if (10 * deltaLength < lastTextLength) {
                // Change is not significant
                return;
            }
            lastTextLength = thisTextLength;
            if (window.haltSnapshot) {
                return;
            }
            const r = giveSnapshot();
            window.reportSnapshot(r);
        };
        document.addEventListener('readystatechange', handlePageLoad);
        document.addEventListener('load', handlePageLoad);
        document.addEventListener('mutationIdle', handlePageLoad);
    }
    document.addEventListener('DOMContentLoaded', ()=> window.simulateScroll(), { once: true });
})();
`);

        this.snMap.set(page, sn);
        this.logger.info(`Page ${sn} created.`);
        this.lastPageCratedAt = Date.now();
        this.livePages.add(page);
        this.pagePhase.set(page, 'idle');

        return page;
    }

    async getNextPage() {
        let thePage: Page | undefined;
        if (this.__loadedPage.length) {
            thePage = this.__loadedPage.shift();
            if (this.__loadedPage.length <= 1) {
                this.newPage()
                    .then((r) => this.__loadedPage.push(r))
                    .catch((err) => {
                        this.logger.warn(`Failed to load new page ahead of time`, { err: marshalErrorLike(err) });
                    });
            }
        }

        if (!thePage) {
            thePage = await this.newPage();
        }

        const timer = setTimeout(() => {
            this.logger.warn(`Page is not allowed to live past 5 minutes, ditching page ${this.snMap.get(thePage!)}...`);
            this.ditchPage(thePage!);
        }, 300 * 1000);

        this.finalizerMap.set(thePage, timer);

        return thePage;
    }

    async ditchPage(page: Page) {
        if (this.finalizerMap.has(page)) {
            clearTimeout(this.finalizerMap.get(page)!);
            this.finalizerMap.delete(page);
        }
        if (page.isClosed()) {
            return;
        }
        const sn = this.snMap.get(page);
        this.logger.info(`Closing page ${sn}`);
        await Promise.race([
            (async () => {
                const ctx = page.browserContext();
                try {
                    await page.close();
                } finally {
                    await ctx.close();
                }
            })(),
            delay(5000)
        ]).catch((err) => {
            this.logger.error(`Failed to destroy page ${sn}`, { err: marshalErrorLike(err) });
        });
        this.livePages.delete(page);
        this.pagePhase.delete(page);
    }

    async *scrap(parsedUrl: URL, options?: ScrappingOptions): AsyncGenerator<PageSnapshot | undefined> {
        // parsedUrl.search = '';
        const url = parsedUrl.toString();

        let snapshot: PageSnapshot | undefined;
        let screenshot: Buffer | undefined;
        let pageshot: Buffer | undefined;
        const pdfUrls: string[] = [];
        let navigationResponse: HTTPResponse | undefined;
        const page = await this.getNextPage();
        this.pagePhase.set(page, 'active');
        page.on('response', (resp) => {
            if (resp.request().isNavigationRequest()) {
                navigationResponse = resp;
            }
            if (!resp.ok()) {
                return;
            }
            const headers = resp.headers();
            const url = resp.url();
            const contentType = headers['content-type'];
            if (contentType?.toLowerCase().includes('application/pdf')) {
                pdfUrls.push(url);
            }
        });
        if (options?.extraHeaders) {
            page.on('request', async (req) => {
                if (req.isInterceptResolutionHandled()) {
                    return;
                };

                const overrides = req.continueRequestOverrides();
                const continueArgs = [{
                    ...overrides,
                    headers: {
                        ...req.headers(),
                        ...overrides?.headers,
                        ...options.extraHeaders,
                    }
                }, 1] as const;

                return req.continue(continueArgs[0], continueArgs[1]);
            });
        }
        let pageScriptEvaluations: Promise<unknown>[] = [];
        let frameScriptEvaluations: Promise<unknown>[] = [];
        if (options?.injectPageScripts?.length) {
            page.on('framenavigated', (frame) => {
                if (frame !== page.mainFrame()) {
                    return;
                }

                pageScriptEvaluations.push(
                    Promise.allSettled(options.injectPageScripts!.map((x) => frame.evaluate(x).catch((err) => {
                        this.logger.warn(`Error in evaluation of page scripts`, { err });
                    })))
                );
            });
        }
        if (options?.injectFrameScripts?.length) {
            page.on('framenavigated', (frame) => {
                frameScriptEvaluations.push(
                    Promise.allSettled(options.injectFrameScripts!.map((x) => frame.evaluate(x).catch((err) => {
                        this.logger.warn(`Error in evaluation of frame scripts`, { err });
                    })))
                );
            });
        }
        const sn = this.snMap.get(page);
        this.logger.info(`Page ${sn}: Scraping ${url}`, { url });
        if (options?.locale) {
            // Add headers via request interception to walk around this bug
            // https://github.com/puppeteer/puppeteer/issues/10235
            // await page.setExtraHTTPHeaders({
            //     'Accept-Language': options?.locale
            // });

            await page.evaluateOnNewDocument(() => {
                Object.defineProperty(navigator, "language", {
                    get: function () {
                        return options?.locale;
                    }
                });
                Object.defineProperty(navigator, "languages", {
                    get: function () {
                        return [options?.locale];
                    }
                });
            });
        }

        if (options?.proxyUrl) {
            await page.useProxy(options.proxyUrl, {
                headers: options.extraHeaders,
                interceptResolutionPriority: 2,
            });
        }
        if (options?.cookies) {
            const mapped = options.cookies.map((x) => {
                const draft: CookieParam = {
                    name: x.name,
                    value: encodeURIComponent(x.value),
                    secure: x.secure,
                    domain: x.domain,
                    path: x.path,
                    expires: x.expires ? Math.floor(x.expires.valueOf() / 1000) : undefined,
                    sameSite: x.sameSite as any,
                };
                if (!draft.expires && x.maxAge) {
                    draft.expires = Math.floor(Date.now() / 1000) + x.maxAge;
                }
                if (!draft.domain) {
                    draft.url = parsedUrl.toString();
                }

                return draft;
            });
            try {
                await page.setCookie(...mapped);
            } catch (err: any) {
                this.logger.warn(`Page ${sn}: Failed to set cookies`, { err: marshalErrorLike(err) });
                throw new ParamValidationError({
                    path: 'cookies',
                    message: `Failed to set cookies: ${err?.message}`
                });
            }
        }
        if (options?.overrideUserAgent) {
            await page.setUserAgent(options.overrideUserAgent);
        }
        if (options?.viewport) {
            await page.setViewport(options.viewport);
        }

        let nextSnapshotDeferred = Defer();
        const crippleListener = () => nextSnapshotDeferred.reject(new ServiceCrashedError({ message: `Browser crashed, try again` }));
        this.once('crippled', crippleListener);
        nextSnapshotDeferred.promise.finally(() => {
            this.off('crippled', crippleListener);
        });
        let finalized = false;
        const hdl = (s: any) => {
            if (snapshot === s) {
                return;
            }
            snapshot = s;
            if (s?.maxElemDepth && s.maxElemDepth > 256) {
                return;
            }
            if (s?.elemCount && s.elemCount > 10_000) {
                return;
            }
            nextSnapshotDeferred.resolve(s);
            nextSnapshotDeferred = Defer();
            this.once('crippled', crippleListener);
            nextSnapshotDeferred.promise.finally(() => {
                this.off('crippled', crippleListener);
            });
        };
        page.on('snapshot', hdl);
        page.once('abuse', (event: any) => {
            this.emit('abuse', { ...event, url: parsedUrl });
            if (snapshot?.href && parsedUrl.href !== snapshot.href) {
                this.emit('abuse', { ...event, url: snapshot.href });
            }

            nextSnapshotDeferred.reject(
                new SecurityCompromiseError(`Abuse detected: ${event.reason}`)
            );
        });

        const timeout = options?.timeoutMs || 30_000;
        const goToOptions: GoToOptions = {
            waitUntil: ['load', 'domcontentloaded', 'networkidle0'],
            timeout,
        };

        if (options?.referer) {
            goToOptions.referer = options.referer;
        }

        const delayPromise = delay(timeout);
        const gotoPromise = page.goto(url, goToOptions)
            .catch((err) => {
                if (err instanceof TimeoutError) {
                    this.logger.warn(`Page ${sn}: Browsing of ${url} timed out`, { err: marshalErrorLike(err) });
                    return new AssertionFailureError({
                        message: `Failed to goto ${url}: ${err}`,
                        cause: err,
                    });
                }
                if (err?.message?.startsWith('net::ERR_ABORTED')) {
                    if (pdfUrls.length) {
                        // Not throw for pdf mode.
                        return;
                    }
                }

                this.logger.warn(`Page ${sn}: Browsing of ${url} failed`, { err: marshalErrorLike(err) });
                return Promise.reject(new AssertionFailureError({
                    message: `Failed to goto ${url}: ${err}`,
                    cause: err,
                }));
            }).then(async (stuff) => {
                // This check is necessary because without snapshot, the condition of the page is unclear
                // Calling evaluate directly may stall the process.
                if (!snapshot) {
                    if (stuff instanceof Error) {
                        finalized = true;
                        throw stuff;
                    }
                }
                await Promise.race([Promise.allSettled([...pageScriptEvaluations, ...frameScriptEvaluations]), delayPromise])
                    .catch(() => void 0);
                try {
                    const pSubFrameSnapshots = this.snapshotChildFrames(page);
                    snapshot = await page.evaluate('giveSnapshot(true)') as PageSnapshot;
                    screenshot = Buffer.from(await page.screenshot());
                    pageshot = Buffer.from(await page.screenshot({ fullPage: true }));
                    if (snapshot) {
                        snapshot.childFrames = await pSubFrameSnapshots;
                    }
                } catch (err: any) {
                    this.logger.warn(`Page ${sn}: Failed to finalize ${url}`, { err: marshalErrorLike(err) });
                    if (stuff instanceof Error) {
                        finalized = true;
                        throw stuff;
                    }
                }
                if (!snapshot?.html) {
                    if (stuff instanceof Error) {
                        finalized = true;
                        throw stuff;
                    }
                }
                // try {
                //     if ((!snapshot?.title || !snapshot?.parsed?.content) && !(snapshot?.pdfs?.length)) {
                //         const salvaged = await this.salvage(url, page);
                //         if (salvaged) {
                //             const pSubFrameSnapshots = this.snapshotChildFrames(page);
                //             snapshot = await page.evaluate('giveSnapshot(true)') as PageSnapshot;
                //             screenshot = Buffer.from(await page.screenshot());
                //             pageshot = Buffer.from(await page.screenshot({ fullPage: true }));
                //             if (snapshot) {
                //                 snapshot.childFrames = await pSubFrameSnapshots;
                //             }
                //         }
                //     }
                // } catch (err: any) {
                //     this.logger.warn(`Page ${sn}: Failed to salvage ${url}`, { err: marshalErrorLike(err) });
                // }

                finalized = true;
                if (snapshot?.html) {
                    this.logger.info(`Page ${sn}: Snapshot of ${url} done`, { url, title: snapshot?.title, href: snapshot?.href });
                    this.emit(
                        'crawled',
                        {
                            ...snapshot,
                            status: navigationResponse?.status(),
                            statusText: navigationResponse?.statusText(),
                            pdfs: _.uniq(pdfUrls), screenshot, pageshot,
                        },
                        { ...options, url: parsedUrl }
                    );
                }
            });
        let waitForPromise: Promise<any> | undefined;
        if (options?.waitForSelector) {
            const t0 = Date.now();
            waitForPromise = nextSnapshotDeferred.promise.then(() => {
                const t1 = Date.now();
                const elapsed = t1 - t0;
                const remaining = timeout - elapsed;
                const thisTimeout = remaining > 100 ? remaining : 100;
                const p = (Array.isArray(options.waitForSelector) ?
                    Promise.all(options.waitForSelector.map((x) => page.waitForSelector(x, { timeout: thisTimeout }))) :
                    page.waitForSelector(options.waitForSelector!, { timeout: thisTimeout }))
                    .then(async () => {
                        const pSubFrameSnapshots = this.snapshotChildFrames(page);
                        snapshot = await page.evaluate('giveSnapshot(true)') as PageSnapshot;
                        screenshot = Buffer.from(await page.screenshot());
                        pageshot = Buffer.from(await page.screenshot({ fullPage: true }));
                        if (snapshot) {
                            snapshot.childFrames = await pSubFrameSnapshots;
                        }
                        finalized = true;
                    })
                    .catch((err) => {
                        this.logger.warn(`Page ${sn}: Failed to wait for selector ${options.waitForSelector}`, { err: marshalErrorLike(err) });
                        waitForPromise = undefined;
                    });
                return p as any;
            });
        }

        try {
            let lastHTML = snapshot?.html;
            while (true) {
                const ckpt = [nextSnapshotDeferred.promise, gotoPromise];
                if (waitForPromise) {
                    ckpt.push(waitForPromise);
                }
                if (options?.minIntervalMs) {
                    ckpt.push(delay(options.minIntervalMs));
                }
                let error;
                await Promise.race(ckpt).catch((err) => error = err);
                if (finalized && !error) {
                    if (!snapshot && !screenshot) {
                        if (error) {
                            throw error;
                        }
                        throw new AssertionFailureError(`Could not extract any meaningful content from the page`);
                    }
                    yield {
                        ...snapshot,
                        status: navigationResponse?.status(),
                        statusText: navigationResponse?.statusText(),
                        pdfs: _.uniq(pdfUrls), screenshot, pageshot
                    } as PageSnapshot;
                    break;
                }
                if (options?.favorScreenshot && snapshot?.title && snapshot?.html !== lastHTML) {
                    screenshot = Buffer.from(await page.screenshot());
                    pageshot = Buffer.from(await page.screenshot({ fullPage: true }));
                    lastHTML = snapshot.html;
                }
                if (snapshot || screenshot) {
                    yield {
                        ...snapshot,
                        status: navigationResponse?.status(),
                        statusText: navigationResponse?.statusText(),
                        pdfs: _.uniq(pdfUrls), screenshot, pageshot
                    } as PageSnapshot;
                }
                if (error) {
                    throw error;
                }
            }
        } finally {
            this.pagePhase.set(page, 'background');
            (waitForPromise ? Promise.allSettled([gotoPromise, waitForPromise]) : gotoPromise).finally(() => {
                page.off('snapshot', hdl);
                this.ditchPage(page);
            });
            nextSnapshotDeferred.resolve();
        }
    }

    // async salvage(url: string, page: Page) {
    //     this.logger.info(`Salvaging ${url}`);
    //     const googleArchiveUrl = `https://webcache.googleusercontent.com/search?q=cache:${encodeURIComponent(url)}`;
    //     const resp = await fetch(googleArchiveUrl, {
    //         headers: {
    //             'User-Agent': `Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko; compatible; GPTBot/1.0; +https://openai.com/gptbot)`
    //         }
    //     });
    //     resp.body?.cancel().catch(() => void 0);
    //     if (!resp.ok) {
    //         this.logger.warn(`No salvation found for url: ${url}`, { status: resp.status, url });
    //         return null;
    //     }

    //     await page.goto(googleArchiveUrl, { waitUntil: ['load', 'domcontentloaded', 'networkidle0'], timeout: 15_000 }).catch((err) => {
    //         this.logger.warn(`Page salvation did not fully succeed.`, { err: marshalErrorLike(err) });
    //     });

    //     this.logger.info(`Salvation completed.`);

    //     return true;
    // }

    async snapshotChildFrames(page: Page): Promise<PageSnapshot[]> {
        const childFrames = page.mainFrame().childFrames();
        const r = await Promise.all(childFrames.map(async (x) => {
            const thisUrl = x.url();
            if (!thisUrl || thisUrl === 'about:blank') {
                return undefined;
            }
            try {
                await x.evaluate(SCRIPT_TO_INJECT_INTO_FRAME);

                return await x.evaluate(`giveSnapshot()`);
            } catch (err) {
                this.logger.warn(`Failed to snapshot child frame ${thisUrl}`, { err });
                return undefined;
            }
        })) as PageSnapshot[];

        return r.filter(Boolean);
    }

}

const puppeteerControl = container.resolve(PuppeteerControl);

export default puppeteerControl;

================
File: backend/functions/src/services/snapshot-formatter.ts
================
import { randomUUID } from 'crypto';
import { container, singleton } from 'tsyringe';
import { AsyncService, HashManager, marshalErrorLike } from 'civkit';
import TurndownService, { Filter, Rule } from 'turndown';
import { Logger } from '../shared/services/logger';
import { PageSnapshot } from './puppeteer';
import { FirebaseStorageBucketControl } from '../shared/services/firebase-storage-bucket';
import { AsyncContext } from '../shared/services/async-context';
import { Threaded } from '../shared/services/threaded';
import { JSDomControl } from './jsdom';
import { AltTextService } from './alt-text';
import { PDFExtractor } from './pdf-extract';
import { cleanAttribute } from '../utils/misc';
import _ from 'lodash';
import { STATUS_CODES } from 'http';
import type { CrawlerOptions } from '../dto/scrapping-options';


export interface FormattedPage {
    title?: string;
    description?: string;
    url?: string;
    content?: string;
    publishedTime?: string;
    html?: string;
    text?: string;
    screenshotUrl?: string;
    screenshot?: Buffer;
    pageshotUrl?: string;
    pageshot?: Buffer;
    links?: { [k: string]: string; } | [string, string][];
    images?: { [k: string]: string; } | [string, string][];
    warning?: string;
    usage?: {
        total_tokens?: number;
        totalTokens?: number;
        tokens?: number;
    };

    textRepresentation?: string;

    [Symbol.dispose]: () => void;
}

export const md5Hasher = new HashManager('md5', 'hex');

const gfmPlugin = require('turndown-plugin-gfm');
const highlightRegExp = /highlight-(?:text|source)-([a-z0-9]+)/;

export function highlightedCodeBlock(turndownService: TurndownService) {
    turndownService.addRule('highlightedCodeBlock', {
        filter: (node) => {
            return (
                node.nodeName === 'DIV' &&
                node.firstChild?.nodeName === 'PRE' &&
                highlightRegExp.test(node.className)
            );
        },
        replacement: (_content, node, options) => {
            const className = (node as any).className || '';
            const language = (className.match(highlightRegExp) || [null, ''])[1];

            return (
                '\n\n' + options.fence + language + '\n' +
                node.firstChild!.textContent +
                '\n' + options.fence + '\n\n'
            );
        }
    });
}

@singleton()
export class SnapshotFormatter extends AsyncService {

    logger = this.globalLogger.child({ service: this.constructor.name });

    gfmPlugin = [gfmPlugin.tables, highlightedCodeBlock, gfmPlugin.strikethrough, gfmPlugin.taskListItems];
    gfmNoTable = [highlightedCodeBlock, gfmPlugin.strikethrough, gfmPlugin.taskListItems];

    constructor(
        protected globalLogger: Logger,
        protected jsdomControl: JSDomControl,
        protected altTextService: AltTextService,
        protected pdfExtractor: PDFExtractor,
        protected threadLocal: AsyncContext,
        protected firebaseObjectStorage: FirebaseStorageBucketControl,
    ) {
        super(...arguments);
    }

    override async init() {
        await this.dependencyReady();
        this.emit('ready');
    }


    @Threaded()
    async formatSnapshot(mode: string | 'markdown' | 'html' | 'text' | 'screenshot' | 'pageshot', snapshot: PageSnapshot & {
        screenshotUrl?: string;
        pageshotUrl?: string;
    }, nominalUrl?: URL, urlValidMs = 3600 * 1000 * 4) {
        const t0 = Date.now();
        const f = {
            ...this.getGeneralSnapshotMixins(snapshot),
        };
        let modeOK = false;

        if (mode.includes('screenshot')) {
            modeOK = true;
            if (snapshot.screenshot && !snapshot.screenshotUrl) {
                const fid = `instant-screenshots/${randomUUID()}`;
                await this.firebaseObjectStorage.saveFile(fid, snapshot.screenshot, {
                    metadata: {
                        contentType: 'image/png',
                    }
                });
                snapshot.screenshotUrl = await this.firebaseObjectStorage.signDownloadUrl(fid, Date.now() + urlValidMs);
            }
            Object.assign(f, {
                screenshotUrl: snapshot.screenshotUrl,
            });

            Object.defineProperty(f, 'textRepresentation', { value: `${f.screenshotUrl}\n`, enumerable: false, configurable: true });
        }
        if (mode.includes('pageshot')) {
            modeOK = true;
            if (snapshot.pageshot && !snapshot.pageshotUrl) {
                const fid = `instant-screenshots/${randomUUID()}`;
                await this.firebaseObjectStorage.saveFile(fid, snapshot.pageshot, {
                    metadata: {
                        contentType: 'image/png',
                    }
                });
                snapshot.pageshotUrl = await this.firebaseObjectStorage.signDownloadUrl(fid, Date.now() + urlValidMs);
            }
            Object.assign(f, {
                html: snapshot.html,
                pageshotUrl: snapshot.pageshotUrl,
            });
            Object.defineProperty(f, 'textRepresentation', { value: `${f.pageshotUrl}\n`, enumerable: false, configurable: true });
        }
        if (mode.includes('html')) {
            modeOK = true;
            Object.assign(f, {
                html: snapshot.html,
            });

            Object.defineProperty(f, 'textRepresentation', { value: snapshot.html, enumerable: false, configurable: true });
        }

        let pdfMode = false;
        // in case of Google Web Cache content
        if (snapshot.pdfs?.length && (!snapshot.title || snapshot.title.startsWith('cache:'))) {
            const pdf = await this.pdfExtractor.cachedExtract(snapshot.pdfs[0],
                this.threadLocal.get('cacheTolerance'),
                snapshot.pdfs[0].startsWith('http') ? undefined : snapshot.href,
            );
            if (pdf) {
                pdfMode = true;
                snapshot.title = pdf.meta?.Title;
                snapshot.text = pdf.text || snapshot.text;
                snapshot.parsed = {
                    content: pdf.content,
                    textContent: pdf.content,
                    length: pdf.content?.length,
                    byline: pdf.meta?.Author,
                    lang: pdf.meta?.Language || undefined,
                    title: pdf.meta?.Title,
                    publishedTime: this.pdfExtractor.parsePdfDate(pdf.meta?.ModDate || pdf.meta?.CreationDate)?.toISOString(),
                };
            }
        }

        if (mode.includes('text')) {
            modeOK = true;
            Object.assign(f, {
                text: snapshot.text,
            });
            Object.defineProperty(f, 'textRepresentation', { value: snapshot.text, enumerable: false, configurable: true });
        }

        if (mode.includes('lm')) {
            modeOK = true;
            f.content = snapshot.parsed?.textContent;
        }

        if (modeOK && (mode.includes('lm') ||
            (!mode.includes('markdown') && !mode.includes('content')))
        ) {
            const dt = Date.now() - t0;
            this.logger.info(`Formatting took ${dt}ms`, { mode, url: nominalUrl?.toString(), dt });

            return f;
        }

        const imgDataUrlToObjectUrl = !Boolean(this.threadLocal.get('keepImgDataUrl'));

        let contentText = '';
        const imageSummary = {} as { [k: string]: string; };
        const imageIdxTrack = new Map<string, number[]>();
        const uid = this.threadLocal.get('uid');
        do {
            if (pdfMode) {
                contentText = (snapshot.parsed?.content || snapshot.text || '').trim();
                break;
            }

            if (
                snapshot.maxElemDepth! > 256 ||
                (!uid && snapshot.elemCount! > 10_000) ||
                snapshot.elemCount! > 70_000
            ) {
                this.logger.warn('Degrading to text to protect the server', { url: snapshot.href });
                contentText = (snapshot.text || '').trimEnd();
                break;
            }

            const urlToAltMap: { [k: string]: string | undefined; } = {};
            const noGFMOpts = this.threadLocal.get('noGfm');
            const imageRetention = this.threadLocal.get('retainImages') as CrawlerOptions['retainImages'];
            let imgIdx = 0;
            const customRules: { [k: string]: Rule; } = {
                'img-retention': {
                    filter: 'img',
                    replacement: (_content: string, node: HTMLElement) => {
                        if (imageRetention === 'none') {
                            return '';
                        }
                        const alt = cleanAttribute(node.getAttribute('alt'));

                        if (imageRetention === 'alt') {
                            return alt ? `(Image ${++imgIdx}: ${alt})` : '';
                        }
                        let linkPreferredSrc = (node.getAttribute('src') || '').trim();
                        const maybeSrcSet: string = (node.getAttribute('srcset') || '').trim();
                        if (!linkPreferredSrc && maybeSrcSet) {
                            linkPreferredSrc = maybeSrcSet.split(',').map((x) => x.trim()).filter(Boolean)[0];
                        }
                        if (!linkPreferredSrc || linkPreferredSrc.startsWith('data:')) {
                            const dataSrc = (node.getAttribute('data-src') || '').trim();
                            if (dataSrc && !dataSrc.startsWith('data:')) {
                                linkPreferredSrc = dataSrc;
                            }
                        }

                        let src;
                        try {
                            src = new URL(linkPreferredSrc, snapshot.rebase || nominalUrl).toString();
                        } catch (_err) {
                            void 0;
                        }
                        if (!src) {
                            return '';
                        }
                        const mapped = urlToAltMap[src];
                        const imgSerial = ++imgIdx;
                        const idxArr = imageIdxTrack.has(src) ? imageIdxTrack.get(src)! : [];
                        idxArr.push(imgSerial);
                        imageIdxTrack.set(src, idxArr);

                        if (mapped) {
                            imageSummary[src] = mapped || alt;

                            if (imageRetention === 'alt_p') {
                                return `(Image ${imgIdx}: ${mapped || alt})`;
                            }

                            if (src?.startsWith('data:') && imgDataUrlToObjectUrl) {
                                const mappedUrl = new URL(`blob:${nominalUrl?.origin || ''}/${md5Hasher.hash(src)}`);
                                mappedUrl.protocol = 'blob:';

                                return `![Image ${imgIdx}: ${mapped || alt}](${mappedUrl})`;
                            }

                            return `![Image ${imgIdx}: ${mapped || alt}](${src})`;
                        } else if (imageRetention === 'alt_p') {
                            return alt ? `(Image ${imgIdx}: ${alt})` : '';
                        }

                        imageSummary[src] = alt || '';

                        if (src?.startsWith('data:') && imgDataUrlToObjectUrl) {
                            const mappedUrl = new URL(`blob:${nominalUrl?.origin || ''}/${md5Hasher.hash(src)}`);
                            mappedUrl.protocol = 'blob:';

                            return alt ? `![Image ${imgIdx}: ${alt}](${mappedUrl})` : `![Image ${imgIdx}](${mappedUrl})`;
                        }

                        return alt ? `![Image ${imgIdx}: ${alt}](${src})` : `![Image ${imgIdx}](${src})`;
                    }
                } as Rule
            };
            const optsMixin = {
                url: snapshot.rebase || nominalUrl,
                customRules,
                customKeep: noGFMOpts === 'table' ? 'table' : undefined,
                imgDataUrlToObjectUrl,
            } as const;

            const jsDomElementOfHTML = this.jsdomControl.snippetToElement(snapshot.html, snapshot.href);
            let toBeTurnedToMd = jsDomElementOfHTML;
            let turnDownService = this.getTurndown({ ...optsMixin });
            if (!mode.includes('markdown') && snapshot.parsed?.content) {
                const jsDomElementOfParsed = this.jsdomControl.snippetToElement(snapshot.parsed.content, snapshot.href);
                const par1 = this.jsdomControl.runTurndown(turnDownService, jsDomElementOfHTML);
                const par2 = snapshot.parsed.content ? this.jsdomControl.runTurndown(turnDownService, jsDomElementOfParsed) : '';

                // If Readability did its job
                if (par2.length >= 0.3 * par1.length) {
                    turnDownService = this.getTurndown({ noRules: true, ...optsMixin });
                    if (snapshot.parsed.content) {
                        toBeTurnedToMd = jsDomElementOfParsed;
                    }
                }
            }

            if (!noGFMOpts) {
                turnDownService = turnDownService.use(noGFMOpts === 'table' ? this.gfmNoTable : this.gfmPlugin);
            }

            // _p is the special suffix for withGeneratedAlt
            if (snapshot.imgs?.length && imageRetention?.endsWith('_p')) {
                const tasks = _.uniqBy((snapshot.imgs || []), 'src').map(async (x) => {
                    const r = await this.altTextService.getAltText(x).catch((err: any) => {
                        this.logger.warn(`Failed to get alt text for ${x.src}`, { err: marshalErrorLike(err) });
                        return undefined;
                    });
                    if (r && x.src) {
                        urlToAltMap[x.src.trim()] = r;
                    }
                });

                await Promise.all(tasks);
            }

            if (toBeTurnedToMd) {
                try {
                    contentText = this.jsdomControl.runTurndown(turnDownService, toBeTurnedToMd).trim();
                } catch (err) {
                    this.logger.warn(`Turndown failed to run, retrying without plugins`, { err });
                    const vanillaTurnDownService = this.getTurndown({ ...optsMixin });
                    try {
                        contentText = this.jsdomControl.runTurndown(vanillaTurnDownService, toBeTurnedToMd).trim();
                    } catch (err2) {
                        this.logger.warn(`Turndown failed to run, giving up`, { err: err2 });
                    }
                }
            }

            if (
                this.isPoorlyTransformed(contentText, toBeTurnedToMd)
                && toBeTurnedToMd !== jsDomElementOfHTML
            ) {
                toBeTurnedToMd = jsDomElementOfHTML;
                try {
                    contentText = this.jsdomControl.runTurndown(turnDownService, jsDomElementOfHTML).trim();
                } catch (err) {
                    this.logger.warn(`Turndown failed to run, retrying without plugins`, { err });
                    const vanillaTurnDownService = this.getTurndown({ ...optsMixin });
                    try {
                        contentText = this.jsdomControl.runTurndown(vanillaTurnDownService, jsDomElementOfHTML).trim();
                    } catch (err2) {
                        this.logger.warn(`Turndown failed to run, giving up`, { err: err2 });
                    }
                }
            }
            if (this.isPoorlyTransformed(contentText, toBeTurnedToMd)) {
                contentText = (snapshot.text || '').trimEnd();
            }
        } while (false);

        const formatted: FormattedPage = {
            title: (snapshot.parsed?.title || snapshot.title || '').trim(),
            description: (snapshot.description || '').trim(),
            url: nominalUrl?.toString() || snapshot.href?.trim(),
            content: contentText,
            publishedTime: snapshot.parsed?.publishedTime || undefined,
            [Symbol.dispose]: () => { },
        };

        if (snapshot.status) {
            const code = snapshot.status;
            const n = code - 200;
            if (n < 0 || n >= 200) {
                const text = snapshot.statusText || STATUS_CODES[code];
                formatted.warning = `Target URL returned error ${code}${text ? `: ${text}` : ''}`;
            }
        }

        if (this.threadLocal.get('withImagesSummary')) {
            formatted.images =
                _(imageSummary)
                    .toPairs()
                    .map(
                        ([url, alt], i) => {
                            return [`Image ${(imageIdxTrack?.get(url) || [i + 1]).join(',')}${alt ? `: ${alt}` : ''}`, url];
                        }
                    ).fromPairs()
                    .value();
        }
        if (this.threadLocal.get('withLinksSummary')) {
            const links = this.jsdomControl.inferSnapshot(snapshot).links;

            if (this.threadLocal.get('withLinksSummary') === 'all') {
                formatted.links = links;
            } else {
                formatted.links = _.fromPairs(links.filter(([_label, href]) => !href.startsWith('file:') && !href.startsWith('javascript:')));
            }
        }

        Object.assign(f, formatted);

        const textRepresentation = (function (this: typeof formatted) {
            const mixins = [];
            if (this.publishedTime) {
                mixins.push(`Published Time: ${this.publishedTime}`);
            }
            const suffixMixins = [];
            if (this.images) {
                const imageSummaryChunks = ['Images:'];
                for (const [k, v] of Object.entries(this.images)) {
                    imageSummaryChunks.push(`- ![${k}](${v})`);
                }
                if (imageSummaryChunks.length === 1) {
                    imageSummaryChunks.push('This page does not seem to contain any images.');
                }
                suffixMixins.push(imageSummaryChunks.join('\n'));
            }
            if (this.links) {
                const linkSummaryChunks = ['Links/Buttons:'];
                if (Array.isArray(this.links)) {
                    for (const [k, v] of this.links) {
                        linkSummaryChunks.push(`- [${k}](${v})`);
                    }
                } else {
                    for (const [k, v] of Object.entries(this.links)) {
                        linkSummaryChunks.push(`- [${k}](${v})`);
                    }
                }
                if (linkSummaryChunks.length === 1) {
                    linkSummaryChunks.push('This page does not seem to contain any buttons/links.');
                }
                suffixMixins.push(linkSummaryChunks.join('\n'));
            }

            if (this.warning) {
                mixins.push(`Warning: ${this.warning}`);
            }

            if (mode.includes('markdown')) {
                return `${mixins.length ? `${mixins.join('\n\n')}\n\n` : ''}${this.content}
${suffixMixins.length ? `\n${suffixMixins.join('\n\n')}\n` : ''}`;
            }

            return `Title: ${this.title}

URL Source: ${this.url}
${mixins.length ? `\n${mixins.join('\n\n')}\n` : ''}
Markdown Content:
${this.content}
${suffixMixins.length ? `\n${suffixMixins.join('\n\n')}\n` : ''}`;
        }).call(formatted);

        Object.defineProperty(f, 'textRepresentation', { value: textRepresentation, enumerable: false });

        const dt = Date.now() - t0;
        this.logger.info(`Formatting took ${dt}ms`, { mode, url: nominalUrl?.toString(), dt });

        return f as FormattedPage;
    }

    getGeneralSnapshotMixins(snapshot: PageSnapshot) {
        let inferred;
        const mixin: any = {};
        if (this.threadLocal.get('withImagesSummary')) {
            inferred ??= this.jsdomControl.inferSnapshot(snapshot);
            const imageSummary = {} as { [k: string]: string; };
            const imageIdxTrack = new Map<string, number[]>();

            let imgIdx = 0;

            for (const img of inferred.imgs) {
                const imgSerial = ++imgIdx;
                const idxArr = imageIdxTrack.has(img.src) ? imageIdxTrack.get(img.src)! : [];
                idxArr.push(imgSerial);
                imageIdxTrack.set(img.src, idxArr);
                imageSummary[img.src] = img.alt || '';
            }

            mixin.images =
                _(imageSummary)
                    .toPairs()
                    .map(
                        ([url, alt], i) => {
                            return [`Image ${(imageIdxTrack?.get(url) || [i + 1]).join(',')}${alt ? `: ${alt}` : ''}`, url];
                        }
                    ).fromPairs()
                    .value();
        }
        if (this.threadLocal.get('withLinksSummary')) {
            inferred ??= this.jsdomControl.inferSnapshot(snapshot);
            if (this.threadLocal.get('withLinksSummary') === 'all') {
                mixin.links = inferred.links;
            } else {
                mixin.links = _.fromPairs(inferred.links.filter(([_label, href]) => !href.startsWith('file:') && !href.startsWith('javascript:')));
            }
        }
        if (snapshot.status) {
            const code = snapshot.status;
            const n = code - 200;
            if (n < 0 || n >= 200) {
                const text = snapshot.statusText || STATUS_CODES[code];
                mixin.warning = `Target URL returned error ${code}${text ? `: ${text}` : ''}`;
            }
        }

        return mixin;
    }

    getTurndown(options?: {
        noRules?: boolean | string,
        url?: string | URL;
        imgDataUrlToObjectUrl?: boolean;
        removeImages?: boolean | 'src';
        customRules?: { [k: string]: Rule; };
        customKeep?: Filter;
    }) {
        const turnDownService = new TurndownService({
            codeBlockStyle: 'fenced',
            preformattedCode: true,
        } as any);
        if (options?.customKeep) {
            turnDownService.keep(options.customKeep);
        }
        if (!options?.noRules) {
            turnDownService.addRule('remove-irrelevant', {
                filter: ['meta', 'style', 'script', 'noscript', 'link', 'textarea', 'select'],
                replacement: () => ''
            });
            turnDownService.addRule('truncate-svg', {
                filter: 'svg' as any,
                replacement: () => ''
            });
            turnDownService.addRule('title-as-h1', {
                filter: ['title'],
                replacement: (innerText) => `${innerText}\n===============\n`
            });
        }

        if (options?.imgDataUrlToObjectUrl) {
            turnDownService.addRule('data-url-to-pseudo-object-url', {
                filter: (node) => Boolean(node.tagName === 'IMG' && node.getAttribute('src')?.startsWith('data:')),
                replacement: (_content, node: any) => {
                    const src = (node.getAttribute('src') || '').trim();
                    const alt = cleanAttribute(node.getAttribute('alt')) || '';

                    if (options.url) {
                        const refUrl = new URL(options.url);
                        const mappedUrl = new URL(`blob:${refUrl.origin}/${md5Hasher.hash(src)}`);

                        return `![${alt}](${mappedUrl})`;
                    }

                    return `![${alt}](blob:${md5Hasher.hash(src)})`;
                }
            });
        }

        if (options?.customRules) {
            for (const [k, v] of Object.entries(options.customRules)) {
                turnDownService.addRule(k, v);
            }
        }

        turnDownService.addRule('improved-paragraph', {
            filter: 'p',
            replacement: (innerText) => {
                const trimmed = innerText.trim();
                if (!trimmed) {
                    return '';
                }

                return `${trimmed.replace(/\n{3,}/g, '\n\n')}\n\n`;
            }
        });
        turnDownService.addRule('improved-inline-link', {
            filter: function (node, options) {
                return Boolean(
                    options.linkStyle === 'inlined' &&
                    node.nodeName === 'A' &&
                    node.getAttribute('href')
                );
            },

            replacement: function (content, node: any) {
                const href = node.getAttribute('href');
                let title = cleanAttribute(node.getAttribute('title'));
                if (title) title = ' "' + title.replace(/"/g, '\\"') + '"';

                const fixedContent = content.replace(/\s+/g, ' ').trim();
                let fixedHref = href.replace(/\s+/g, '').trim();
                if (options?.url) {
                    try {
                        fixedHref = new URL(fixedHref, options.url).toString();
                    } catch (_err) {
                        void 0;
                    }
                }

                return `[${fixedContent}](${fixedHref}${title || ''})`;
            }
        });
        turnDownService.addRule('improved-code', {
            filter: function (node: any) {
                let hasSiblings = node.previousSibling || node.nextSibling;
                let isCodeBlock = node.parentNode.nodeName === 'PRE' && !hasSiblings;

                return node.nodeName === 'CODE' && !isCodeBlock;
            },

            replacement: function (inputContent: any) {
                if (!inputContent) return '';
                let content = inputContent;

                let delimiter = '`';
                let matches = content.match(/`+/gm) || [];
                while (matches.indexOf(delimiter) !== -1) delimiter = delimiter + '`';
                if (content.includes('\n')) {
                    delimiter = '```';
                }

                let extraSpace = delimiter === '```' ? '\n' : /^`|^ .*?[^ ].* $|`$/.test(content) ? ' ' : '';

                return delimiter + extraSpace + content + (delimiter === '```' && !content.endsWith(extraSpace) ? extraSpace : '') + delimiter;
            }
        });

        return turnDownService;
    }


    isPoorlyTransformed(content?: string, node?: Element) {
        if (!content) {
            return true;
        }

        if (content.startsWith('<') && content.endsWith('>')) {
            return true;
        }

        if (!this.threadLocal.get('noGfm') && content.includes('<table') && content.includes('</table>')) {
            if (node?.textContent && content.length > node.textContent.length * 0.8) {
                return true;
            }

            const tableElms = node?.querySelectorAll('table') || [];
            const deepTableElms = node?.querySelectorAll('table table');
            if (node && tableElms.length) {
                const wrappingTables = _.without(tableElms, ...Array.from(deepTableElms || []));
                const tableTextsLength = _.sum(wrappingTables.map((x) => (x.innerHTML?.length || 0)));

                if (tableTextsLength / (content.length) > 0.6) {
                    return true;
                }
            }

            const tbodyElms = node?.querySelectorAll('tbody') || [];
            const deepTbodyElms = node?.querySelectorAll('tbody tbody');
            if ((deepTbodyElms?.length || 0) / tbodyElms.length > 0.6) {
                return true;
            }
        }

        return false;
    }
}

const snapshotFormatter = container.resolve(SnapshotFormatter);

export default snapshotFormatter;

================
File: backend/functions/src/stand-alone/crawl.ts
================
import 'reflect-metadata';
import { container, singleton } from 'tsyringe';
import { initializeApp, applicationDefault } from 'firebase-admin/app';

process.env['FIREBASE_CONFIG'] ??= JSON.stringify({
    projectId: process.env['GCLOUD_PROJECT'] || 'reader-6b7dc',
    storageBucket: `${process.env['GCLOUD_PROJECT'] || 'reader-6b7dc'}.appspot.com`,
    credential: applicationDefault(),
});

initializeApp();


import { Logger, CloudFunctionRegistry } from '../shared';
import { AbstractRPCRegistry, OpenAPIManager } from 'civkit/civ-rpc';
import { ExpressServer } from 'civkit/civ-rpc/express';
import http2 from 'http2';
import { CrawlerHost } from '../cloud-functions/crawler';
import { FsWalk, WalkOutEntity } from 'civkit/fswalk';
import path from 'path';
import fs from 'fs';
import { mimeOfExt } from 'civkit/mime';
import { NextFunction, Request, Response } from 'express';

process.on('unhandledRejection', (err) => {
    console.error('Unhandled rejection', err);
});

process.on('uncaughtException', (err) => {
    console.log('Uncaught exception', err);

    // Looks like Firebase runtime does not handle error properly.
    // Make sure to quit the process.
    console.error('Uncaught exception, process quit.');
    process.nextTick(() => process.exit(1));
});

@singleton()
export class CrawlStandAloneServer extends ExpressServer {
    logger = this.globalLogger.child({ service: this.constructor.name });

    httpAlternativeServer?: typeof this['httpServer'];
    assets = new Map<string, WalkOutEntity>();

    constructor(
        protected globalLogger: Logger,
        protected registry: CloudFunctionRegistry,
        protected crawlerHost: CrawlerHost,
    ) {
        super(...arguments);

        registry.allHandsOnDeck().catch(() => void 0);
        registry.title = 'reader';
        registry.version = '0.1.0';
    }

    h2c() {
        this.httpAlternativeServer = this.httpServer;
        this.httpServer = http2.createServer(this.expressApp);
        // useResourceBasedDefaultTracker();

        return this;
    }

    override async init() {
        await this.walkForAssets();
        await super.init();
    }

    async walkForAssets() {
        const files = await FsWalk.walkOut(path.resolve(__dirname, '..', '..', 'public'));

        for (const file of files) {
            if (file.type !== 'file') {
                continue;
            }
            this.assets.set(file.relativePath.toString(), file);
        }
    }

    makeAssetsServingController() {
        return (req: Request, res: Response, next: NextFunction) => {
            const requestPath = req.url;
            const file = requestPath.slice(1);
            if (!file) {
                return next();
            }

            const asset = this.assets.get(file);
            if (asset?.type !== 'file') {
                return next();
            }
            res.type(mimeOfExt(path.extname(asset.path.toString())) || 'application/octet-stream');
            res.set('Content-Length', asset.stats.size.toString());
            fs.createReadStream(asset.path).pipe(res);

            return;
        };
    }

    override listen(port: number) {
        const r = super.listen(port);
        if (this.httpAlternativeServer) {
            const altPort = port + 1;
            this.httpAlternativeServer.listen(altPort, () => {
                this.logger.info(`Alternative ${this.httpAlternativeServer!.constructor.name} listening on port ${altPort}`);
            });
        }

        return r;
    }

    override registerRoutes(): void {

        const openAPIManager = new OpenAPIManager();
        openAPIManager.document('/{url}', ['get', 'post'], this.registry.conf.get('crawl')!);
        const openapiJsonPath = '/openapi.json';
        this.expressRootRouter.get(openapiJsonPath, (req, res) => {
            const baseURL = new URL(req.url, `${req.protocol}://${req.headers.host}`);
            baseURL.pathname = baseURL.pathname.replace(new RegExp(`${openapiJsonPath}$`, 'i'), '').replace(/\/+$/g, '');
            baseURL.search = '';
            const content = openAPIManager.createOpenAPIObject(baseURL.toString(), {
                info: {
                    title: this.registry.title,
                    description: `${this.registry.title} openAPI documentations`,
                    'x-logo': {
                        url: this.registry.logoUrl || `https://www.openapis.org/wp-content/uploads/sites/3/2018/02/OpenAPI_Logo_Pantone-1.png`
                    }
                }
            }, (this.registry.constructor as typeof AbstractRPCRegistry).envelope, req.query as any);
            res.statusCode = 200;
            res.end(JSON.stringify(content));
        });

        this.expressRootRouter.use('/', ...this.registry.expressMiddlewares, this.makeAssetsServingController(), this.registry.makeShimController('crawl'));
    }

    protected override featureSelect(): void {
        this.insertAsyncHookMiddleware();
        this.insertHealthCheckMiddleware(this.healthCheckEndpoint);
        this.insertLogRequestsMiddleware();
        this.registerOpenAPIDocsRoutes('/docs');

        this.registerRoutes();
    }
}
const instance = container.resolve(CrawlStandAloneServer);

export default instance;

instance.serviceReady().then((s) => s.listen(parseInt(process.env.PORT || '') || 3000));

================
File: backend/functions/src/stand-alone/search.ts
================
import 'reflect-metadata';
import { container, singleton } from 'tsyringe';
import { initializeApp, applicationDefault } from 'firebase-admin/app';

process.env['FIREBASE_CONFIG'] ??= JSON.stringify({
    projectId: process.env['GCLOUD_PROJECT'] || 'reader-6b7dc',
    storageBucket: `${process.env['GCLOUD_PROJECT'] || 'reader-6b7dc'}.appspot.com`,
    credential: applicationDefault(),
});

initializeApp();


import { Logger, CloudFunctionRegistry } from '../shared';
import { AbstractRPCRegistry, OpenAPIManager } from 'civkit/civ-rpc';
import { ExpressServer } from 'civkit/civ-rpc/express';
import http2 from 'http2';
import { SearcherHost } from '../cloud-functions/searcher';
import { FsWalk, WalkOutEntity } from 'civkit/fswalk';
import path from 'path';
import fs from 'fs';
import { mimeOfExt } from 'civkit/mime';
import { NextFunction, Request, Response } from 'express';

process.on('unhandledRejection', (err) => {
    console.error('Unhandled rejection', err);
});

process.on('uncaughtException', (err) => {
    console.log('Uncaught exception', err);

    // Looks like Firebase runtime does not handle error properly.
    // Make sure to quit the process.
    console.error('Uncaught exception, process quit.');
    process.nextTick(() => process.exit(1));
});

@singleton()
export class SearchStandAloneServer extends ExpressServer {
    logger = this.globalLogger.child({ service: this.constructor.name });

    httpAlternativeServer?: typeof this['httpServer'];
    assets = new Map<string, WalkOutEntity>();

    constructor(
        protected globalLogger: Logger,
        protected registry: CloudFunctionRegistry,
        protected searcherHost: SearcherHost,
    ) {
        super(...arguments);

        registry.allHandsOnDeck().catch(() => void 0);
        registry.title = 'reader';
        registry.version = '0.1.0';
    }

    h2c() {
        this.httpAlternativeServer = this.httpServer;
        this.httpServer = http2.createServer(this.expressApp);
        // useResourceBasedDefaultTracker();

        return this;
    }

    override async init() {
        await this.walkForAssets();
        await super.init();
    }

    async walkForAssets() {
        const files = await FsWalk.walkOut(path.resolve(__dirname, '..', '..', 'public'));

        for (const file of files) {
            if (file.type !== 'file') {
                continue;
            }
            this.assets.set(file.relativePath.toString(), file);
        }
    }

    makeAssetsServingController() {
        return (req: Request, res: Response, next: NextFunction) => {
            const requestPath = req.url;
            const file = requestPath.slice(1);
            if (!file) {
                return next();
            }

            const asset = this.assets.get(file);
            if (asset?.type !== 'file') {
                return next();
            }
            res.type(mimeOfExt(path.extname(asset.path.toString())) || 'application/octet-stream');
            res.set('Content-Length', asset.stats.size.toString());
            fs.createReadStream(asset.path).pipe(res);

            return;
        };
    }

    override listen(port: number) {
        const r = super.listen(port);
        if (this.httpAlternativeServer) {
            const altPort = port + 1;
            this.httpAlternativeServer.listen(altPort, () => {
                this.logger.info(`Alternative ${this.httpAlternativeServer!.constructor.name} listening on port ${altPort}`);
            });
        }

        return r;
    }

    override registerRoutes(): void {

        const openAPIManager = new OpenAPIManager();
        openAPIManager.document('/{q}', ['get', 'post'], this.registry.conf.get('search')!);
        const openapiJsonPath = '/openapi.json';
        this.expressRootRouter.get(openapiJsonPath, (req, res) => {
            const baseURL = new URL(req.url, `${req.protocol}://${req.headers.host}`);
            baseURL.pathname = baseURL.pathname.replace(new RegExp(`${openapiJsonPath}$`, 'i'), '').replace(/\/+$/g, '');
            baseURL.search = '';
            const content = openAPIManager.createOpenAPIObject(baseURL.toString(), {
                info: {
                    title: this.registry.title,
                    description: `${this.registry.title} openAPI documentations`,
                    'x-logo': {
                        url: this.registry.logoUrl || `https://www.openapis.org/wp-content/uploads/sites/3/2018/02/OpenAPI_Logo_Pantone-1.png`
                    }
                }
            }, (this.registry.constructor as typeof AbstractRPCRegistry).envelope, req.query as any);
            res.statusCode = 200;
            res.end(JSON.stringify(content));
        });

        this.expressRootRouter.use('/', ...this.registry.expressMiddlewares, this.makeAssetsServingController(), this.registry.makeShimController('search'));
    }

    protected override featureSelect(): void {
        this.insertAsyncHookMiddleware();
        this.insertHealthCheckMiddleware(this.healthCheckEndpoint);
        this.insertLogRequestsMiddleware();
        this.registerOpenAPIDocsRoutes('/docs');

        this.registerRoutes();
    }
}
const instance = container.resolve(SearchStandAloneServer);

export default instance;

instance.serviceReady().then((s) => s.listen(parseInt(process.env.PORT || '') || 3000));

================
File: backend/functions/src/utils/get-function-url.ts
================
import { GoogleAuth } from 'google-auth-library';

/**
 * Get the URL of a given v2 cloud function.
 *
 * @param {string} name the function's name
 * @param {string} location the function's location
 * @return {Promise<string>} The URL of the function
 */
export async function getFunctionUrl(name: string, location = "us-central1") {
    const projectId = `reader-6b7dc`;
    const url = "https://cloudfunctions.googleapis.com/v2beta/" +
        `projects/${projectId}/locations/${location}/functions/${name}`;
    const auth = new GoogleAuth({
        scopes: 'https://www.googleapis.com/auth/cloud-platform',
    });
    const client = await auth.getClient();
    const res = await client.request<any>({ url });
    const uri = res.data?.serviceConfig?.uri;
    if (!uri) {
        throw new Error(`Unable to retreive uri for function at ${url}`);
    }
    return uri;
}

================
File: backend/functions/src/utils/markdown.ts
================
export function tidyMarkdown(markdown: string): string {

    // Step 1: Handle complex broken links with text and optional images spread across multiple lines
    let normalizedMarkdown = markdown.replace(/\[\s*([^\]\n]+?)\s*\]\s*\(\s*([^)]+)\s*\)/g, (match, text, url) => {
        // Remove internal new lines and excessive spaces within the text
        text = text.replace(/\s+/g, ' ').trim();
        url = url.replace(/\s+/g, '').trim();
        return `[${text}](${url})`;
    });

    normalizedMarkdown = normalizedMarkdown.replace(/\[\s*([^\]\n!]*?)\s*\n*(?:!\[([^\]]*)\]\((.*?)\))?\s*\n*\]\s*\(\s*([^)]+)\s*\)/g, (match, text, alt, imgUrl, linkUrl) => {
        // Normalize by removing excessive spaces and new lines
        text = text.replace(/\s+/g, ' ').trim();
        alt = alt ? alt.replace(/\s+/g, ' ').trim() : '';
        imgUrl = imgUrl ? imgUrl.replace(/\s+/g, '').trim() : '';
        linkUrl = linkUrl.replace(/\s+/g, '').trim();
        if (imgUrl) {
            return `[${text} ![${alt}](${imgUrl})](${linkUrl})`;
        } else {
            return `[${text}](${linkUrl})`;
        }
    });

    // Step 2: Normalize regular links that may be broken across lines
    normalizedMarkdown = normalizedMarkdown.replace(/\[\s*([^\]]+)\]\s*\(\s*([^)]+)\)/g, (match, text, url) => {
        text = text.replace(/\s+/g, ' ').trim();
        url = url.replace(/\s+/g, '').trim();
        return `[${text}](${url})`;
    });

    // Step 3: Replace more than two consecutive empty lines with exactly two empty lines
    normalizedMarkdown = normalizedMarkdown.replace(/\n{3,}/g, '\n\n');

    // Step 4: Remove leading spaces from each line
    normalizedMarkdown = normalizedMarkdown.replace(/^[ \t]+/gm, '');

    return normalizedMarkdown.trim();
}

================
File: backend/functions/src/utils/misc.ts
================
export function cleanAttribute(attribute: string | null) {
    return attribute ? attribute.replace(/(\n+\s*)+/g, '\n') : '';
}

================
File: backend/functions/src/utils/tailwind-classes.ts
================
export const tailwindClasses = new Set([
    "aspect-auto",
    "aspect-square",
    "aspect-video",
    "container",
    "columns-1",
    "columns-2",
    "columns-3",
    "columns-4",
    "columns-5",
    "columns-6",
    "columns-7",
    "columns-8",
    "columns-9",
    "columns-10",
    "columns-11",
    "columns-12",
    "columns-auto",
    "columns-3xs",
    "columns-2xs",
    "columns-xs",
    "columns-sm",
    "columns-md",
    "columns-lg",
    "columns-xl",
    "columns-2xl",
    "columns-3xl",
    "columns-4xl",
    "columns-5xl",
    "columns-6xl",
    "columns-7xl",
    "break-after-auto",
    "break-after-avoid",
    "break-after-all",
    "break-after-avoid-page",
    "break-after-page",
    "break-after-left",
    "break-after-right",
    "break-after-column",
    "break-before-auto",
    "break-before-avoid",
    "break-before-all",
    "break-before-avoid-page",
    "break-before-page",
    "break-before-left",
    "break-before-right",
    "break-before-column",
    "break-inside-auto",
    "break-inside-avoid",
    "break-inside-avoid-page",
    "break-inside-avoid-column",
    "box-decoration-clone",
    "box-decoration-slice",
    "box-border",
    "box-content",
    "block",
    "inline-block",
    "inline",
    "flex",
    "inline-flex",
    "table",
    "inline-table",
    "table-caption",
    "table-cell",
    "table-column",
    "table-column-group",
    "table-footer-group",
    "table-header-group",
    "table-row-group",
    "table-row",
    "flow-root",
    "grid",
    "inline-grid",
    "contents",
    "list-item",
    // "hidden",
    "float-start",
    "float-end",
    "float-right",
    "float-left",
    "float-none",
    "clear-start",
    "clear-end",
    "clear-left",
    "clear-right",
    "clear-both",
    "clear-none",
    "isolate",
    "isolation-auto",
    "object-contain",
    "object-cover",
    "object-fill",
    "object-none",
    "object-scale-down",
    "object-bottom",
    "object-center",
    "object-left",
    "object-left-bottom",
    "object-left-top",
    "object-right",
    "object-right-bottom",
    "object-right-top",
    "object-top",
    "overflow-auto",
    "overflow-hidden",
    "overflow-clip",
    "overflow-visible",
    "overflow-scroll",
    "overflow-x-auto",
    "overflow-y-auto",
    "overflow-x-hidden",
    "overflow-y-hidden",
    "overflow-x-clip",
    "overflow-y-clip",
    "overflow-x-visible",
    "overflow-y-visible",
    "overflow-x-scroll",
    "overflow-y-scroll",
    "overscroll-auto",
    "overscroll-contain",
    "overscroll-none",
    "overscroll-y-auto",
    "overscroll-y-contain",
    "overscroll-y-none",
    "overscroll-x-auto",
    "overscroll-x-contain",
    "overscroll-x-none",
    "static",
    "fixed",
    "absolute",
    "relative",
    "sticky",
    "inset-0",
    "inset-x-0",
    "inset-y-0",
    "start-0",
    "end-0",
    "top-0",
    "right-0",
    "bottom-0",
    "left-0",
    "inset-px",
    "inset-x-px",
    "inset-y-px",
    "start-px",
    "end-px",
    "top-px",
    "right-px",
    "bottom-px",
    "left-px",
    "inset-0.5",
    "inset-x-0.5",
    "inset-y-0.5",
    "start-0.5",
    "end-0.5",
    "top-0.5",
    "right-0.5",
    "bottom-0.5",
    "left-0.5",
    "inset-1",
    "inset-x-1",
    "inset-y-1",
    "start-1",
    "end-1",
    "top-1",
    "right-1",
    "bottom-1",
    "left-1",
    "inset-1.5",
    "inset-x-1.5",
    "inset-y-1.5",
    "start-1.5",
    "end-1.5",
    "top-1.5",
    "right-1.5",
    "bottom-1.5",
    "left-1.5",
    "inset-2",
    "inset-x-2",
    "inset-y-2",
    "start-2",
    "end-2",
    "top-2",
    "right-2",
    "bottom-2",
    "left-2",
    "inset-2.5",
    "inset-x-2.5",
    "inset-y-2.5",
    "start-2.5",
    "end-2.5",
    "top-2.5",
    "right-2.5",
    "bottom-2.5",
    "left-2.5",
    "inset-3",
    "inset-x-3",
    "inset-y-3",
    "start-3",
    "end-3",
    "top-3",
    "right-3",
    "bottom-3",
    "left-3",
    "inset-3.5",
    "inset-x-3.5",
    "inset-y-3.5",
    "start-3.5",
    "end-3.5",
    "top-3.5",
    "right-3.5",
    "bottom-3.5",
    "left-3.5",
    "inset-4",
    "inset-x-4",
    "inset-y-4",
    "start-4",
    "end-4",
    "top-4",
    "right-4",
    "bottom-4",
    "left-4",
    "inset-5",
    "inset-x-5",
    "inset-y-5",
    "start-5",
    "end-5",
    "top-5",
    "right-5",
    "bottom-5",
    "left-5",
    "inset-6",
    "inset-x-6",
    "inset-y-6",
    "start-6",
    "end-6",
    "top-6",
    "right-6",
    "bottom-6",
    "left-6",
    "inset-7",
    "inset-x-7",
    "inset-y-7",
    "start-7",
    "end-7",
    "top-7",
    "right-7",
    "bottom-7",
    "left-7",
    "inset-8",
    "inset-x-8",
    "inset-y-8",
    "start-8",
    "end-8",
    "top-8",
    "right-8",
    "bottom-8",
    "left-8",
    "inset-9",
    "inset-x-9",
    "inset-y-9",
    "start-9",
    "end-9",
    "top-9",
    "right-9",
    "bottom-9",
    "left-9",
    "inset-10",
    "inset-x-10",
    "inset-y-10",
    "start-10",
    "end-10",
    "top-10",
    "right-10",
    "bottom-10",
    "left-10",
    "inset-11",
    "inset-x-11",
    "inset-y-11",
    "start-11",
    "end-11",
    "top-11",
    "right-11",
    "bottom-11",
    "left-11",
    "inset-12",
    "inset-x-12",
    "inset-y-12",
    "start-12",
    "end-12",
    "top-12",
    "right-12",
    "bottom-12",
    "left-12",
    "inset-14",
    "inset-x-14",
    "inset-y-14",
    "start-14",
    "end-14",
    "top-14",
    "right-14",
    "bottom-14",
    "left-14",
    "inset-16",
    "inset-x-16",
    "inset-y-16",
    "start-16",
    "end-16",
    "top-16",
    "right-16",
    "bottom-16",
    "left-16",
    "inset-20",
    "inset-x-20",
    "inset-y-20",
    "start-20",
    "end-20",
    "top-20",
    "right-20",
    "bottom-20",
    "left-20",
    "inset-24",
    "inset-x-24",
    "inset-y-24",
    "start-24",
    "end-24",
    "top-24",
    "right-24",
    "bottom-24",
    "left-24",
    "inset-28",
    "inset-x-28",
    "inset-y-28",
    "start-28",
    "end-28",
    "top-28",
    "right-28",
    "bottom-28",
    "left-28",
    "inset-32",
    "inset-x-32",
    "inset-y-32",
    "start-32",
    "end-32",
    "top-32",
    "right-32",
    "bottom-32",
    "left-32",
    "inset-36",
    "inset-x-36",
    "inset-y-36",
    "start-36",
    "end-36",
    "top-36",
    "right-36",
    "bottom-36",
    "left-36",
    "inset-40",
    "inset-x-40",
    "inset-y-40",
    "start-40",
    "end-40",
    "top-40",
    "right-40",
    "bottom-40",
    "left-40",
    "inset-44",
    "inset-x-44",
    "inset-y-44",
    "start-44",
    "end-44",
    "top-44",
    "right-44",
    "bottom-44",
    "left-44",
    "inset-48",
    "inset-x-48",
    "inset-y-48",
    "start-48",
    "end-48",
    "top-48",
    "right-48",
    "bottom-48",
    "left-48",
    "inset-52",
    "inset-x-52",
    "inset-y-52",
    "start-52",
    "end-52",
    "top-52",
    "right-52",
    "bottom-52",
    "left-52",
    "inset-56",
    "inset-x-56",
    "inset-y-56",
    "start-56",
    "end-56",
    "top-56",
    "right-56",
    "bottom-56",
    "left-56",
    "inset-60",
    "inset-x-60",
    "inset-y-60",
    "start-60",
    "end-60",
    "top-60",
    "right-60",
    "bottom-60",
    "left-60",
    "inset-64",
    "inset-x-64",
    "inset-y-64",
    "start-64",
    "end-64",
    "top-64",
    "right-64",
    "bottom-64",
    "left-64",
    "inset-72",
    "inset-x-72",
    "inset-y-72",
    "start-72",
    "end-72",
    "top-72",
    "right-72",
    "bottom-72",
    "left-72",
    "inset-80",
    "inset-x-80",
    "inset-y-80",
    "start-80",
    "end-80",
    "top-80",
    "right-80",
    "bottom-80",
    "left-80",
    "inset-96",
    "inset-x-96",
    "inset-y-96",
    "start-96",
    "end-96",
    "top-96",
    "right-96",
    "bottom-96",
    "left-96",
    "inset-auto",
    "inset-1/2",
    "inset-1/3",
    "inset-2/3",
    "inset-1/4",
    "inset-2/4",
    "inset-3/4",
    "inset-full",
    "inset-x-auto",
    "inset-x-1/2",
    "inset-x-1/3",
    "inset-x-2/3",
    "inset-x-1/4",
    "inset-x-2/4",
    "inset-x-3/4",
    "inset-x-full",
    "inset-y-auto",
    "inset-y-1/2",
    "inset-y-1/3",
    "inset-y-2/3",
    "inset-y-1/4",
    "inset-y-2/4",
    "inset-y-3/4",
    "inset-y-full",
    "start-auto",
    "start-1/2",
    "start-1/3",
    "start-2/3",
    "start-1/4",
    "start-2/4",
    "start-3/4",
    "start-full",
    "end-auto",
    "end-1/2",
    "end-1/3",
    "end-2/3",
    "end-1/4",
    "end-2/4",
    "end-3/4",
    "end-full",
    "top-auto",
    "top-1/2",
    "top-1/3",
    "top-2/3",
    "top-1/4",
    "top-2/4",
    "top-3/4",
    "top-full",
    "right-auto",
    "right-1/2",
    "right-1/3",
    "right-2/3",
    "right-1/4",
    "right-2/4",
    "right-3/4",
    "right-full",
    "bottom-auto",
    "bottom-1/2",
    "bottom-1/3",
    "bottom-2/3",
    "bottom-1/4",
    "bottom-2/4",
    "bottom-3/4",
    "bottom-full",
    "left-auto",
    "left-1/2",
    "left-1/3",
    "left-2/3",
    "left-1/4",
    "left-2/4",
    "left-3/4",
    "left-full",
    "visible",
    "invisible",
    "collapse",
    "z-0",
    "z-10",
    "z-20",
    "z-30",
    "z-40",
    "z-50",
    "z-auto",
    "basis-0",
    "basis-1",
    "basis-2",
    "basis-3",
    "basis-4",
    "basis-5",
    "basis-6",
    "basis-7",
    "basis-8",
    "basis-9",
    "basis-10",
    "basis-11",
    "basis-12",
    "basis-14",
    "basis-16",
    "basis-20",
    "basis-24",
    "basis-28",
    "basis-32",
    "basis-36",
    "basis-40",
    "basis-44",
    "basis-48",
    "basis-52",
    "basis-56",
    "basis-60",
    "basis-64",
    "basis-72",
    "basis-80",
    "basis-96",
    "basis-auto",
    "basis-px",
    "basis-0.5",
    "basis-1.5",
    "basis-2.5",
    "basis-3.5",
    "basis-1/2",
    "basis-1/3",
    "basis-2/3",
    "basis-1/4",
    "basis-2/4",
    "basis-3/4",
    "basis-1/5",
    "basis-2/5",
    "basis-3/5",
    "basis-4/5",
    "basis-1/6",
    "basis-2/6",
    "basis-3/6",
    "basis-4/6",
    "basis-5/6",
    "basis-1/12",
    "basis-2/12",
    "basis-3/12",
    "basis-4/12",
    "basis-5/12",
    "basis-6/12",
    "basis-7/12",
    "basis-8/12",
    "basis-9/12",
    "basis-10/12",
    "basis-11/12",
    "basis-full",
    "flex-row",
    "flex-row-reverse",
    "flex-col",
    "flex-col-reverse",
    "flex-wrap",
    "flex-wrap-reverse",
    "flex-nowrap",
    "flex-1",
    "flex-auto",
    "flex-initial",
    "flex-none",
    "grow",
    "grow-0",
    "shrink",
    "shrink-0",
    "order-1",
    "order-2",
    "order-3",
    "order-4",
    "order-5",
    "order-6",
    "order-7",
    "order-8",
    "order-9",
    "order-10",
    "order-11",
    "order-12",
    "order-first",
    "order-last",
    "order-none",
    "grid-cols-1",
    "grid-cols-2",
    "grid-cols-3",
    "grid-cols-4",
    "grid-cols-5",
    "grid-cols-6",
    "grid-cols-7",
    "grid-cols-8",
    "grid-cols-9",
    "grid-cols-10",
    "grid-cols-11",
    "grid-cols-12",
    "grid-cols-none",
    "grid-cols-subgrid",
    "col-auto",
    "col-span-1",
    "col-span-2",
    "col-span-3",
    "col-span-4",
    "col-span-5",
    "col-span-6",
    "col-span-7",
    "col-span-8",
    "col-span-9",
    "col-span-10",
    "col-span-11",
    "col-span-12",
    "col-span-full",
    "col-start-1",
    "col-start-2",
    "col-start-3",
    "col-start-4",
    "col-start-5",
    "col-start-6",
    "col-start-7",
    "col-start-8",
    "col-start-9",
    "col-start-10",
    "col-start-11",
    "col-start-12",
    "col-start-13",
    "col-start-auto",
    "col-end-1",
    "col-end-2",
    "col-end-3",
    "col-end-4",
    "col-end-5",
    "col-end-6",
    "col-end-7",
    "col-end-8",
    "col-end-9",
    "col-end-10",
    "col-end-11",
    "col-end-12",
    "col-end-13",
    "col-end-auto",
    "grid-rows-1",
    "grid-rows-2",
    "grid-rows-3",
    "grid-rows-4",
    "grid-rows-5",
    "grid-rows-6",
    "grid-rows-7",
    "grid-rows-8",
    "grid-rows-9",
    "grid-rows-10",
    "grid-rows-11",
    "grid-rows-12",
    "grid-rows-none",
    "grid-rows-subgrid",
    "row-auto",
    "row-span-1",
    "row-span-2",
    "row-span-3",
    "row-span-4",
    "row-span-5",
    "row-span-6",
    "row-span-7",
    "row-span-8",
    "row-span-9",
    "row-span-10",
    "row-span-11",
    "row-span-12",
    "row-span-full",
    "row-start-1",
    "row-start-2",
    "row-start-3",
    "row-start-4",
    "row-start-5",
    "row-start-6",
    "row-start-7",
    "row-start-8",
    "row-start-9",
    "row-start-10",
    "row-start-11",
    "row-start-12",
    "row-start-13",
    "row-start-auto",
    "row-end-1",
    "row-end-2",
    "row-end-3",
    "row-end-4",
    "row-end-5",
    "row-end-6",
    "row-end-7",
    "row-end-8",
    "row-end-9",
    "row-end-10",
    "row-end-11",
    "row-end-12",
    "row-end-13",
    "row-end-auto",
    "grid-flow-row",
    "grid-flow-col",
    "grid-flow-dense",
    "grid-flow-row-dense",
    "grid-flow-col-dense",
    "auto-cols-auto",
    "auto-cols-min",
    "auto-cols-max",
    "auto-cols-fr",
    "auto-rows-auto",
    "auto-rows-min",
    "auto-rows-max",
    "auto-rows-fr",
    "gap-0",
    "gap-x-0",
    "gap-y-0",
    "gap-px",
    "gap-x-px",
    "gap-y-px",
    "gap-0.5",
    "gap-x-0.5",
    "gap-y-0.5",
    "gap-1",
    "gap-x-1",
    "gap-y-1",
    "gap-1.5",
    "gap-x-1.5",
    "gap-y-1.5",
    "gap-2",
    "gap-x-2",
    "gap-y-2",
    "gap-2.5",
    "gap-x-2.5",
    "gap-y-2.5",
    "gap-3",
    "gap-x-3",
    "gap-y-3",
    "gap-3.5",
    "gap-x-3.5",
    "gap-y-3.5",
    "gap-4",
    "gap-x-4",
    "gap-y-4",
    "gap-5",
    "gap-x-5",
    "gap-y-5",
    "gap-6",
    "gap-x-6",
    "gap-y-6",
    "gap-7",
    "gap-x-7",
    "gap-y-7",
    "gap-8",
    "gap-x-8",
    "gap-y-8",
    "gap-9",
    "gap-x-9",
    "gap-y-9",
    "gap-10",
    "gap-x-10",
    "gap-y-10",
    "gap-11",
    "gap-x-11",
    "gap-y-11",
    "gap-12",
    "gap-x-12",
    "gap-y-12",
    "gap-14",
    "gap-x-14",
    "gap-y-14",
    "gap-16",
    "gap-x-16",
    "gap-y-16",
    "gap-20",
    "gap-x-20",
    "gap-y-20",
    "gap-24",
    "gap-x-24",
    "gap-y-24",
    "gap-28",
    "gap-x-28",
    "gap-y-28",
    "gap-32",
    "gap-x-32",
    "gap-y-32",
    "gap-36",
    "gap-x-36",
    "gap-y-36",
    "gap-40",
    "gap-x-40",
    "gap-y-40",
    "gap-44",
    "gap-x-44",
    "gap-y-44",
    "gap-48",
    "gap-x-48",
    "gap-y-48",
    "gap-52",
    "gap-x-52",
    "gap-y-52",
    "gap-56",
    "gap-x-56",
    "gap-y-56",
    "gap-60",
    "gap-x-60",
    "gap-y-60",
    "gap-64",
    "gap-x-64",
    "gap-y-64",
    "gap-72",
    "gap-x-72",
    "gap-y-72",
    "gap-80",
    "gap-x-80",
    "gap-y-80",
    "gap-96",
    "gap-x-96",
    "gap-y-96",
    "justify-normal",
    "justify-start",
    "justify-end",
    "justify-center",
    "justify-between",
    "justify-around",
    "justify-evenly",
    "justify-stretch",
    "justify-items-start",
    "justify-items-end",
    "justify-items-center",
    "justify-items-stretch",
    "justify-self-auto",
    "justify-self-start",
    "justify-self-end",
    "justify-self-center",
    "justify-self-stretch",
    "content-normal",
    "content-center",
    "content-start",
    "content-end",
    "content-between",
    "content-around",
    "content-evenly",
    "content-baseline",
    "content-stretch",
    "items-start",
    "items-end",
    "items-center",
    "items-baseline",
    "items-stretch",
    "self-auto",
    "self-start",
    "self-end",
    "self-center",
    "self-stretch",
    "self-baseline",
    "place-content-center",
    "place-content-start",
    "place-content-end",
    "place-content-between",
    "place-content-around",
    "place-content-evenly",
    "place-content-baseline",
    "place-content-stretch",
    "place-items-start",
    "place-items-end",
    "place-items-center",
    "place-items-baseline",
    "place-items-stretch",
    "place-self-auto",
    "place-self-start",
    "place-self-end",
    "place-self-center",
    "place-self-stretch",
    "p-0",
    "px-0",
    "py-0",
    "ps-0",
    "pe-0",
    "pt-0",
    "pr-0",
    "pb-0",
    "pl-0",
    "p-px",
    "px-px",
    "py-px",
    "ps-px",
    "pe-px",
    "pt-px",
    "pr-px",
    "pb-px",
    "pl-px",
    "p-0.5",
    "px-0.5",
    "py-0.5",
    "ps-0.5",
    "pe-0.5",
    "pt-0.5",
    "pr-0.5",
    "pb-0.5",
    "pl-0.5",
    "p-1",
    "px-1",
    "py-1",
    "ps-1",
    "pe-1",
    "pt-1",
    "pr-1",
    "pb-1",
    "pl-1",
    "p-1.5",
    "px-1.5",
    "py-1.5",
    "ps-1.5",
    "pe-1.5",
    "pt-1.5",
    "pr-1.5",
    "pb-1.5",
    "pl-1.5",
    "p-2",
    "px-2",
    "py-2",
    "ps-2",
    "pe-2",
    "pt-2",
    "pr-2",
    "pb-2",
    "pl-2",
    "p-2.5",
    "px-2.5",
    "py-2.5",
    "ps-2.5",
    "pe-2.5",
    "pt-2.5",
    "pr-2.5",
    "pb-2.5",
    "pl-2.5",
    "p-3",
    "px-3",
    "py-3",
    "ps-3",
    "pe-3",
    "pt-3",
    "pr-3",
    "pb-3",
    "pl-3",
    "p-3.5",
    "px-3.5",
    "py-3.5",
    "ps-3.5",
    "pe-3.5",
    "pt-3.5",
    "pr-3.5",
    "pb-3.5",
    "pl-3.5",
    "p-4",
    "px-4",
    "py-4",
    "ps-4",
    "pe-4",
    "pt-4",
    "pr-4",
    "pb-4",
    "pl-4",
    "p-5",
    "px-5",
    "py-5",
    "ps-5",
    "pe-5",
    "pt-5",
    "pr-5",
    "pb-5",
    "pl-5",
    "p-6",
    "px-6",
    "py-6",
    "ps-6",
    "pe-6",
    "pt-6",
    "pr-6",
    "pb-6",
    "pl-6",
    "p-7",
    "px-7",
    "py-7",
    "ps-7",
    "pe-7",
    "pt-7",
    "pr-7",
    "pb-7",
    "pl-7",
    "p-8",
    "px-8",
    "py-8",
    "ps-8",
    "pe-8",
    "pt-8",
    "pr-8",
    "pb-8",
    "pl-8",
    "p-9",
    "px-9",
    "py-9",
    "ps-9",
    "pe-9",
    "pt-9",
    "pr-9",
    "pb-9",
    "pl-9",
    "p-10",
    "px-10",
    "py-10",
    "ps-10",
    "pe-10",
    "pt-10",
    "pr-10",
    "pb-10",
    "pl-10",
    "p-11",
    "px-11",
    "py-11",
    "ps-11",
    "pe-11",
    "pt-11",
    "pr-11",
    "pb-11",
    "pl-11",
    "p-12",
    "px-12",
    "py-12",
    "ps-12",
    "pe-12",
    "pt-12",
    "pr-12",
    "pb-12",
    "pl-12",
    "p-14",
    "px-14",
    "py-14",
    "ps-14",
    "pe-14",
    "pt-14",
    "pr-14",
    "pb-14",
    "pl-14",
    "p-16",
    "px-16",
    "py-16",
    "ps-16",
    "pe-16",
    "pt-16",
    "pr-16",
    "pb-16",
    "pl-16",
    "p-20",
    "px-20",
    "py-20",
    "ps-20",
    "pe-20",
    "pt-20",
    "pr-20",
    "pb-20",
    "pl-20",
    "p-24",
    "px-24",
    "py-24",
    "ps-24",
    "pe-24",
    "pt-24",
    "pr-24",
    "pb-24",
    "pl-24",
    "p-28",
    "px-28",
    "py-28",
    "ps-28",
    "pe-28",
    "pt-28",
    "pr-28",
    "pb-28",
    "pl-28",
    "p-32",
    "px-32",
    "py-32",
    "ps-32",
    "pe-32",
    "pt-32",
    "pr-32",
    "pb-32",
    "pl-32",
    "p-36",
    "px-36",
    "py-36",
    "ps-36",
    "pe-36",
    "pt-36",
    "pr-36",
    "pb-36",
    "pl-36",
    "p-40",
    "px-40",
    "py-40",
    "ps-40",
    "pe-40",
    "pt-40",
    "pr-40",
    "pb-40",
    "pl-40",
    "p-44",
    "px-44",
    "py-44",
    "ps-44",
    "pe-44",
    "pt-44",
    "pr-44",
    "pb-44",
    "pl-44",
    "p-48",
    "px-48",
    "py-48",
    "ps-48",
    "pe-48",
    "pt-48",
    "pr-48",
    "pb-48",
    "pl-48",
    "p-52",
    "px-52",
    "py-52",
    "ps-52",
    "pe-52",
    "pt-52",
    "pr-52",
    "pb-52",
    "pl-52",
    "p-56",
    "px-56",
    "py-56",
    "ps-56",
    "pe-56",
    "pt-56",
    "pr-56",
    "pb-56",
    "pl-56",
    "p-60",
    "px-60",
    "py-60",
    "ps-60",
    "pe-60",
    "pt-60",
    "pr-60",
    "pb-60",
    "pl-60",
    "p-64",
    "px-64",
    "py-64",
    "ps-64",
    "pe-64",
    "pt-64",
    "pr-64",
    "pb-64",
    "pl-64",
    "p-72",
    "px-72",
    "py-72",
    "ps-72",
    "pe-72",
    "pt-72",
    "pr-72",
    "pb-72",
    "pl-72",
    "p-80",
    "px-80",
    "py-80",
    "ps-80",
    "pe-80",
    "pt-80",
    "pr-80",
    "pb-80",
    "pl-80",
    "p-96",
    "px-96",
    "py-96",
    "ps-96",
    "pe-96",
    "pt-96",
    "pr-96",
    "pb-96",
    "pl-96",
    "m-0",
    "mx-0",
    "my-0",
    "ms-0",
    "me-0",
    "mt-0",
    "mr-0",
    "mb-0",
    "ml-0",
    "m-px",
    "mx-px",
    "my-px",
    "ms-px",
    "me-px",
    "mt-px",
    "mr-px",
    "mb-px",
    "ml-px",
    "m-0.5",
    "mx-0.5",
    "my-0.5",
    "ms-0.5",
    "me-0.5",
    "mt-0.5",
    "mr-0.5",
    "mb-0.5",
    "ml-0.5",
    "m-1",
    "mx-1",
    "my-1",
    "ms-1",
    "me-1",
    "mt-1",
    "mr-1",
    "mb-1",
    "ml-1",
    "m-1.5",
    "mx-1.5",
    "my-1.5",
    "ms-1.5",
    "me-1.5",
    "mt-1.5",
    "mr-1.5",
    "mb-1.5",
    "ml-1.5",
    "m-2",
    "mx-2",
    "my-2",
    "ms-2",
    "me-2",
    "mt-2",
    "mr-2",
    "mb-2",
    "ml-2",
    "m-2.5",
    "mx-2.5",
    "my-2.5",
    "ms-2.5",
    "me-2.5",
    "mt-2.5",
    "mr-2.5",
    "mb-2.5",
    "ml-2.5",
    "m-3",
    "mx-3",
    "my-3",
    "ms-3",
    "me-3",
    "mt-3",
    "mr-3",
    "mb-3",
    "ml-3",
    "m-3.5",
    "mx-3.5",
    "my-3.5",
    "ms-3.5",
    "me-3.5",
    "mt-3.5",
    "mr-3.5",
    "mb-3.5",
    "ml-3.5",
    "m-4",
    "mx-4",
    "my-4",
    "ms-4",
    "me-4",
    "mt-4",
    "mr-4",
    "mb-4",
    "ml-4",
    "m-5",
    "mx-5",
    "my-5",
    "ms-5",
    "me-5",
    "mt-5",
    "mr-5",
    "mb-5",
    "ml-5",
    "m-6",
    "mx-6",
    "my-6",
    "ms-6",
    "me-6",
    "mt-6",
    "mr-6",
    "mb-6",
    "ml-6",
    "m-7",
    "mx-7",
    "my-7",
    "ms-7",
    "me-7",
    "mt-7",
    "mr-7",
    "mb-7",
    "ml-7",
    "m-8",
    "mx-8",
    "my-8",
    "ms-8",
    "me-8",
    "mt-8",
    "mr-8",
    "mb-8",
    "ml-8",
    "m-9",
    "mx-9",
    "my-9",
    "ms-9",
    "me-9",
    "mt-9",
    "mr-9",
    "mb-9",
    "ml-9",
    "m-10",
    "mx-10",
    "my-10",
    "ms-10",
    "me-10",
    "mt-10",
    "mr-10",
    "mb-10",
    "ml-10",
    "m-11",
    "mx-11",
    "my-11",
    "ms-11",
    "me-11",
    "mt-11",
    "mr-11",
    "mb-11",
    "ml-11",
    "m-12",
    "mx-12",
    "my-12",
    "ms-12",
    "me-12",
    "mt-12",
    "mr-12",
    "mb-12",
    "ml-12",
    "m-14",
    "mx-14",
    "my-14",
    "ms-14",
    "me-14",
    "mt-14",
    "mr-14",
    "mb-14",
    "ml-14",
    "m-16",
    "mx-16",
    "my-16",
    "ms-16",
    "me-16",
    "mt-16",
    "mr-16",
    "mb-16",
    "ml-16",
    "m-20",
    "mx-20",
    "my-20",
    "ms-20",
    "me-20",
    "mt-20",
    "mr-20",
    "mb-20",
    "ml-20",
    "m-24",
    "mx-24",
    "my-24",
    "ms-24",
    "me-24",
    "mt-24",
    "mr-24",
    "mb-24",
    "ml-24",
    "m-28",
    "mx-28",
    "my-28",
    "ms-28",
    "me-28",
    "mt-28",
    "mr-28",
    "mb-28",
    "ml-28",
    "m-32",
    "mx-32",
    "my-32",
    "ms-32",
    "me-32",
    "mt-32",
    "mr-32",
    "mb-32",
    "ml-32",
    "m-36",
    "mx-36",
    "my-36",
    "ms-36",
    "me-36",
    "mt-36",
    "mr-36",
    "mb-36",
    "ml-36",
    "m-40",
    "mx-40",
    "my-40",
    "ms-40",
    "me-40",
    "mt-40",
    "mr-40",
    "mb-40",
    "ml-40",
    "m-44",
    "mx-44",
    "my-44",
    "ms-44",
    "me-44",
    "mt-44",
    "mr-44",
    "mb-44",
    "ml-44",
    "m-48",
    "mx-48",
    "my-48",
    "ms-48",
    "me-48",
    "mt-48",
    "mr-48",
    "mb-48",
    "ml-48",
    "m-52",
    "mx-52",
    "my-52",
    "ms-52",
    "me-52",
    "mt-52",
    "mr-52",
    "mb-52",
    "ml-52",
    "m-56",
    "mx-56",
    "my-56",
    "ms-56",
    "me-56",
    "mt-56",
    "mr-56",
    "mb-56",
    "ml-56",
    "m-60",
    "mx-60",
    "my-60",
    "ms-60",
    "me-60",
    "mt-60",
    "mr-60",
    "mb-60",
    "ml-60",
    "m-64",
    "mx-64",
    "my-64",
    "ms-64",
    "me-64",
    "mt-64",
    "mr-64",
    "mb-64",
    "ml-64",
    "m-72",
    "mx-72",
    "my-72",
    "ms-72",
    "me-72",
    "mt-72",
    "mr-72",
    "mb-72",
    "ml-72",
    "m-80",
    "mx-80",
    "my-80",
    "ms-80",
    "me-80",
    "mt-80",
    "mr-80",
    "mb-80",
    "ml-80",
    "m-96",
    "mx-96",
    "my-96",
    "ms-96",
    "me-96",
    "mt-96",
    "mr-96",
    "mb-96",
    "ml-96",
    "m-auto",
    "mx-auto",
    "my-auto",
    "ms-auto",
    "me-auto",
    "mt-auto",
    "mr-auto",
    "mb-auto",
    "ml-auto",
    "space-x-0",
    "space-y-0",
    "space-x-0.5",
    "space-y-0.5",
    "space-x-1",
    "space-y-1",
    "space-x-1.5",
    "space-y-1.5",
    "space-x-2",
    "space-y-2",
    "space-x-2.5",
    "space-y-2.5",
    "space-x-3",
    "space-y-3",
    "space-x-3.5",
    "space-y-3.5",
    "space-x-4",
    "space-y-4",
    "space-x-5",
    "space-y-5",
    "space-x-6",
    "space-y-6",
    "space-x-7",
    "space-y-7",
    "space-x-8",
    "space-y-8",
    "space-x-9",
    "space-y-9",
    "space-x-10",
    "space-y-10",
    "space-x-11",
    "space-y-11",
    "space-x-12",
    "space-y-12",
    "space-x-14",
    "space-y-14",
    "space-x-16",
    "space-y-16",
    "space-x-20",
    "space-y-20",
    "space-x-24",
    "space-y-24",
    "space-x-28",
    "space-y-28",
    "space-x-32",
    "space-y-32",
    "space-x-36",
    "space-y-36",
    "space-x-40",
    "space-y-40",
    "space-x-44",
    "space-y-44",
    "space-x-48",
    "space-y-48",
    "space-x-52",
    "space-y-52",
    "space-x-56",
    "space-y-56",
    "space-x-60",
    "space-y-60",
    "space-x-64",
    "space-y-64",
    "space-x-72",
    "space-y-72",
    "space-x-80",
    "space-y-80",
    "space-x-96",
    "space-y-96",
    "space-x-px",
    "space-y-px",
    "space-y-reverse",
    "space-x-reverse",
    "w-0",
    "w-px",
    "w-0.5",
    "w-1",
    "w-1.5",
    "w-2",
    "w-2.5",
    "w-3",
    "w-3.5",
    "w-4",
    "w-5",
    "w-6",
    "w-7",
    "w-8",
    "w-9",
    "w-10",
    "w-11",
    "w-12",
    "w-14",
    "w-16",
    "w-20",
    "w-24",
    "w-28",
    "w-32",
    "w-36",
    "w-40",
    "w-44",
    "w-48",
    "w-52",
    "w-56",
    "w-60",
    "w-64",
    "w-72",
    "w-80",
    "w-96",
    "w-auto",
    "w-1/2",
    "w-1/3",
    "w-2/3",
    "w-1/4",
    "w-2/4",
    "w-3/4",
    "w-1/5",
    "w-2/5",
    "w-3/5",
    "w-4/5",
    "w-1/6",
    "w-2/6",
    "w-3/6",
    "w-4/6",
    "w-5/6",
    "w-1/12",
    "w-2/12",
    "w-3/12",
    "w-4/12",
    "w-5/12",
    "w-6/12",
    "w-7/12",
    "w-8/12",
    "w-9/12",
    "w-10/12",
    "w-11/12",
    "w-full",
    "w-screen",
    "w-svw",
    "w-lvw",
    "w-dvw",
    "w-min",
    "w-max",
    "w-fit",
    "min-w-0",
    "min-w-1",
    "min-w-2",
    "min-w-3",
    "min-w-4",
    "min-w-5",
    "min-w-6",
    "min-w-7",
    "min-w-8",
    "min-w-9",
    "min-w-10",
    "min-w-11",
    "min-w-12",
    "min-w-14",
    "min-w-16",
    "min-w-20",
    "min-w-24",
    "min-w-28",
    "min-w-32",
    "min-w-36",
    "min-w-40",
    "min-w-44",
    "min-w-48",
    "min-w-52",
    "min-w-56",
    "min-w-60",
    "min-w-64",
    "min-w-72",
    "min-w-80",
    "min-w-96",
    "min-w-px",
    "min-w-0.5",
    "min-w-1.5",
    "min-w-2.5",
    "min-w-3.5",
    "min-w-full",
    "min-w-min",
    "min-w-max",
    "min-w-fit",
    "max-w-0",
    "max-w-px",
    "max-w-0.5",
    "max-w-1",
    "max-w-1.5",
    "max-w-2",
    "max-w-2.5",
    "max-w-3",
    "max-w-3.5",
    "max-w-4",
    "max-w-5",
    "max-w-6",
    "max-w-7",
    "max-w-8",
    "max-w-9",
    "max-w-10",
    "max-w-11",
    "max-w-12",
    "max-w-14",
    "max-w-16",
    "max-w-20",
    "max-w-24",
    "max-w-28",
    "max-w-32",
    "max-w-36",
    "max-w-40",
    "max-w-44",
    "max-w-48",
    "max-w-52",
    "max-w-56",
    "max-w-60",
    "max-w-64",
    "max-w-72",
    "max-w-80",
    "max-w-96",
    "max-w-none",
    "max-w-xs",
    "max-w-sm",
    "max-w-md",
    "max-w-lg",
    "max-w-xl",
    "max-w-2xl",
    "max-w-3xl",
    "max-w-4xl",
    "max-w-5xl",
    "max-w-6xl",
    "max-w-7xl",
    "max-w-full",
    "max-w-min",
    "max-w-max",
    "max-w-fit",
    "max-w-prose",
    "max-w-screen-sm",
    "max-w-screen-md",
    "max-w-screen-lg",
    "max-w-screen-xl",
    "max-w-screen-2xl",
    "h-0",
    "h-px",
    "h-0.5",
    "h-1",
    "h-1.5",
    "h-2",
    "h-2.5",
    "h-3",
    "h-3.5",
    "h-4",
    "h-5",
    "h-6",
    "h-7",
    "h-8",
    "h-9",
    "h-10",
    "h-11",
    "h-12",
    "h-14",
    "h-16",
    "h-20",
    "h-24",
    "h-28",
    "h-32",
    "h-36",
    "h-40",
    "h-44",
    "h-48",
    "h-52",
    "h-56",
    "h-60",
    "h-64",
    "h-72",
    "h-80",
    "h-96",
    "h-auto",
    "h-1/2",
    "h-1/3",
    "h-2/3",
    "h-1/4",
    "h-2/4",
    "h-3/4",
    "h-1/5",
    "h-2/5",
    "h-3/5",
    "h-4/5",
    "h-1/6",
    "h-2/6",
    "h-3/6",
    "h-4/6",
    "h-5/6",
    "h-full",
    "h-screen",
    "h-svh",
    "h-lvh",
    "h-dvh",
    "h-min",
    "h-max",
    "h-fit",
    "min-h-0",
    "min-h-1",
    "min-h-2",
    "min-h-3",
    "min-h-4",
    "min-h-5",
    "min-h-6",
    "min-h-7",
    "min-h-8",
    "min-h-9",
    "min-h-10",
    "min-h-11",
    "min-h-12",
    "min-h-14",
    "min-h-16",
    "min-h-20",
    "min-h-24",
    "min-h-28",
    "min-h-32",
    "min-h-36",
    "min-h-40",
    "min-h-44",
    "min-h-48",
    "min-h-52",
    "min-h-56",
    "min-h-60",
    "min-h-64",
    "min-h-72",
    "min-h-80",
    "min-h-96",
    "min-h-px",
    "min-h-0.5",
    "min-h-1.5",
    "min-h-2.5",
    "min-h-3.5",
    "min-h-full",
    "min-h-screen",
    "min-h-svh",
    "min-h-lvh",
    "min-h-dvh",
    "min-h-min",
    "min-h-max",
    "min-h-fit",
    "max-h-0",
    "max-h-px",
    "max-h-0.5",
    "max-h-1",
    "max-h-1.5",
    "max-h-2",
    "max-h-2.5",
    "max-h-3",
    "max-h-3.5",
    "max-h-4",
    "max-h-5",
    "max-h-6",
    "max-h-7",
    "max-h-8",
    "max-h-9",
    "max-h-10",
    "max-h-11",
    "max-h-12",
    "max-h-14",
    "max-h-16",
    "max-h-20",
    "max-h-24",
    "max-h-28",
    "max-h-32",
    "max-h-36",
    "max-h-40",
    "max-h-44",
    "max-h-48",
    "max-h-52",
    "max-h-56",
    "max-h-60",
    "max-h-64",
    "max-h-72",
    "max-h-80",
    "max-h-96",
    "max-h-none",
    "max-h-full",
    "max-h-screen",
    "max-h-svh",
    "max-h-lvh",
    "max-h-dvh",
    "max-h-min",
    "max-h-max",
    "max-h-fit",
    "size-0",
    "size-px",
    "size-0.5",
    "size-1",
    "size-1.5",
    "size-2",
    "size-2.5",
    "size-3",
    "size-3.5",
    "size-4",
    "size-5",
    "size-6",
    "size-7",
    "size-8",
    "size-9",
    "size-10",
    "size-11",
    "size-12",
    "size-14",
    "size-16",
    "size-20",
    "size-24",
    "size-28",
    "size-32",
    "size-36",
    "size-40",
    "size-44",
    "size-48",
    "size-52",
    "size-56",
    "size-60",
    "size-64",
    "size-72",
    "size-80",
    "size-96",
    "size-auto",
    "size-1/2",
    "size-1/3",
    "size-2/3",
    "size-1/4",
    "size-2/4",
    "size-3/4",
    "size-1/5",
    "size-2/5",
    "size-3/5",
    "size-4/5",
    "size-1/6",
    "size-2/6",
    "size-3/6",
    "size-4/6",
    "size-5/6",
    "size-1/12",
    "size-2/12",
    "size-3/12",
    "size-4/12",
    "size-5/12",
    "size-6/12",
    "size-7/12",
    "size-8/12",
    "size-9/12",
    "size-10/12",
    "size-11/12",
    "size-full",
    "size-min",
    "size-max",
    "size-fit",
    "font-sans",
    "font-serif",
    "font-mono",
    "text-xs",
    "text-sm",
    "text-base",
    "text-lg",
    "text-xl",
    "text-2xl",
    "text-3xl",
    "text-4xl",
    "text-5xl",
    "text-6xl",
    "text-7xl",
    "text-8xl",
    "text-9xl",
    "antialiased",
    "subpixel-antialiased",
    "italic",
    "not-italic",
    "font-thin",
    "font-extralight",
    "font-light",
    "font-normal",
    "font-medium",
    "font-semibold",
    "font-bold",
    "font-extrabold",
    "font-black",
    "normal-nums",
    "ordinal",
    "slashed-zero",
    "lining-nums",
    "oldstyle-nums",
    "proportional-nums",
    "tabular-nums",
    "diagonal-fractions",
    "stacked-fractions",
    "tracking-tighter",
    "tracking-tight",
    "tracking-normal",
    "tracking-wide",
    "tracking-wider",
    "tracking-widest",
    "line-clamp-1",
    "line-clamp-2",
    "line-clamp-3",
    "line-clamp-4",
    "line-clamp-5",
    "line-clamp-6",
    "line-clamp-none",
    "leading-3",
    "leading-4",
    "leading-5",
    "leading-6",
    "leading-7",
    "leading-8",
    "leading-9",
    "leading-10",
    "leading-none",
    "leading-tight",
    "leading-snug",
    "leading-normal",
    "leading-relaxed",
    "leading-loose",
    "list-image-none",
    "list-inside",
    "list-outside",
    "list-none",
    "list-disc",
    "list-decimal",
    "text-left",
    "text-center",
    "text-right",
    "text-justify",
    "text-start",
    "text-end",
    "text-inherit",
    "text-current",
    "text-transparent",
    "text-black",
    "text-white",
    "text-slate-50",
    "text-slate-100",
    "text-slate-200",
    "text-slate-300",
    "text-slate-400",
    "text-slate-500",
    "text-slate-600",
    "text-slate-700",
    "text-slate-800",
    "text-slate-900",
    "text-slate-950",
    "text-gray-50",
    "text-gray-100",
    "text-gray-200",
    "text-gray-300",
    "text-gray-400",
    "text-gray-500",
    "text-gray-600",
    "text-gray-700",
    "text-gray-800",
    "text-gray-900",
    "text-gray-950",
    "text-zinc-50",
    "text-zinc-100",
    "text-zinc-200",
    "text-zinc-300",
    "text-zinc-400",
    "text-zinc-500",
    "text-zinc-600",
    "text-zinc-700",
    "text-zinc-800",
    "text-zinc-900",
    "text-zinc-950",
    "text-neutral-50",
    "text-neutral-100",
    "text-neutral-200",
    "text-neutral-300",
    "text-neutral-400",
    "text-neutral-500",
    "text-neutral-600",
    "text-neutral-700",
    "text-neutral-800",
    "text-neutral-900",
    "text-neutral-950",
    "text-stone-50",
    "text-stone-100",
    "text-stone-200",
    "text-stone-300",
    "text-stone-400",
    "text-stone-500",
    "text-stone-600",
    "text-stone-700",
    "text-stone-800",
    "text-stone-900",
    "text-stone-950",
    "text-red-50",
    "text-red-100",
    "text-red-200",
    "text-red-300",
    "text-red-400",
    "text-red-500",
    "text-red-600",
    "text-red-700",
    "text-red-800",
    "text-red-900",
    "text-red-950",
    "text-orange-50",
    "text-orange-100",
    "text-orange-200",
    "text-orange-300",
    "text-orange-400",
    "text-orange-500",
    "text-orange-600",
    "text-orange-700",
    "text-orange-800",
    "text-orange-900",
    "text-orange-950",
    "text-amber-50",
    "text-amber-100",
    "text-amber-200",
    "text-amber-300",
    "text-amber-400",
    "text-amber-500",
    "text-amber-600",
    "text-amber-700",
    "text-amber-800",
    "text-amber-900",
    "text-amber-950",
    "text-yellow-50",
    "text-yellow-100",
    "text-yellow-200",
    "text-yellow-300",
    "text-yellow-400",
    "text-yellow-500",
    "text-yellow-600",
    "text-yellow-700",
    "text-yellow-800",
    "text-yellow-900",
    "text-yellow-950",
    "text-lime-50",
    "text-lime-100",
    "text-lime-200",
    "text-lime-300",
    "text-lime-400",
    "text-lime-500",
    "text-lime-600",
    "text-lime-700",
    "text-lime-800",
    "text-lime-900",
    "text-lime-950",
    "text-green-50",
    "text-green-100",
    "text-green-200",
    "text-green-300",
    "text-green-400",
    "text-green-500",
    "text-green-600",
    "text-green-700",
    "text-green-800",
    "text-green-900",
    "text-green-950",
    "text-emerald-50",
    "text-emerald-100",
    "text-emerald-200",
    "text-emerald-300",
    "text-emerald-400",
    "text-emerald-500",
    "text-emerald-600",
    "text-emerald-700",
    "text-emerald-800",
    "text-emerald-900",
    "text-emerald-950",
    "text-teal-50",
    "text-teal-100",
    "text-teal-200",
    "text-teal-300",
    "text-teal-400",
    "text-teal-500",
    "text-teal-600",
    "text-teal-700",
    "text-teal-800",
    "text-teal-900",
    "text-teal-950",
    "text-cyan-50",
    "text-cyan-100",
    "text-cyan-200",
    "text-cyan-300",
    "text-cyan-400",
    "text-cyan-500",
    "text-cyan-600",
    "text-cyan-700",
    "text-cyan-800",
    "text-cyan-900",
    "text-cyan-950",
    "text-sky-50",
    "text-sky-100",
    "text-sky-200",
    "text-sky-300",
    "text-sky-400",
    "text-sky-500",
    "text-sky-600",
    "text-sky-700",
    "text-sky-800",
    "text-sky-900",
    "text-sky-950",
    "text-blue-50",
    "text-blue-100",
    "text-blue-200",
    "text-blue-300",
    "text-blue-400",
    "text-blue-500",
    "text-blue-600",
    "text-blue-700",
    "text-blue-800",
    "text-blue-900",
    "text-blue-950",
    "text-indigo-50",
    "text-indigo-100",
    "text-indigo-200",
    "text-indigo-300",
    "text-indigo-400",
    "text-indigo-500",
    "text-indigo-600",
    "text-indigo-700",
    "text-indigo-800",
    "text-indigo-900",
    "text-indigo-950",
    "text-violet-50",
    "text-violet-100",
    "text-violet-200",
    "text-violet-300",
    "text-violet-400",
    "text-violet-500",
    "text-violet-600",
    "text-violet-700",
    "text-violet-800",
    "text-violet-900",
    "text-violet-950",
    "text-purple-50",
    "text-purple-100",
    "text-purple-200",
    "text-purple-300",
    "text-purple-400",
    "text-purple-500",
    "text-purple-600",
    "text-purple-700",
    "text-purple-800",
    "text-purple-900",
    "text-purple-950",
    "text-fuchsia-50",
    "text-fuchsia-100",
    "text-fuchsia-200",
    "text-fuchsia-300",
    "text-fuchsia-400",
    "text-fuchsia-500",
    "text-fuchsia-600",
    "text-fuchsia-700",
    "text-fuchsia-800",
    "text-fuchsia-900",
    "text-fuchsia-950",
    "text-pink-50",
    "text-pink-100",
    "text-pink-200",
    "text-pink-300",
    "text-pink-400",
    "text-pink-500",
    "text-pink-600",
    "text-pink-700",
    "text-pink-800",
    "text-pink-900",
    "text-pink-950",
    "text-rose-50",
    "text-rose-100",
    "text-rose-200",
    "text-rose-300",
    "text-rose-400",
    "text-rose-500",
    "text-rose-600",
    "text-rose-700",
    "text-rose-800",
    "text-rose-900",
    "text-rose-950",
    "underline",
    "overline",
    "line-through",
    "no-underline",
    "decoration-inherit",
    "decoration-current",
    "decoration-transparent",
    "decoration-black",
    "decoration-white",
    "decoration-slate-50",
    "decoration-slate-100",
    "decoration-slate-200",
    "decoration-slate-300",
    "decoration-slate-400",
    "decoration-slate-500",
    "decoration-slate-600",
    "decoration-slate-700",
    "decoration-slate-800",
    "decoration-slate-900",
    "decoration-slate-950",
    "decoration-gray-50",
    "decoration-gray-100",
    "decoration-gray-200",
    "decoration-gray-300",
    "decoration-gray-400",
    "decoration-gray-500",
    "decoration-gray-600",
    "decoration-gray-700",
    "decoration-gray-800",
    "decoration-gray-900",
    "decoration-gray-950",
    "decoration-zinc-50",
    "decoration-zinc-100",
    "decoration-zinc-200",
    "decoration-zinc-300",
    "decoration-zinc-400",
    "decoration-zinc-500",
    "decoration-zinc-600",
    "decoration-zinc-700",
    "decoration-zinc-800",
    "decoration-zinc-900",
    "decoration-zinc-950",
    "decoration-neutral-50",
    "decoration-neutral-100",
    "decoration-neutral-200",
    "decoration-neutral-300",
    "decoration-neutral-400",
    "decoration-neutral-500",
    "decoration-neutral-600",
    "decoration-neutral-700",
    "decoration-neutral-800",
    "decoration-neutral-900",
    "decoration-neutral-950",
    "decoration-stone-50",
    "decoration-stone-100",
    "decoration-stone-200",
    "decoration-stone-300",
    "decoration-stone-400",
    "decoration-stone-500",
    "decoration-stone-600",
    "decoration-stone-700",
    "decoration-stone-800",
    "decoration-stone-900",
    "decoration-stone-950",
    "decoration-red-50",
    "decoration-red-100",
    "decoration-red-200",
    "decoration-red-300",
    "decoration-red-400",
    "decoration-red-500",
    "decoration-red-600",
    "decoration-red-700",
    "decoration-red-800",
    "decoration-red-900",
    "decoration-red-950",
    "decoration-orange-50",
    "decoration-orange-100",
    "decoration-orange-200",
    "decoration-orange-300",
    "decoration-orange-400",
    "decoration-orange-500",
    "decoration-orange-600",
    "decoration-orange-700",
    "decoration-orange-800",
    "decoration-orange-900",
    "decoration-orange-950",
    "decoration-amber-50",
    "decoration-amber-100",
    "decoration-amber-200",
    "decoration-amber-300",
    "decoration-amber-400",
    "decoration-amber-500",
    "decoration-amber-600",
    "decoration-amber-700",
    "decoration-amber-800",
    "decoration-amber-900",
    "decoration-amber-950",
    "decoration-yellow-50",
    "decoration-yellow-100",
    "decoration-yellow-200",
    "decoration-yellow-300",
    "decoration-yellow-400",
    "decoration-yellow-500",
    "decoration-yellow-600",
    "decoration-yellow-700",
    "decoration-yellow-800",
    "decoration-yellow-900",
    "decoration-yellow-950",
    "decoration-lime-50",
    "decoration-lime-100",
    "decoration-lime-200",
    "decoration-lime-300",
    "decoration-lime-400",
    "decoration-lime-500",
    "decoration-lime-600",
    "decoration-lime-700",
    "decoration-lime-800",
    "decoration-lime-900",
    "decoration-lime-950",
    "decoration-green-50",
    "decoration-green-100",
    "decoration-green-200",
    "decoration-green-300",
    "decoration-green-400",
    "decoration-green-500",
    "decoration-green-600",
    "decoration-green-700",
    "decoration-green-800",
    "decoration-green-900",
    "decoration-green-950",
    "decoration-emerald-50",
    "decoration-emerald-100",
    "decoration-emerald-200",
    "decoration-emerald-300",
    "decoration-emerald-400",
    "decoration-emerald-500",
    "decoration-emerald-600",
    "decoration-emerald-700",
    "decoration-emerald-800",
    "decoration-emerald-900",
    "decoration-emerald-950",
    "decoration-teal-50",
    "decoration-teal-100",
    "decoration-teal-200",
    "decoration-teal-300",
    "decoration-teal-400",
    "decoration-teal-500",
    "decoration-teal-600",
    "decoration-teal-700",
    "decoration-teal-800",
    "decoration-teal-900",
    "decoration-teal-950",
    "decoration-cyan-50",
    "decoration-cyan-100",
    "decoration-cyan-200",
    "decoration-cyan-300",
    "decoration-cyan-400",
    "decoration-cyan-500",
    "decoration-cyan-600",
    "decoration-cyan-700",
    "decoration-cyan-800",
    "decoration-cyan-900",
    "decoration-cyan-950",
    "decoration-sky-50",
    "decoration-sky-100",
    "decoration-sky-200",
    "decoration-sky-300",
    "decoration-sky-400",
    "decoration-sky-500",
    "decoration-sky-600",
    "decoration-sky-700",
    "decoration-sky-800",
    "decoration-sky-900",
    "decoration-sky-950",
    "decoration-blue-50",
    "decoration-blue-100",
    "decoration-blue-200",
    "decoration-blue-300",
    "decoration-blue-400",
    "decoration-blue-500",
    "decoration-blue-600",
    "decoration-blue-700",
    "decoration-blue-800",
    "decoration-blue-900",
    "decoration-blue-950",
    "decoration-indigo-50",
    "decoration-indigo-100",
    "decoration-indigo-200",
    "decoration-indigo-300",
    "decoration-indigo-400",
    "decoration-indigo-500",
    "decoration-indigo-600",
    "decoration-indigo-700",
    "decoration-indigo-800",
    "decoration-indigo-900",
    "decoration-indigo-950",
    "decoration-violet-50",
    "decoration-violet-100",
    "decoration-violet-200",
    "decoration-violet-300",
    "decoration-violet-400",
    "decoration-violet-500",
    "decoration-violet-600",
    "decoration-violet-700",
    "decoration-violet-800",
    "decoration-violet-900",
    "decoration-violet-950",
    "decoration-purple-50",
    "decoration-purple-100",
    "decoration-purple-200",
    "decoration-purple-300",
    "decoration-purple-400",
    "decoration-purple-500",
    "decoration-purple-600",
    "decoration-purple-700",
    "decoration-purple-800",
    "decoration-purple-900",
    "decoration-purple-950",
    "decoration-fuchsia-50",
    "decoration-fuchsia-100",
    "decoration-fuchsia-200",
    "decoration-fuchsia-300",
    "decoration-fuchsia-400",
    "decoration-fuchsia-500",
    "decoration-fuchsia-600",
    "decoration-fuchsia-700",
    "decoration-fuchsia-800",
    "decoration-fuchsia-900",
    "decoration-fuchsia-950",
    "decoration-pink-50",
    "decoration-pink-100",
    "decoration-pink-200",
    "decoration-pink-300",
    "decoration-pink-400",
    "decoration-pink-500",
    "decoration-pink-600",
    "decoration-pink-700",
    "decoration-pink-800",
    "decoration-pink-900",
    "decoration-pink-950",
    "decoration-rose-50",
    "decoration-rose-100",
    "decoration-rose-200",
    "decoration-rose-300",
    "decoration-rose-400",
    "decoration-rose-500",
    "decoration-rose-600",
    "decoration-rose-700",
    "decoration-rose-800",
    "decoration-rose-900",
    "decoration-rose-950",
    "decoration-solid",
    "decoration-double",
    "decoration-dotted",
    "decoration-dashed",
    "decoration-wavy",
    "decoration-auto",
    "decoration-from-font",
    "decoration-0",
    "decoration-1",
    "decoration-2",
    "decoration-4",
    "decoration-8",
    "underline-offset-auto",
    "underline-offset-0",
    "underline-offset-1",
    "underline-offset-2",
    "underline-offset-4",
    "underline-offset-8",
    "uppercase",
    "lowercase",
    "capitalize",
    "normal-case",
    "truncate",
    "text-ellipsis",
    "text-clip",
    "text-wrap",
    "text-nowrap",
    "text-balance",
    "text-pretty",
    "indent-0",
    "indent-px",
    "indent-0.5",
    "indent-1",
    "indent-1.5",
    "indent-2",
    "indent-2.5",
    "indent-3",
    "indent-3.5",
    "indent-4",
    "indent-5",
    "indent-6",
    "indent-7",
    "indent-8",
    "indent-9",
    "indent-10",
    "indent-11",
    "indent-12",
    "indent-14",
    "indent-16",
    "indent-20",
    "indent-24",
    "indent-28",
    "indent-32",
    "indent-36",
    "indent-40",
    "indent-44",
    "indent-48",
    "indent-52",
    "indent-56",
    "indent-60",
    "indent-64",
    "indent-72",
    "indent-80",
    "indent-96",
    "align-baseline",
    "align-top",
    "align-middle",
    "align-bottom",
    "align-text-top",
    "align-text-bottom",
    "align-sub",
    "align-super",
    "whitespace-normal",
    "whitespace-nowrap",
    "whitespace-pre",
    "whitespace-pre-line",
    "whitespace-pre-wrap",
    "whitespace-break-spaces",
    "break-normal",
    "break-words",
    "break-all",
    "break-keep",
    "hyphens-none",
    "hyphens-manual",
    "hyphens-auto",
    "content-none",
    "bg-fixed",
    "bg-local",
    "bg-scroll",
    "bg-clip-border",
    "bg-clip-padding",
    "bg-clip-content",
    "bg-clip-text",
    "bg-inherit",
    "bg-current",
    "bg-transparent",
    "bg-black",
    "bg-white",
    "bg-slate-50",
    "bg-slate-100",
    "bg-slate-200",
    "bg-slate-300",
    "bg-slate-400",
    "bg-slate-500",
    "bg-slate-600",
    "bg-slate-700",
    "bg-slate-800",
    "bg-slate-900",
    "bg-slate-950",
    "bg-gray-50",
    "bg-gray-100",
    "bg-gray-200",
    "bg-gray-300",
    "bg-gray-400",
    "bg-gray-500",
    "bg-gray-600",
    "bg-gray-700",
    "bg-gray-800",
    "bg-gray-900",
    "bg-gray-950",
    "bg-zinc-50",
    "bg-zinc-100",
    "bg-zinc-200",
    "bg-zinc-300",
    "bg-zinc-400",
    "bg-zinc-500",
    "bg-zinc-600",
    "bg-zinc-700",
    "bg-zinc-800",
    "bg-zinc-900",
    "bg-zinc-950",
    "bg-neutral-50",
    "bg-neutral-100",
    "bg-neutral-200",
    "bg-neutral-300",
    "bg-neutral-400",
    "bg-neutral-500",
    "bg-neutral-600",
    "bg-neutral-700",
    "bg-neutral-800",
    "bg-neutral-900",
    "bg-neutral-950",
    "bg-stone-50",
    "bg-stone-100",
    "bg-stone-200",
    "bg-stone-300",
    "bg-stone-400",
    "bg-stone-500",
    "bg-stone-600",
    "bg-stone-700",
    "bg-stone-800",
    "bg-stone-900",
    "bg-stone-950",
    "bg-red-50",
    "bg-red-100",
    "bg-red-200",
    "bg-red-300",
    "bg-red-400",
    "bg-red-500",
    "bg-red-600",
    "bg-red-700",
    "bg-red-800",
    "bg-red-900",
    "bg-red-950",
    "bg-orange-50",
    "bg-orange-100",
    "bg-orange-200",
    "bg-orange-300",
    "bg-orange-400",
    "bg-orange-500",
    "bg-orange-600",
    "bg-orange-700",
    "bg-orange-800",
    "bg-orange-900",
    "bg-orange-950",
    "bg-amber-50",
    "bg-amber-100",
    "bg-amber-200",
    "bg-amber-300",
    "bg-amber-400",
    "bg-amber-500",
    "bg-amber-600",
    "bg-amber-700",
    "bg-amber-800",
    "bg-amber-900",
    "bg-amber-950",
    "bg-yellow-50",
    "bg-yellow-100",
    "bg-yellow-200",
    "bg-yellow-300",
    "bg-yellow-400",
    "bg-yellow-500",
    "bg-yellow-600",
    "bg-yellow-700",
    "bg-yellow-800",
    "bg-yellow-900",
    "bg-yellow-950",
    "bg-lime-50",
    "bg-lime-100",
    "bg-lime-200",
    "bg-lime-300",
    "bg-lime-400",
    "bg-lime-500",
    "bg-lime-600",
    "bg-lime-700",
    "bg-lime-800",
    "bg-lime-900",
    "bg-lime-950",
    "bg-green-50",
    "bg-green-100",
    "bg-green-200",
    "bg-green-300",
    "bg-green-400",
    "bg-green-500",
    "bg-green-600",
    "bg-green-700",
    "bg-green-800",
    "bg-green-900",
    "bg-green-950",
    "bg-emerald-50",
    "bg-emerald-100",
    "bg-emerald-200",
    "bg-emerald-300",
    "bg-emerald-400",
    "bg-emerald-500",
    "bg-emerald-600",
    "bg-emerald-700",
    "bg-emerald-800",
    "bg-emerald-900",
    "bg-emerald-950",
    "bg-teal-50",
    "bg-teal-100",
    "bg-teal-200",
    "bg-teal-300",
    "bg-teal-400",
    "bg-teal-500",
    "bg-teal-600",
    "bg-teal-700",
    "bg-teal-800",
    "bg-teal-900",
    "bg-teal-950",
    "bg-cyan-50",
    "bg-cyan-100",
    "bg-cyan-200",
    "bg-cyan-300",
    "bg-cyan-400",
    "bg-cyan-500",
    "bg-cyan-600",
    "bg-cyan-700",
    "bg-cyan-800",
    "bg-cyan-900",
    "bg-cyan-950",
    "bg-sky-50",
    "bg-sky-100",
    "bg-sky-200",
    "bg-sky-300",
    "bg-sky-400",
    "bg-sky-500",
    "bg-sky-600",
    "bg-sky-700",
    "bg-sky-800",
    "bg-sky-900",
    "bg-sky-950",
    "bg-blue-50",
    "bg-blue-100",
    "bg-blue-200",
    "bg-blue-300",
    "bg-blue-400",
    "bg-blue-500",
    "bg-blue-600",
    "bg-blue-700",
    "bg-blue-800",
    "bg-blue-900",
    "bg-blue-950",
    "bg-indigo-50",
    "bg-indigo-100",
    "bg-indigo-200",
    "bg-indigo-300",
    "bg-indigo-400",
    "bg-indigo-500",
    "bg-indigo-600",
    "bg-indigo-700",
    "bg-indigo-800",
    "bg-indigo-900",
    "bg-indigo-950",
    "bg-violet-50",
    "bg-violet-100",
    "bg-violet-200",
    "bg-violet-300",
    "bg-violet-400",
    "bg-violet-500",
    "bg-violet-600",
    "bg-violet-700",
    "bg-violet-800",
    "bg-violet-900",
    "bg-violet-950",
    "bg-purple-50",
    "bg-purple-100",
    "bg-purple-200",
    "bg-purple-300",
    "bg-purple-400",
    "bg-purple-500",
    "bg-purple-600",
    "bg-purple-700",
    "bg-purple-800",
    "bg-purple-900",
    "bg-purple-950",
    "bg-fuchsia-50",
    "bg-fuchsia-100",
    "bg-fuchsia-200",
    "bg-fuchsia-300",
    "bg-fuchsia-400",
    "bg-fuchsia-500",
    "bg-fuchsia-600",
    "bg-fuchsia-700",
    "bg-fuchsia-800",
    "bg-fuchsia-900",
    "bg-fuchsia-950",
    "bg-pink-50",
    "bg-pink-100",
    "bg-pink-200",
    "bg-pink-300",
    "bg-pink-400",
    "bg-pink-500",
    "bg-pink-600",
    "bg-pink-700",
    "bg-pink-800",
    "bg-pink-900",
    "bg-pink-950",
    "bg-rose-50",
    "bg-rose-100",
    "bg-rose-200",
    "bg-rose-300",
    "bg-rose-400",
    "bg-rose-500",
    "bg-rose-600",
    "bg-rose-700",
    "bg-rose-800",
    "bg-rose-900",
    "bg-rose-950",
    "bg-origin-border",
    "bg-origin-padding",
    "bg-origin-content",
    "bg-bottom",
    "bg-center",
    "bg-left",
    "bg-left-bottom",
    "bg-left-top",
    "bg-right",
    "bg-right-bottom",
    "bg-right-top",
    "bg-top",
    "bg-repeat",
    "bg-no-repeat",
    "bg-repeat-x",
    "bg-repeat-y",
    "bg-repeat-round",
    "bg-repeat-space",
    "bg-auto",
    "bg-cover",
    "bg-contain",
    "bg-none",
    "bg-gradient-to-t",
    "bg-gradient-to-tr",
    "bg-gradient-to-r",
    "bg-gradient-to-br",
    "bg-gradient-to-b",
    "bg-gradient-to-bl",
    "bg-gradient-to-l",
    "bg-gradient-to-tl",
    "from-inherit",
    "from-current",
    "from-transparent",
    "from-black",
    "from-white",
    "from-slate-50",
    "from-slate-100",
    "from-slate-200",
    "from-slate-300",
    "from-slate-400",
    "from-slate-500",
    "from-slate-600",
    "from-slate-700",
    "from-slate-800",
    "from-slate-900",
    "from-slate-950",
    "from-gray-50",
    "from-gray-100",
    "from-gray-200",
    "from-gray-300",
    "from-gray-400",
    "from-gray-500",
    "from-gray-600",
    "from-gray-700",
    "from-gray-800",
    "from-gray-900",
    "from-gray-950",
    "from-zinc-50",
    "from-zinc-100",
    "from-zinc-200",
    "from-zinc-300",
    "from-zinc-400",
    "from-zinc-500",
    "from-zinc-600",
    "from-zinc-700",
    "from-zinc-800",
    "from-zinc-900",
    "from-zinc-950",
    "from-neutral-50",
    "from-neutral-100",
    "from-neutral-200",
    "from-neutral-300",
    "from-neutral-400",
    "from-neutral-500",
    "from-neutral-600",
    "from-neutral-700",
    "from-neutral-800",
    "from-neutral-900",
    "from-neutral-950",
    "from-stone-50",
    "from-stone-100",
    "from-stone-200",
    "from-stone-300",
    "from-stone-400",
    "from-stone-500",
    "from-stone-600",
    "from-stone-700",
    "from-stone-800",
    "from-stone-900",
    "from-stone-950",
    "from-red-50",
    "from-red-100",
    "from-red-200",
    "from-red-300",
    "from-red-400",
    "from-red-500",
    "from-red-600",
    "from-red-700",
    "from-red-800",
    "from-red-900",
    "from-red-950",
    "from-orange-50",
    "from-orange-100",
    "from-orange-200",
    "from-orange-300",
    "from-orange-400",
    "from-orange-500",
    "from-orange-600",
    "from-orange-700",
    "from-orange-800",
    "from-orange-900",
    "from-orange-950",
    "from-amber-50",
    "from-amber-100",
    "from-amber-200",
    "from-amber-300",
    "from-amber-400",
    "from-amber-500",
    "from-amber-600",
    "from-amber-700",
    "from-amber-800",
    "from-amber-900",
    "from-amber-950",
    "from-yellow-50",
    "from-yellow-100",
    "from-yellow-200",
    "from-yellow-300",
    "from-yellow-400",
    "from-yellow-500",
    "from-yellow-600",
    "from-yellow-700",
    "from-yellow-800",
    "from-yellow-900",
    "from-yellow-950",
    "from-lime-50",
    "from-lime-100",
    "from-lime-200",
    "from-lime-300",
    "from-lime-400",
    "from-lime-500",
    "from-lime-600",
    "from-lime-700",
    "from-lime-800",
    "from-lime-900",
    "from-lime-950",
    "from-green-50",
    "from-green-100",
    "from-green-200",
    "from-green-300",
    "from-green-400",
    "from-green-500",
    "from-green-600",
    "from-green-700",
    "from-green-800",
    "from-green-900",
    "from-green-950",
    "from-emerald-50",
    "from-emerald-100",
    "from-emerald-200",
    "from-emerald-300",
    "from-emerald-400",
    "from-emerald-500",
    "from-emerald-600",
    "from-emerald-700",
    "from-emerald-800",
    "from-emerald-900",
    "from-emerald-950",
    "from-teal-50",
    "from-teal-100",
    "from-teal-200",
    "from-teal-300",
    "from-teal-400",
    "from-teal-500",
    "from-teal-600",
    "from-teal-700",
    "from-teal-800",
    "from-teal-900",
    "from-teal-950",
    "from-cyan-50",
    "from-cyan-100",
    "from-cyan-200",
    "from-cyan-300",
    "from-cyan-400",
    "from-cyan-500",
    "from-cyan-600",
    "from-cyan-700",
    "from-cyan-800",
    "from-cyan-900",
    "from-cyan-950",
    "from-sky-50",
    "from-sky-100",
    "from-sky-200",
    "from-sky-300",
    "from-sky-400",
    "from-sky-500",
    "from-sky-600",
    "from-sky-700",
    "from-sky-800",
    "from-sky-900",
    "from-sky-950",
    "from-blue-50",
    "from-blue-100",
    "from-blue-200",
    "from-blue-300",
    "from-blue-400",
    "from-blue-500",
    "from-blue-600",
    "from-blue-700",
    "from-blue-800",
    "from-blue-900",
    "from-blue-950",
    "from-indigo-50",
    "from-indigo-100",
    "from-indigo-200",
    "from-indigo-300",
    "from-indigo-400",
    "from-indigo-500",
    "from-indigo-600",
    "from-indigo-700",
    "from-indigo-800",
    "from-indigo-900",
    "from-indigo-950",
    "from-violet-50",
    "from-violet-100",
    "from-violet-200",
    "from-violet-300",
    "from-violet-400",
    "from-violet-500",
    "from-violet-600",
    "from-violet-700",
    "from-violet-800",
    "from-violet-900",
    "from-violet-950",
    "from-purple-50",
    "from-purple-100",
    "from-purple-200",
    "from-purple-300",
    "from-purple-400",
    "from-purple-500",
    "from-purple-600",
    "from-purple-700",
    "from-purple-800",
    "from-purple-900",
    "from-purple-950",
    "from-fuchsia-50",
    "from-fuchsia-100",
    "from-fuchsia-200",
    "from-fuchsia-300",
    "from-fuchsia-400",
    "from-fuchsia-500",
    "from-fuchsia-600",
    "from-fuchsia-700",
    "from-fuchsia-800",
    "from-fuchsia-900",
    "from-fuchsia-950",
    "from-pink-50",
    "from-pink-100",
    "from-pink-200",
    "from-pink-300",
    "from-pink-400",
    "from-pink-500",
    "from-pink-600",
    "from-pink-700",
    "from-pink-800",
    "from-pink-900",
    "from-pink-950",
    "from-rose-50",
    "from-rose-100",
    "from-rose-200",
    "from-rose-300",
    "from-rose-400",
    "from-rose-500",
    "from-rose-600",
    "from-rose-700",
    "from-rose-800",
    "from-rose-900",
    "from-rose-950",
    "from-0%",
    "from-5%",
    "from-10%",
    "from-15%",
    "from-20%",
    "from-25%",
    "from-30%",
    "from-35%",
    "from-40%",
    "from-45%",
    "from-50%",
    "from-55%",
    "from-60%",
    "from-65%",
    "from-70%",
    "from-75%",
    "from-80%",
    "from-85%",
    "from-90%",
    "from-95%",
    "from-100%",
    "via-inherit",
    "via-current",
    "via-transparent",
    "via-black",
    "via-white",
    "via-slate-50",
    "via-slate-100",
    "via-slate-200",
    "via-slate-300",
    "via-slate-400",
    "via-slate-500",
    "via-slate-600",
    "via-slate-700",
    "via-slate-800",
    "via-slate-900",
    "via-slate-950",
    "via-gray-50",
    "via-gray-100",
    "via-gray-200",
    "via-gray-300",
    "via-gray-400",
    "via-gray-500",
    "via-gray-600",
    "via-gray-700",
    "via-gray-800",
    "via-gray-900",
    "via-gray-950",
    "via-zinc-50",
    "via-zinc-100",
    "via-zinc-200",
    "via-zinc-300",
    "via-zinc-400",
    "via-zinc-500",
    "via-zinc-600",
    "via-zinc-700",
    "via-zinc-800",
    "via-zinc-900",
    "via-zinc-950",
    "via-neutral-50",
    "via-neutral-100",
    "via-neutral-200",
    "via-neutral-300",
    "via-neutral-400",
    "via-neutral-500",
    "via-neutral-600",
    "via-neutral-700",
    "via-neutral-800",
    "via-neutral-900",
    "via-neutral-950",
    "via-stone-50",
    "via-stone-100",
    "via-stone-200",
    "via-stone-300",
    "via-stone-400",
    "via-stone-500",
    "via-stone-600",
    "via-stone-700",
    "via-stone-800",
    "via-stone-900",
    "via-stone-950",
    "via-red-50",
    "via-red-100",
    "via-red-200",
    "via-red-300",
    "via-red-400",
    "via-red-500",
    "via-red-600",
    "via-red-700",
    "via-red-800",
    "via-red-900",
    "via-red-950",
    "via-orange-50",
    "via-orange-100",
    "via-orange-200",
    "via-orange-300",
    "via-orange-400",
    "via-orange-500",
    "via-orange-600",
    "via-orange-700",
    "via-orange-800",
    "via-orange-900",
    "via-orange-950",
    "via-amber-50",
    "via-amber-100",
    "via-amber-200",
    "via-amber-300",
    "via-amber-400",
    "via-amber-500",
    "via-amber-600",
    "via-amber-700",
    "via-amber-800",
    "via-amber-900",
    "via-amber-950",
    "via-yellow-50",
    "via-yellow-100",
    "via-yellow-200",
    "via-yellow-300",
    "via-yellow-400",
    "via-yellow-500",
    "via-yellow-600",
    "via-yellow-700",
    "via-yellow-800",
    "via-yellow-900",
    "via-yellow-950",
    "via-lime-50",
    "via-lime-100",
    "via-lime-200",
    "via-lime-300",
    "via-lime-400",
    "via-lime-500",
    "via-lime-600",
    "via-lime-700",
    "via-lime-800",
    "via-lime-900",
    "via-lime-950",
    "via-green-50",
    "via-green-100",
    "via-green-200",
    "via-green-300",
    "via-green-400",
    "via-green-500",
    "via-green-600",
    "via-green-700",
    "via-green-800",
    "via-green-900",
    "via-green-950",
    "via-emerald-50",
    "via-emerald-100",
    "via-emerald-200",
    "via-emerald-300",
    "via-emerald-400",
    "via-emerald-500",
    "via-emerald-600",
    "via-emerald-700",
    "via-emerald-800",
    "via-emerald-900",
    "via-emerald-950",
    "via-teal-50",
    "via-teal-100",
    "via-teal-200",
    "via-teal-300",
    "via-teal-400",
    "via-teal-500",
    "via-teal-600",
    "via-teal-700",
    "via-teal-800",
    "via-teal-900",
    "via-teal-950",
    "via-cyan-50",
    "via-cyan-100",
    "via-cyan-200",
    "via-cyan-300",
    "via-cyan-400",
    "via-cyan-500",
    "via-cyan-600",
    "via-cyan-700",
    "via-cyan-800",
    "via-cyan-900",
    "via-cyan-950",
    "via-sky-50",
    "via-sky-100",
    "via-sky-200",
    "via-sky-300",
    "via-sky-400",
    "via-sky-500",
    "via-sky-600",
    "via-sky-700",
    "via-sky-800",
    "via-sky-900",
    "via-sky-950",
    "via-blue-50",
    "via-blue-100",
    "via-blue-200",
    "via-blue-300",
    "via-blue-400",
    "via-blue-500",
    "via-blue-600",
    "via-blue-700",
    "via-blue-800",
    "via-blue-900",
    "via-blue-950",
    "via-indigo-50",
    "via-indigo-100",
    "via-indigo-200",
    "via-indigo-300",
    "via-indigo-400",
    "via-indigo-500",
    "via-indigo-600",
    "via-indigo-700",
    "via-indigo-800",
    "via-indigo-900",
    "via-indigo-950",
    "via-violet-50",
    "via-violet-100",
    "via-violet-200",
    "via-violet-300",
    "via-violet-400",
    "via-violet-500",
    "via-violet-600",
    "via-violet-700",
    "via-violet-800",
    "via-violet-900",
    "via-violet-950",
    "via-purple-50",
    "via-purple-100",
    "via-purple-200",
    "via-purple-300",
    "via-purple-400",
    "via-purple-500",
    "via-purple-600",
    "via-purple-700",
    "via-purple-800",
    "via-purple-900",
    "via-purple-950",
    "via-fuchsia-50",
    "via-fuchsia-100",
    "via-fuchsia-200",
    "via-fuchsia-300",
    "via-fuchsia-400",
    "via-fuchsia-500",
    "via-fuchsia-600",
    "via-fuchsia-700",
    "via-fuchsia-800",
    "via-fuchsia-900",
    "via-fuchsia-950",
    "via-pink-50",
    "via-pink-100",
    "via-pink-200",
    "via-pink-300",
    "via-pink-400",
    "via-pink-500",
    "via-pink-600",
    "via-pink-700",
    "via-pink-800",
    "via-pink-900",
    "via-pink-950",
    "via-rose-50",
    "via-rose-100",
    "via-rose-200",
    "via-rose-300",
    "via-rose-400",
    "via-rose-500",
    "via-rose-600",
    "via-rose-700",
    "via-rose-800",
    "via-rose-900",
    "via-rose-950",
    "via-0%",
    "via-5%",
    "via-10%",
    "via-15%",
    "via-20%",
    "via-25%",
    "via-30%",
    "via-35%",
    "via-40%",
    "via-45%",
    "via-50%",
    "via-55%",
    "via-60%",
    "via-65%",
    "via-70%",
    "via-75%",
    "via-80%",
    "via-85%",
    "via-90%",
    "via-95%",
    "via-100%",
    "to-inherit",
    "to-current",
    "to-transparent",
    "to-black",
    "to-white",
    "to-slate-50",
    "to-slate-100",
    "to-slate-200",
    "to-slate-300",
    "to-slate-400",
    "to-slate-500",
    "to-slate-600",
    "to-slate-700",
    "to-slate-800",
    "to-slate-900",
    "to-slate-950",
    "to-gray-50",
    "to-gray-100",
    "to-gray-200",
    "to-gray-300",
    "to-gray-400",
    "to-gray-500",
    "to-gray-600",
    "to-gray-700",
    "to-gray-800",
    "to-gray-900",
    "to-gray-950",
    "to-zinc-50",
    "to-zinc-100",
    "to-zinc-200",
    "to-zinc-300",
    "to-zinc-400",
    "to-zinc-500",
    "to-zinc-600",
    "to-zinc-700",
    "to-zinc-800",
    "to-zinc-900",
    "to-zinc-950",
    "to-neutral-50",
    "to-neutral-100",
    "to-neutral-200",
    "to-neutral-300",
    "to-neutral-400",
    "to-neutral-500",
    "to-neutral-600",
    "to-neutral-700",
    "to-neutral-800",
    "to-neutral-900",
    "to-neutral-950",
    "to-stone-50",
    "to-stone-100",
    "to-stone-200",
    "to-stone-300",
    "to-stone-400",
    "to-stone-500",
    "to-stone-600",
    "to-stone-700",
    "to-stone-800",
    "to-stone-900",
    "to-stone-950",
    "to-red-50",
    "to-red-100",
    "to-red-200",
    "to-red-300",
    "to-red-400",
    "to-red-500",
    "to-red-600",
    "to-red-700",
    "to-red-800",
    "to-red-900",
    "to-red-950",
    "to-orange-50",
    "to-orange-100",
    "to-orange-200",
    "to-orange-300",
    "to-orange-400",
    "to-orange-500",
    "to-orange-600",
    "to-orange-700",
    "to-orange-800",
    "to-orange-900",
    "to-orange-950",
    "to-amber-50",
    "to-amber-100",
    "to-amber-200",
    "to-amber-300",
    "to-amber-400",
    "to-amber-500",
    "to-amber-600",
    "to-amber-700",
    "to-amber-800",
    "to-amber-900",
    "to-amber-950",
    "to-yellow-50",
    "to-yellow-100",
    "to-yellow-200",
    "to-yellow-300",
    "to-yellow-400",
    "to-yellow-500",
    "to-yellow-600",
    "to-yellow-700",
    "to-yellow-800",
    "to-yellow-900",
    "to-yellow-950",
    "to-lime-50",
    "to-lime-100",
    "to-lime-200",
    "to-lime-300",
    "to-lime-400",
    "to-lime-500",
    "to-lime-600",
    "to-lime-700",
    "to-lime-800",
    "to-lime-900",
    "to-lime-950",
    "to-green-50",
    "to-green-100",
    "to-green-200",
    "to-green-300",
    "to-green-400",
    "to-green-500",
    "to-green-600",
    "to-green-700",
    "to-green-800",
    "to-green-900",
    "to-green-950",
    "to-emerald-50",
    "to-emerald-100",
    "to-emerald-200",
    "to-emerald-300",
    "to-emerald-400",
    "to-emerald-500",
    "to-emerald-600",
    "to-emerald-700",
    "to-emerald-800",
    "to-emerald-900",
    "to-emerald-950",
    "to-teal-50",
    "to-teal-100",
    "to-teal-200",
    "to-teal-300",
    "to-teal-400",
    "to-teal-500",
    "to-teal-600",
    "to-teal-700",
    "to-teal-800",
    "to-teal-900",
    "to-teal-950",
    "to-cyan-50",
    "to-cyan-100",
    "to-cyan-200",
    "to-cyan-300",
    "to-cyan-400",
    "to-cyan-500",
    "to-cyan-600",
    "to-cyan-700",
    "to-cyan-800",
    "to-cyan-900",
    "to-cyan-950",
    "to-sky-50",
    "to-sky-100",
    "to-sky-200",
    "to-sky-300",
    "to-sky-400",
    "to-sky-500",
    "to-sky-600",
    "to-sky-700",
    "to-sky-800",
    "to-sky-900",
    "to-sky-950",
    "to-blue-50",
    "to-blue-100",
    "to-blue-200",
    "to-blue-300",
    "to-blue-400",
    "to-blue-500",
    "to-blue-600",
    "to-blue-700",
    "to-blue-800",
    "to-blue-900",
    "to-blue-950",
    "to-indigo-50",
    "to-indigo-100",
    "to-indigo-200",
    "to-indigo-300",
    "to-indigo-400",
    "to-indigo-500",
    "to-indigo-600",
    "to-indigo-700",
    "to-indigo-800",
    "to-indigo-900",
    "to-indigo-950",
    "to-violet-50",
    "to-violet-100",
    "to-violet-200",
    "to-violet-300",
    "to-violet-400",
    "to-violet-500",
    "to-violet-600",
    "to-violet-700",
    "to-violet-800",
    "to-violet-900",
    "to-violet-950",
    "to-purple-50",
    "to-purple-100",
    "to-purple-200",
    "to-purple-300",
    "to-purple-400",
    "to-purple-500",
    "to-purple-600",
    "to-purple-700",
    "to-purple-800",
    "to-purple-900",
    "to-purple-950",
    "to-fuchsia-50",
    "to-fuchsia-100",
    "to-fuchsia-200",
    "to-fuchsia-300",
    "to-fuchsia-400",
    "to-fuchsia-500",
    "to-fuchsia-600",
    "to-fuchsia-700",
    "to-fuchsia-800",
    "to-fuchsia-900",
    "to-fuchsia-950",
    "to-pink-50",
    "to-pink-100",
    "to-pink-200",
    "to-pink-300",
    "to-pink-400",
    "to-pink-500",
    "to-pink-600",
    "to-pink-700",
    "to-pink-800",
    "to-pink-900",
    "to-pink-950",
    "to-rose-50",
    "to-rose-100",
    "to-rose-200",
    "to-rose-300",
    "to-rose-400",
    "to-rose-500",
    "to-rose-600",
    "to-rose-700",
    "to-rose-800",
    "to-rose-900",
    "to-rose-950",
    "to-0%",
    "to-5%",
    "to-10%",
    "to-15%",
    "to-20%",
    "to-25%",
    "to-30%",
    "to-35%",
    "to-40%",
    "to-45%",
    "to-50%",
    "to-55%",
    "to-60%",
    "to-65%",
    "to-70%",
    "to-75%",
    "to-80%",
    "to-85%",
    "to-90%",
    "to-95%",
    "to-100%",
    "rounded-none",
    "rounded-sm",
    "rounded",
    "rounded-md",
    "rounded-lg",
    "rounded-xl",
    "rounded-2xl",
    "rounded-3xl",
    "rounded-full",
    "rounded-s-none",
    "rounded-s-sm",
    "rounded-s",
    "rounded-s-md",
    "rounded-s-lg",
    "rounded-s-xl",
    "rounded-s-2xl",
    "rounded-s-3xl",
    "rounded-s-full",
    "rounded-e-none",
    "rounded-e-sm",
    "rounded-e",
    "rounded-e-md",
    "rounded-e-lg",
    "rounded-e-xl",
    "rounded-e-2xl",
    "rounded-e-3xl",
    "rounded-e-full",
    "rounded-t-none",
    "rounded-t-sm",
    "rounded-t",
    "rounded-t-md",
    "rounded-t-lg",
    "rounded-t-xl",
    "rounded-t-2xl",
    "rounded-t-3xl",
    "rounded-t-full",
    "rounded-r-none",
    "rounded-r-sm",
    "rounded-r",
    "rounded-r-md",
    "rounded-r-lg",
    "rounded-r-xl",
    "rounded-r-2xl",
    "rounded-r-3xl",
    "rounded-r-full",
    "rounded-b-none",
    "rounded-b-sm",
    "rounded-b",
    "rounded-b-md",
    "rounded-b-lg",
    "rounded-b-xl",
    "rounded-b-2xl",
    "rounded-b-3xl",
    "rounded-b-full",
    "rounded-l-none",
    "rounded-l-sm",
    "rounded-l",
    "rounded-l-md",
    "rounded-l-lg",
    "rounded-l-xl",
    "rounded-l-2xl",
    "rounded-l-3xl",
    "rounded-l-full",
    "rounded-ss-none",
    "rounded-ss-sm",
    "rounded-ss",
    "rounded-ss-md",
    "rounded-ss-lg",
    "rounded-ss-xl",
    "rounded-ss-2xl",
    "rounded-ss-3xl",
    "rounded-ss-full",
    "rounded-se-none",
    "rounded-se-sm",
    "rounded-se",
    "rounded-se-md",
    "rounded-se-lg",
    "rounded-se-xl",
    "rounded-se-2xl",
    "rounded-se-3xl",
    "rounded-se-full",
    "rounded-ee-none",
    "rounded-ee-sm",
    "rounded-ee",
    "rounded-ee-md",
    "rounded-ee-lg",
    "rounded-ee-xl",
    "rounded-ee-2xl",
    "rounded-ee-3xl",
    "rounded-ee-full",
    "rounded-es-none",
    "rounded-es-sm",
    "rounded-es",
    "rounded-es-md",
    "rounded-es-lg",
    "rounded-es-xl",
    "rounded-es-2xl",
    "rounded-es-3xl",
    "rounded-es-full",
    "rounded-tl-none",
    "rounded-tl-sm",
    "rounded-tl",
    "rounded-tl-md",
    "rounded-tl-lg",
    "rounded-tl-xl",
    "rounded-tl-2xl",
    "rounded-tl-3xl",
    "rounded-tl-full",
    "rounded-tr-none",
    "rounded-tr-sm",
    "rounded-tr",
    "rounded-tr-md",
    "rounded-tr-lg",
    "rounded-tr-xl",
    "rounded-tr-2xl",
    "rounded-tr-3xl",
    "rounded-tr-full",
    "rounded-br-none",
    "rounded-br-sm",
    "rounded-br",
    "rounded-br-md",
    "rounded-br-lg",
    "rounded-br-xl",
    "rounded-br-2xl",
    "rounded-br-3xl",
    "rounded-br-full",
    "rounded-bl-none",
    "rounded-bl-sm",
    "rounded-bl",
    "rounded-bl-md",
    "rounded-bl-lg",
    "rounded-bl-xl",
    "rounded-bl-2xl",
    "rounded-bl-3xl",
    "rounded-bl-full",
    "rounded-s-*",
    "rounded-e-*",
    "rounded-ss-*",
    "rounded-se-*",
    "rounded-es-*",
    "rounded-ee-*",
    "border-0",
    "border-2",
    "border-4",
    "border-8",
    "border",
    "border-x-0",
    "border-x-2",
    "border-x-4",
    "border-x-8",
    "border-x",
    "border-y-0",
    "border-y-2",
    "border-y-4",
    "border-y-8",
    "border-y",
    "border-s-0",
    "border-s-2",
    "border-s-4",
    "border-s-8",
    "border-s",
    "border-e-0",
    "border-e-2",
    "border-e-4",
    "border-e-8",
    "border-e",
    "border-t-0",
    "border-t-2",
    "border-t-4",
    "border-t-8",
    "border-t",
    "border-r-0",
    "border-r-2",
    "border-r-4",
    "border-r-8",
    "border-r",
    "border-b-0",
    "border-b-2",
    "border-b-4",
    "border-b-8",
    "border-b",
    "border-l-0",
    "border-l-2",
    "border-l-4",
    "border-l-8",
    "border-l",
    "border-inherit",
    "border-current",
    "border-transparent",
    "border-black",
    "border-white",
    "border-slate-50",
    "border-slate-100",
    "border-slate-200",
    "border-slate-300",
    "border-slate-400",
    "border-slate-500",
    "border-slate-600",
    "border-slate-700",
    "border-slate-800",
    "border-slate-900",
    "border-slate-950",
    "border-gray-50",
    "border-gray-100",
    "border-gray-200",
    "border-gray-300",
    "border-gray-400",
    "border-gray-500",
    "border-gray-600",
    "border-gray-700",
    "border-gray-800",
    "border-gray-900",
    "border-gray-950",
    "border-zinc-50",
    "border-zinc-100",
    "border-zinc-200",
    "border-zinc-300",
    "border-zinc-400",
    "border-zinc-500",
    "border-zinc-600",
    "border-zinc-700",
    "border-zinc-800",
    "border-zinc-900",
    "border-zinc-950",
    "border-neutral-50",
    "border-neutral-100",
    "border-neutral-200",
    "border-neutral-300",
    "border-neutral-400",
    "border-neutral-500",
    "border-neutral-600",
    "border-neutral-700",
    "border-neutral-800",
    "border-neutral-900",
    "border-neutral-950",
    "border-stone-50",
    "border-stone-100",
    "border-stone-200",
    "border-stone-300",
    "border-stone-400",
    "border-stone-500",
    "border-stone-600",
    "border-stone-700",
    "border-stone-800",
    "border-stone-900",
    "border-stone-950",
    "border-red-50",
    "border-red-100",
    "border-red-200",
    "border-red-300",
    "border-red-400",
    "border-red-500",
    "border-red-600",
    "border-red-700",
    "border-red-800",
    "border-red-900",
    "border-red-950",
    "border-orange-50",
    "border-orange-100",
    "border-orange-200",
    "border-orange-300",
    "border-orange-400",
    "border-orange-500",
    "border-orange-600",
    "border-orange-700",
    "border-orange-800",
    "border-orange-900",
    "border-orange-950",
    "border-amber-50",
    "border-amber-100",
    "border-amber-200",
    "border-amber-300",
    "border-amber-400",
    "border-amber-500",
    "border-amber-600",
    "border-amber-700",
    "border-amber-800",
    "border-amber-900",
    "border-amber-950",
    "border-yellow-50",
    "border-yellow-100",
    "border-yellow-200",
    "border-yellow-300",
    "border-yellow-400",
    "border-yellow-500",
    "border-yellow-600",
    "border-yellow-700",
    "border-yellow-800",
    "border-yellow-900",
    "border-yellow-950",
    "border-lime-50",
    "border-lime-100",
    "border-lime-200",
    "border-lime-300",
    "border-lime-400",
    "border-lime-500",
    "border-lime-600",
    "border-lime-700",
    "border-lime-800",
    "border-lime-900",
    "border-lime-950",
    "border-green-50",
    "border-green-100",
    "border-green-200",
    "border-green-300",
    "border-green-400",
    "border-green-500",
    "border-green-600",
    "border-green-700",
    "border-green-800",
    "border-green-900",
    "border-green-950",
    "border-emerald-50",
    "border-emerald-100",
    "border-emerald-200",
    "border-emerald-300",
    "border-emerald-400",
    "border-emerald-500",
    "border-emerald-600",
    "border-emerald-700",
    "border-emerald-800",
    "border-emerald-900",
    "border-emerald-950",
    "border-teal-50",
    "border-teal-100",
    "border-teal-200",
    "border-teal-300",
    "border-teal-400",
    "border-teal-500",
    "border-teal-600",
    "border-teal-700",
    "border-teal-800",
    "border-teal-900",
    "border-teal-950",
    "border-cyan-50",
    "border-cyan-100",
    "border-cyan-200",
    "border-cyan-300",
    "border-cyan-400",
    "border-cyan-500",
    "border-cyan-600",
    "border-cyan-700",
    "border-cyan-800",
    "border-cyan-900",
    "border-cyan-950",
    "border-sky-50",
    "border-sky-100",
    "border-sky-200",
    "border-sky-300",
    "border-sky-400",
    "border-sky-500",
    "border-sky-600",
    "border-sky-700",
    "border-sky-800",
    "border-sky-900",
    "border-sky-950",
    "border-blue-50",
    "border-blue-100",
    "border-blue-200",
    "border-blue-300",
    "border-blue-400",
    "border-blue-500",
    "border-blue-600",
    "border-blue-700",
    "border-blue-800",
    "border-blue-900",
    "border-blue-950",
    "border-indigo-50",
    "border-indigo-100",
    "border-indigo-200",
    "border-indigo-300",
    "border-indigo-400",
    "border-indigo-500",
    "border-indigo-600",
    "border-indigo-700",
    "border-indigo-800",
    "border-indigo-900",
    "border-indigo-950",
    "border-violet-50",
    "border-violet-100",
    "border-violet-200",
    "border-violet-300",
    "border-violet-400",
    "border-violet-500",
    "border-violet-600",
    "border-violet-700",
    "border-violet-800",
    "border-violet-900",
    "border-violet-950",
    "border-purple-50",
    "border-purple-100",
    "border-purple-200",
    "border-purple-300",
    "border-purple-400",
    "border-purple-500",
    "border-purple-600",
    "border-purple-700",
    "border-purple-800",
    "border-purple-900",
    "border-purple-950",
    "border-fuchsia-50",
    "border-fuchsia-100",
    "border-fuchsia-200",
    "border-fuchsia-300",
    "border-fuchsia-400",
    "border-fuchsia-500",
    "border-fuchsia-600",
    "border-fuchsia-700",
    "border-fuchsia-800",
    "border-fuchsia-900",
    "border-fuchsia-950",
    "border-pink-50",
    "border-pink-100",
    "border-pink-200",
    "border-pink-300",
    "border-pink-400",
    "border-pink-500",
    "border-pink-600",
    "border-pink-700",
    "border-pink-800",
    "border-pink-900",
    "border-pink-950",
    "border-rose-50",
    "border-rose-100",
    "border-rose-200",
    "border-rose-300",
    "border-rose-400",
    "border-rose-500",
    "border-rose-600",
    "border-rose-700",
    "border-rose-800",
    "border-rose-900",
    "border-rose-950",
    "border-x-inherit",
    "border-x-current",
    "border-x-transparent",
    "border-x-black",
    "border-x-white",
    "border-x-slate-50",
    "border-x-slate-100",
    "border-x-slate-200",
    "border-x-slate-300",
    "border-x-slate-400",
    "border-x-slate-500",
    "border-x-slate-600",
    "border-x-slate-700",
    "border-x-slate-800",
    "border-x-slate-900",
    "border-x-slate-950",
    "border-x-gray-50",
    "border-x-gray-100",
    "border-x-gray-200",
    "border-x-gray-300",
    "border-x-gray-400",
    "border-x-gray-500",
    "border-x-gray-600",
    "border-x-gray-700",
    "border-x-gray-800",
    "border-x-gray-900",
    "border-x-gray-950",
    "border-x-zinc-50",
    "border-x-zinc-100",
    "border-x-zinc-200",
    "border-x-zinc-300",
    "border-x-zinc-400",
    "border-x-zinc-500",
    "border-x-zinc-600",
    "border-x-zinc-700",
    "border-x-zinc-800",
    "border-x-zinc-900",
    "border-x-zinc-950",
    "border-x-neutral-50",
    "border-x-neutral-100",
    "border-x-neutral-200",
    "border-x-neutral-300",
    "border-x-neutral-400",
    "border-x-neutral-500",
    "border-x-neutral-600",
    "border-x-neutral-700",
    "border-x-neutral-800",
    "border-x-neutral-900",
    "border-x-neutral-950",
    "border-x-stone-50",
    "border-x-stone-100",
    "border-x-stone-200",
    "border-x-stone-300",
    "border-x-stone-400",
    "border-x-stone-500",
    "border-x-stone-600",
    "border-x-stone-700",
    "border-x-stone-800",
    "border-x-stone-900",
    "border-x-stone-950",
    "border-x-red-50",
    "border-x-red-100",
    "border-x-red-200",
    "border-x-red-300",
    "border-x-red-400",
    "border-x-red-500",
    "border-x-red-600",
    "border-x-red-700",
    "border-x-red-800",
    "border-x-red-900",
    "border-x-red-950",
    "border-x-orange-50",
    "border-x-orange-100",
    "border-x-orange-200",
    "border-x-orange-300",
    "border-x-orange-400",
    "border-x-orange-500",
    "border-x-orange-600",
    "border-x-orange-700",
    "border-x-orange-800",
    "border-x-orange-900",
    "border-x-orange-950",
    "border-x-amber-50",
    "border-x-amber-100",
    "border-x-amber-200",
    "border-x-amber-300",
    "border-x-amber-400",
    "border-x-amber-500",
    "border-x-amber-600",
    "border-x-amber-700",
    "border-x-amber-800",
    "border-x-amber-900",
    "border-x-amber-950",
    "border-x-yellow-50",
    "border-x-yellow-100",
    "border-x-yellow-200",
    "border-x-yellow-300",
    "border-x-yellow-400",
    "border-x-yellow-500",
    "border-x-yellow-600",
    "border-x-yellow-700",
    "border-x-yellow-800",
    "border-x-yellow-900",
    "border-x-yellow-950",
    "border-x-lime-50",
    "border-x-lime-100",
    "border-x-lime-200",
    "border-x-lime-300",
    "border-x-lime-400",
    "border-x-lime-500",
    "border-x-lime-600",
    "border-x-lime-700",
    "border-x-lime-800",
    "border-x-lime-900",
    "border-x-lime-950",
    "border-x-green-50",
    "border-x-green-100",
    "border-x-green-200",
    "border-x-green-300",
    "border-x-green-400",
    "border-x-green-500",
    "border-x-green-600",
    "border-x-green-700",
    "border-x-green-800",
    "border-x-green-900",
    "border-x-green-950",
    "border-x-emerald-50",
    "border-x-emerald-100",
    "border-x-emerald-200",
    "border-x-emerald-300",
    "border-x-emerald-400",
    "border-x-emerald-500",
    "border-x-emerald-600",
    "border-x-emerald-700",
    "border-x-emerald-800",
    "border-x-emerald-900",
    "border-x-emerald-950",
    "border-x-teal-50",
    "border-x-teal-100",
    "border-x-teal-200",
    "border-x-teal-300",
    "border-x-teal-400",
    "border-x-teal-500",
    "border-x-teal-600",
    "border-x-teal-700",
    "border-x-teal-800",
    "border-x-teal-900",
    "border-x-teal-950",
    "border-x-cyan-50",
    "border-x-cyan-100",
    "border-x-cyan-200",
    "border-x-cyan-300",
    "border-x-cyan-400",
    "border-x-cyan-500",
    "border-x-cyan-600",
    "border-x-cyan-700",
    "border-x-cyan-800",
    "border-x-cyan-900",
    "border-x-cyan-950",
    "border-x-sky-50",
    "border-x-sky-100",
    "border-x-sky-200",
    "border-x-sky-300",
    "border-x-sky-400",
    "border-x-sky-500",
    "border-x-sky-600",
    "border-x-sky-700",
    "border-x-sky-800",
    "border-x-sky-900",
    "border-x-sky-950",
    "border-x-blue-50",
    "border-x-blue-100",
    "border-x-blue-200",
    "border-x-blue-300",
    "border-x-blue-400",
    "border-x-blue-500",
    "border-x-blue-600",
    "border-x-blue-700",
    "border-x-blue-800",
    "border-x-blue-900",
    "border-x-blue-950",
    "border-x-indigo-50",
    "border-x-indigo-100",
    "border-x-indigo-200",
    "border-x-indigo-300",
    "border-x-indigo-400",
    "border-x-indigo-500",
    "border-x-indigo-600",
    "border-x-indigo-700",
    "border-x-indigo-800",
    "border-x-indigo-900",
    "border-x-indigo-950",
    "border-x-violet-50",
    "border-x-violet-100",
    "border-x-violet-200",
    "border-x-violet-300",
    "border-x-violet-400",
    "border-x-violet-500",
    "border-x-violet-600",
    "border-x-violet-700",
    "border-x-violet-800",
    "border-x-violet-900",
    "border-x-violet-950",
    "border-x-purple-50",
    "border-x-purple-100",
    "border-x-purple-200",
    "border-x-purple-300",
    "border-x-purple-400",
    "border-x-purple-500",
    "border-x-purple-600",
    "border-x-purple-700",
    "border-x-purple-800",
    "border-x-purple-900",
    "border-x-purple-950",
    "border-x-fuchsia-50",
    "border-x-fuchsia-100",
    "border-x-fuchsia-200",
    "border-x-fuchsia-300",
    "border-x-fuchsia-400",
    "border-x-fuchsia-500",
    "border-x-fuchsia-600",
    "border-x-fuchsia-700",
    "border-x-fuchsia-800",
    "border-x-fuchsia-900",
    "border-x-fuchsia-950",
    "border-x-pink-50",
    "border-x-pink-100",
    "border-x-pink-200",
    "border-x-pink-300",
    "border-x-pink-400",
    "border-x-pink-500",
    "border-x-pink-600",
    "border-x-pink-700",
    "border-x-pink-800",
    "border-x-pink-900",
    "border-x-pink-950",
    "border-x-rose-50",
    "border-x-rose-100",
    "border-x-rose-200",
    "border-x-rose-300",
    "border-x-rose-400",
    "border-x-rose-500",
    "border-x-rose-600",
    "border-x-rose-700",
    "border-x-rose-800",
    "border-x-rose-900",
    "border-x-rose-950",
    "border-y-inherit",
    "border-y-current",
    "border-y-transparent",
    "border-y-black",
    "border-y-white",
    "border-y-slate-50",
    "border-y-slate-100",
    "border-y-slate-200",
    "border-y-slate-300",
    "border-y-slate-400",
    "border-y-slate-500",
    "border-y-slate-600",
    "border-y-slate-700",
    "border-y-slate-800",
    "border-y-slate-900",
    "border-y-slate-950",
    "border-y-gray-50",
    "border-y-gray-100",
    "border-y-gray-200",
    "border-y-gray-300",
    "border-y-gray-400",
    "border-y-gray-500",
    "border-y-gray-600",
    "border-y-gray-700",
    "border-y-gray-800",
    "border-y-gray-900",
    "border-y-gray-950",
    "border-y-zinc-50",
    "border-y-zinc-100",
    "border-y-zinc-200",
    "border-y-zinc-300",
    "border-y-zinc-400",
    "border-y-zinc-500",
    "border-y-zinc-600",
    "border-y-zinc-700",
    "border-y-zinc-800",
    "border-y-zinc-900",
    "border-y-zinc-950",
    "border-y-neutral-50",
    "border-y-neutral-100",
    "border-y-neutral-200",
    "border-y-neutral-300",
    "border-y-neutral-400",
    "border-y-neutral-500",
    "border-y-neutral-600",
    "border-y-neutral-700",
    "border-y-neutral-800",
    "border-y-neutral-900",
    "border-y-neutral-950",
    "border-y-stone-50",
    "border-y-stone-100",
    "border-y-stone-200",
    "border-y-stone-300",
    "border-y-stone-400",
    "border-y-stone-500",
    "border-y-stone-600",
    "border-y-stone-700",
    "border-y-stone-800",
    "border-y-stone-900",
    "border-y-stone-950",
    "border-y-red-50",
    "border-y-red-100",
    "border-y-red-200",
    "border-y-red-300",
    "border-y-red-400",
    "border-y-red-500",
    "border-y-red-600",
    "border-y-red-700",
    "border-y-red-800",
    "border-y-red-900",
    "border-y-red-950",
    "border-y-orange-50",
    "border-y-orange-100",
    "border-y-orange-200",
    "border-y-orange-300",
    "border-y-orange-400",
    "border-y-orange-500",
    "border-y-orange-600",
    "border-y-orange-700",
    "border-y-orange-800",
    "border-y-orange-900",
    "border-y-orange-950",
    "border-y-amber-50",
    "border-y-amber-100",
    "border-y-amber-200",
    "border-y-amber-300",
    "border-y-amber-400",
    "border-y-amber-500",
    "border-y-amber-600",
    "border-y-amber-700",
    "border-y-amber-800",
    "border-y-amber-900",
    "border-y-amber-950",
    "border-y-yellow-50",
    "border-y-yellow-100",
    "border-y-yellow-200",
    "border-y-yellow-300",
    "border-y-yellow-400",
    "border-y-yellow-500",
    "border-y-yellow-600",
    "border-y-yellow-700",
    "border-y-yellow-800",
    "border-y-yellow-900",
    "border-y-yellow-950",
    "border-y-lime-50",
    "border-y-lime-100",
    "border-y-lime-200",
    "border-y-lime-300",
    "border-y-lime-400",
    "border-y-lime-500",
    "border-y-lime-600",
    "border-y-lime-700",
    "border-y-lime-800",
    "border-y-lime-900",
    "border-y-lime-950",
    "border-y-green-50",
    "border-y-green-100",
    "border-y-green-200",
    "border-y-green-300",
    "border-y-green-400",
    "border-y-green-500",
    "border-y-green-600",
    "border-y-green-700",
    "border-y-green-800",
    "border-y-green-900",
    "border-y-green-950",
    "border-y-emerald-50",
    "border-y-emerald-100",
    "border-y-emerald-200",
    "border-y-emerald-300",
    "border-y-emerald-400",
    "border-y-emerald-500",
    "border-y-emerald-600",
    "border-y-emerald-700",
    "border-y-emerald-800",
    "border-y-emerald-900",
    "border-y-emerald-950",
    "border-y-teal-50",
    "border-y-teal-100",
    "border-y-teal-200",
    "border-y-teal-300",
    "border-y-teal-400",
    "border-y-teal-500",
    "border-y-teal-600",
    "border-y-teal-700",
    "border-y-teal-800",
    "border-y-teal-900",
    "border-y-teal-950",
    "border-y-cyan-50",
    "border-y-cyan-100",
    "border-y-cyan-200",
    "border-y-cyan-300",
    "border-y-cyan-400",
    "border-y-cyan-500",
    "border-y-cyan-600",
    "border-y-cyan-700",
    "border-y-cyan-800",
    "border-y-cyan-900",
    "border-y-cyan-950",
    "border-y-sky-50",
    "border-y-sky-100",
    "border-y-sky-200",
    "border-y-sky-300",
    "border-y-sky-400",
    "border-y-sky-500",
    "border-y-sky-600",
    "border-y-sky-700",
    "border-y-sky-800",
    "border-y-sky-900",
    "border-y-sky-950",
    "border-y-blue-50",
    "border-y-blue-100",
    "border-y-blue-200",
    "border-y-blue-300",
    "border-y-blue-400",
    "border-y-blue-500",
    "border-y-blue-600",
    "border-y-blue-700",
    "border-y-blue-800",
    "border-y-blue-900",
    "border-y-blue-950",
    "border-y-indigo-50",
    "border-y-indigo-100",
    "border-y-indigo-200",
    "border-y-indigo-300",
    "border-y-indigo-400",
    "border-y-indigo-500",
    "border-y-indigo-600",
    "border-y-indigo-700",
    "border-y-indigo-800",
    "border-y-indigo-900",
    "border-y-indigo-950",
    "border-y-violet-50",
    "border-y-violet-100",
    "border-y-violet-200",
    "border-y-violet-300",
    "border-y-violet-400",
    "border-y-violet-500",
    "border-y-violet-600",
    "border-y-violet-700",
    "border-y-violet-800",
    "border-y-violet-900",
    "border-y-violet-950",
    "border-y-purple-50",
    "border-y-purple-100",
    "border-y-purple-200",
    "border-y-purple-300",
    "border-y-purple-400",
    "border-y-purple-500",
    "border-y-purple-600",
    "border-y-purple-700",
    "border-y-purple-800",
    "border-y-purple-900",
    "border-y-purple-950",
    "border-y-fuchsia-50",
    "border-y-fuchsia-100",
    "border-y-fuchsia-200",
    "border-y-fuchsia-300",
    "border-y-fuchsia-400",
    "border-y-fuchsia-500",
    "border-y-fuchsia-600",
    "border-y-fuchsia-700",
    "border-y-fuchsia-800",
    "border-y-fuchsia-900",
    "border-y-fuchsia-950",
    "border-y-pink-50",
    "border-y-pink-100",
    "border-y-pink-200",
    "border-y-pink-300",
    "border-y-pink-400",
    "border-y-pink-500",
    "border-y-pink-600",
    "border-y-pink-700",
    "border-y-pink-800",
    "border-y-pink-900",
    "border-y-pink-950",
    "border-y-rose-50",
    "border-y-rose-100",
    "border-y-rose-200",
    "border-y-rose-300",
    "border-y-rose-400",
    "border-y-rose-500",
    "border-y-rose-600",
    "border-y-rose-700",
    "border-y-rose-800",
    "border-y-rose-900",
    "border-y-rose-950",
    "border-s-inherit",
    "border-s-current",
    "border-s-transparent",
    "border-s-black",
    "border-s-white",
    "border-s-slate-50",
    "border-s-slate-100",
    "border-s-slate-200",
    "border-s-slate-300",
    "border-s-slate-400",
    "border-s-slate-500",
    "border-s-slate-600",
    "border-s-slate-700",
    "border-s-slate-800",
    "border-s-slate-900",
    "border-s-slate-950",
    "border-s-gray-50",
    "border-s-gray-100",
    "border-s-gray-200",
    "border-s-gray-300",
    "border-s-gray-400",
    "border-s-gray-500",
    "border-s-gray-600",
    "border-s-gray-700",
    "border-s-gray-800",
    "border-s-gray-900",
    "border-s-gray-950",
    "border-s-zinc-50",
    "border-s-zinc-100",
    "border-s-zinc-200",
    "border-s-zinc-300",
    "border-s-zinc-400",
    "border-s-zinc-500",
    "border-s-zinc-600",
    "border-s-zinc-700",
    "border-s-zinc-800",
    "border-s-zinc-900",
    "border-s-zinc-950",
    "border-s-neutral-50",
    "border-s-neutral-100",
    "border-s-neutral-200",
    "border-s-neutral-300",
    "border-s-neutral-400",
    "border-s-neutral-500",
    "border-s-neutral-600",
    "border-s-neutral-700",
    "border-s-neutral-800",
    "border-s-neutral-900",
    "border-s-neutral-950",
    "border-s-stone-50",
    "border-s-stone-100",
    "border-s-stone-200",
    "border-s-stone-300",
    "border-s-stone-400",
    "border-s-stone-500",
    "border-s-stone-600",
    "border-s-stone-700",
    "border-s-stone-800",
    "border-s-stone-900",
    "border-s-stone-950",
    "border-s-red-50",
    "border-s-red-100",
    "border-s-red-200",
    "border-s-red-300",
    "border-s-red-400",
    "border-s-red-500",
    "border-s-red-600",
    "border-s-red-700",
    "border-s-red-800",
    "border-s-red-900",
    "border-s-red-950",
    "border-s-orange-50",
    "border-s-orange-100",
    "border-s-orange-200",
    "border-s-orange-300",
    "border-s-orange-400",
    "border-s-orange-500",
    "border-s-orange-600",
    "border-s-orange-700",
    "border-s-orange-800",
    "border-s-orange-900",
    "border-s-orange-950",
    "border-s-amber-50",
    "border-s-amber-100",
    "border-s-amber-200",
    "border-s-amber-300",
    "border-s-amber-400",
    "border-s-amber-500",
    "border-s-amber-600",
    "border-s-amber-700",
    "border-s-amber-800",
    "border-s-amber-900",
    "border-s-amber-950",
    "border-s-yellow-50",
    "border-s-yellow-100",
    "border-s-yellow-200",
    "border-s-yellow-300",
    "border-s-yellow-400",
    "border-s-yellow-500",
    "border-s-yellow-600",
    "border-s-yellow-700",
    "border-s-yellow-800",
    "border-s-yellow-900",
    "border-s-yellow-950",
    "border-s-lime-50",
    "border-s-lime-100",
    "border-s-lime-200",
    "border-s-lime-300",
    "border-s-lime-400",
    "border-s-lime-500",
    "border-s-lime-600",
    "border-s-lime-700",
    "border-s-lime-800",
    "border-s-lime-900",
    "border-s-lime-950",
    "border-s-green-50",
    "border-s-green-100",
    "border-s-green-200",
    "border-s-green-300",
    "border-s-green-400",
    "border-s-green-500",
    "border-s-green-600",
    "border-s-green-700",
    "border-s-green-800",
    "border-s-green-900",
    "border-s-green-950",
    "border-s-emerald-50",
    "border-s-emerald-100",
    "border-s-emerald-200",
    "border-s-emerald-300",
    "border-s-emerald-400",
    "border-s-emerald-500",
    "border-s-emerald-600",
    "border-s-emerald-700",
    "border-s-emerald-800",
    "border-s-emerald-900",
    "border-s-emerald-950",
    "border-s-teal-50",
    "border-s-teal-100",
    "border-s-teal-200",
    "border-s-teal-300",
    "border-s-teal-400",
    "border-s-teal-500",
    "border-s-teal-600",
    "border-s-teal-700",
    "border-s-teal-800",
    "border-s-teal-900",
    "border-s-teal-950",
    "border-s-cyan-50",
    "border-s-cyan-100",
    "border-s-cyan-200",
    "border-s-cyan-300",
    "border-s-cyan-400",
    "border-s-cyan-500",
    "border-s-cyan-600",
    "border-s-cyan-700",
    "border-s-cyan-800",
    "border-s-cyan-900",
    "border-s-cyan-950",
    "border-s-sky-50",
    "border-s-sky-100",
    "border-s-sky-200",
    "border-s-sky-300",
    "border-s-sky-400",
    "border-s-sky-500",
    "border-s-sky-600",
    "border-s-sky-700",
    "border-s-sky-800",
    "border-s-sky-900",
    "border-s-sky-950",
    "border-s-blue-50",
    "border-s-blue-100",
    "border-s-blue-200",
    "border-s-blue-300",
    "border-s-blue-400",
    "border-s-blue-500",
    "border-s-blue-600",
    "border-s-blue-700",
    "border-s-blue-800",
    "border-s-blue-900",
    "border-s-blue-950",
    "border-s-indigo-50",
    "border-s-indigo-100",
    "border-s-indigo-200",
    "border-s-indigo-300",
    "border-s-indigo-400",
    "border-s-indigo-500",
    "border-s-indigo-600",
    "border-s-indigo-700",
    "border-s-indigo-800",
    "border-s-indigo-900",
    "border-s-indigo-950",
    "border-s-violet-50",
    "border-s-violet-100",
    "border-s-violet-200",
    "border-s-violet-300",
    "border-s-violet-400",
    "border-s-violet-500",
    "border-s-violet-600",
    "border-s-violet-700",
    "border-s-violet-800",
    "border-s-violet-900",
    "border-s-violet-950",
    "border-s-purple-50",
    "border-s-purple-100",
    "border-s-purple-200",
    "border-s-purple-300",
    "border-s-purple-400",
    "border-s-purple-500",
    "border-s-purple-600",
    "border-s-purple-700",
    "border-s-purple-800",
    "border-s-purple-900",
    "border-s-purple-950",
    "border-s-fuchsia-50",
    "border-s-fuchsia-100",
    "border-s-fuchsia-200",
    "border-s-fuchsia-300",
    "border-s-fuchsia-400",
    "border-s-fuchsia-500",
    "border-s-fuchsia-600",
    "border-s-fuchsia-700",
    "border-s-fuchsia-800",
    "border-s-fuchsia-900",
    "border-s-fuchsia-950",
    "border-s-pink-50",
    "border-s-pink-100",
    "border-s-pink-200",
    "border-s-pink-300",
    "border-s-pink-400",
    "border-s-pink-500",
    "border-s-pink-600",
    "border-s-pink-700",
    "border-s-pink-800",
    "border-s-pink-900",
    "border-s-pink-950",
    "border-s-rose-50",
    "border-s-rose-100",
    "border-s-rose-200",
    "border-s-rose-300",
    "border-s-rose-400",
    "border-s-rose-500",
    "border-s-rose-600",
    "border-s-rose-700",
    "border-s-rose-800",
    "border-s-rose-900",
    "border-s-rose-950",
    "border-e-inherit",
    "border-e-current",
    "border-e-transparent",
    "border-e-black",
    "border-e-white",
    "border-e-slate-50",
    "border-e-slate-100",
    "border-e-slate-200",
    "border-e-slate-300",
    "border-e-slate-400",
    "border-e-slate-500",
    "border-e-slate-600",
    "border-e-slate-700",
    "border-e-slate-800",
    "border-e-slate-900",
    "border-e-slate-950",
    "border-e-gray-50",
    "border-e-gray-100",
    "border-e-gray-200",
    "border-e-gray-300",
    "border-e-gray-400",
    "border-e-gray-500",
    "border-e-gray-600",
    "border-e-gray-700",
    "border-e-gray-800",
    "border-e-gray-900",
    "border-e-gray-950",
    "border-e-zinc-50",
    "border-e-zinc-100",
    "border-e-zinc-200",
    "border-e-zinc-300",
    "border-e-zinc-400",
    "border-e-zinc-500",
    "border-e-zinc-600",
    "border-e-zinc-700",
    "border-e-zinc-800",
    "border-e-zinc-900",
    "border-e-zinc-950",
    "border-e-neutral-50",
    "border-e-neutral-100",
    "border-e-neutral-200",
    "border-e-neutral-300",
    "border-e-neutral-400",
    "border-e-neutral-500",
    "border-e-neutral-600",
    "border-e-neutral-700",
    "border-e-neutral-800",
    "border-e-neutral-900",
    "border-e-neutral-950",
    "border-e-stone-50",
    "border-e-stone-100",
    "border-e-stone-200",
    "border-e-stone-300",
    "border-e-stone-400",
    "border-e-stone-500",
    "border-e-stone-600",
    "border-e-stone-700",
    "border-e-stone-800",
    "border-e-stone-900",
    "border-e-stone-950",
    "border-e-red-50",
    "border-e-red-100",
    "border-e-red-200",
    "border-e-red-300",
    "border-e-red-400",
    "border-e-red-500",
    "border-e-red-600",
    "border-e-red-700",
    "border-e-red-800",
    "border-e-red-900",
    "border-e-red-950",
    "border-e-orange-50",
    "border-e-orange-100",
    "border-e-orange-200",
    "border-e-orange-300",
    "border-e-orange-400",
    "border-e-orange-500",
    "border-e-orange-600",
    "border-e-orange-700",
    "border-e-orange-800",
    "border-e-orange-900",
    "border-e-orange-950",
    "border-e-amber-50",
    "border-e-amber-100",
    "border-e-amber-200",
    "border-e-amber-300",
    "border-e-amber-400",
    "border-e-amber-500",
    "border-e-amber-600",
    "border-e-amber-700",
    "border-e-amber-800",
    "border-e-amber-900",
    "border-e-amber-950",
    "border-e-yellow-50",
    "border-e-yellow-100",
    "border-e-yellow-200",
    "border-e-yellow-300",
    "border-e-yellow-400",
    "border-e-yellow-500",
    "border-e-yellow-600",
    "border-e-yellow-700",
    "border-e-yellow-800",
    "border-e-yellow-900",
    "border-e-yellow-950",
    "border-e-lime-50",
    "border-e-lime-100",
    "border-e-lime-200",
    "border-e-lime-300",
    "border-e-lime-400",
    "border-e-lime-500",
    "border-e-lime-600",
    "border-e-lime-700",
    "border-e-lime-800",
    "border-e-lime-900",
    "border-e-lime-950",
    "border-e-green-50",
    "border-e-green-100",
    "border-e-green-200",
    "border-e-green-300",
    "border-e-green-400",
    "border-e-green-500",
    "border-e-green-600",
    "border-e-green-700",
    "border-e-green-800",
    "border-e-green-900",
    "border-e-green-950",
    "border-e-emerald-50",
    "border-e-emerald-100",
    "border-e-emerald-200",
    "border-e-emerald-300",
    "border-e-emerald-400",
    "border-e-emerald-500",
    "border-e-emerald-600",
    "border-e-emerald-700",
    "border-e-emerald-800",
    "border-e-emerald-900",
    "border-e-emerald-950",
    "border-e-teal-50",
    "border-e-teal-100",
    "border-e-teal-200",
    "border-e-teal-300",
    "border-e-teal-400",
    "border-e-teal-500",
    "border-e-teal-600",
    "border-e-teal-700",
    "border-e-teal-800",
    "border-e-teal-900",
    "border-e-teal-950",
    "border-e-cyan-50",
    "border-e-cyan-100",
    "border-e-cyan-200",
    "border-e-cyan-300",
    "border-e-cyan-400",
    "border-e-cyan-500",
    "border-e-cyan-600",
    "border-e-cyan-700",
    "border-e-cyan-800",
    "border-e-cyan-900",
    "border-e-cyan-950",
    "border-e-sky-50",
    "border-e-sky-100",
    "border-e-sky-200",
    "border-e-sky-300",
    "border-e-sky-400",
    "border-e-sky-500",
    "border-e-sky-600",
    "border-e-sky-700",
    "border-e-sky-800",
    "border-e-sky-900",
    "border-e-sky-950",
    "border-e-blue-50",
    "border-e-blue-100",
    "border-e-blue-200",
    "border-e-blue-300",
    "border-e-blue-400",
    "border-e-blue-500",
    "border-e-blue-600",
    "border-e-blue-700",
    "border-e-blue-800",
    "border-e-blue-900",
    "border-e-blue-950",
    "border-e-indigo-50",
    "border-e-indigo-100",
    "border-e-indigo-200",
    "border-e-indigo-300",
    "border-e-indigo-400",
    "border-e-indigo-500",
    "border-e-indigo-600",
    "border-e-indigo-700",
    "border-e-indigo-800",
    "border-e-indigo-900",
    "border-e-indigo-950",
    "border-e-violet-50",
    "border-e-violet-100",
    "border-e-violet-200",
    "border-e-violet-300",
    "border-e-violet-400",
    "border-e-violet-500",
    "border-e-violet-600",
    "border-e-violet-700",
    "border-e-violet-800",
    "border-e-violet-900",
    "border-e-violet-950",
    "border-e-purple-50",
    "border-e-purple-100",
    "border-e-purple-200",
    "border-e-purple-300",
    "border-e-purple-400",
    "border-e-purple-500",
    "border-e-purple-600",
    "border-e-purple-700",
    "border-e-purple-800",
    "border-e-purple-900",
    "border-e-purple-950",
    "border-e-fuchsia-50",
    "border-e-fuchsia-100",
    "border-e-fuchsia-200",
    "border-e-fuchsia-300",
    "border-e-fuchsia-400",
    "border-e-fuchsia-500",
    "border-e-fuchsia-600",
    "border-e-fuchsia-700",
    "border-e-fuchsia-800",
    "border-e-fuchsia-900",
    "border-e-fuchsia-950",
    "border-e-pink-50",
    "border-e-pink-100",
    "border-e-pink-200",
    "border-e-pink-300",
    "border-e-pink-400",
    "border-e-pink-500",
    "border-e-pink-600",
    "border-e-pink-700",
    "border-e-pink-800",
    "border-e-pink-900",
    "border-e-pink-950",
    "border-e-rose-50",
    "border-e-rose-100",
    "border-e-rose-200",
    "border-e-rose-300",
    "border-e-rose-400",
    "border-e-rose-500",
    "border-e-rose-600",
    "border-e-rose-700",
    "border-e-rose-800",
    "border-e-rose-900",
    "border-e-rose-950",
    "border-t-inherit",
    "border-t-current",
    "border-t-transparent",
    "border-t-black",
    "border-t-white",
    "border-t-slate-50",
    "border-t-slate-100",
    "border-t-slate-200",
    "border-t-slate-300",
    "border-t-slate-400",
    "border-t-slate-500",
    "border-t-slate-600",
    "border-t-slate-700",
    "border-t-slate-800",
    "border-t-slate-900",
    "border-t-slate-950",
    "border-t-gray-50",
    "border-t-gray-100",
    "border-t-gray-200",
    "border-t-gray-300",
    "border-t-gray-400",
    "border-t-gray-500",
    "border-t-gray-600",
    "border-t-gray-700",
    "border-t-gray-800",
    "border-t-gray-900",
    "border-t-gray-950",
    "border-t-zinc-50",
    "border-t-zinc-100",
    "border-t-zinc-200",
    "border-t-zinc-300",
    "border-t-zinc-400",
    "border-t-zinc-500",
    "border-t-zinc-600",
    "border-t-zinc-700",
    "border-t-zinc-800",
    "border-t-zinc-900",
    "border-t-zinc-950",
    "border-t-neutral-50",
    "border-t-neutral-100",
    "border-t-neutral-200",
    "border-t-neutral-300",
    "border-t-neutral-400",
    "border-t-neutral-500",
    "border-t-neutral-600",
    "border-t-neutral-700",
    "border-t-neutral-800",
    "border-t-neutral-900",
    "border-t-neutral-950",
    "border-t-stone-50",
    "border-t-stone-100",
    "border-t-stone-200",
    "border-t-stone-300",
    "border-t-stone-400",
    "border-t-stone-500",
    "border-t-stone-600",
    "border-t-stone-700",
    "border-t-stone-800",
    "border-t-stone-900",
    "border-t-stone-950",
    "border-t-red-50",
    "border-t-red-100",
    "border-t-red-200",
    "border-t-red-300",
    "border-t-red-400",
    "border-t-red-500",
    "border-t-red-600",
    "border-t-red-700",
    "border-t-red-800",
    "border-t-red-900",
    "border-t-red-950",
    "border-t-orange-50",
    "border-t-orange-100",
    "border-t-orange-200",
    "border-t-orange-300",
    "border-t-orange-400",
    "border-t-orange-500",
    "border-t-orange-600",
    "border-t-orange-700",
    "border-t-orange-800",
    "border-t-orange-900",
    "border-t-orange-950",
    "border-t-amber-50",
    "border-t-amber-100",
    "border-t-amber-200",
    "border-t-amber-300",
    "border-t-amber-400",
    "border-t-amber-500",
    "border-t-amber-600",
    "border-t-amber-700",
    "border-t-amber-800",
    "border-t-amber-900",
    "border-t-amber-950",
    "border-t-yellow-50",
    "border-t-yellow-100",
    "border-t-yellow-200",
    "border-t-yellow-300",
    "border-t-yellow-400",
    "border-t-yellow-500",
    "border-t-yellow-600",
    "border-t-yellow-700",
    "border-t-yellow-800",
    "border-t-yellow-900",
    "border-t-yellow-950",
    "border-t-lime-50",
    "border-t-lime-100",
    "border-t-lime-200",
    "border-t-lime-300",
    "border-t-lime-400",
    "border-t-lime-500",
    "border-t-lime-600",
    "border-t-lime-700",
    "border-t-lime-800",
    "border-t-lime-900",
    "border-t-lime-950",
    "border-t-green-50",
    "border-t-green-100",
    "border-t-green-200",
    "border-t-green-300",
    "border-t-green-400",
    "border-t-green-500",
    "border-t-green-600",
    "border-t-green-700",
    "border-t-green-800",
    "border-t-green-900",
    "border-t-green-950",
    "border-t-emerald-50",
    "border-t-emerald-100",
    "border-t-emerald-200",
    "border-t-emerald-300",
    "border-t-emerald-400",
    "border-t-emerald-500",
    "border-t-emerald-600",
    "border-t-emerald-700",
    "border-t-emerald-800",
    "border-t-emerald-900",
    "border-t-emerald-950",
    "border-t-teal-50",
    "border-t-teal-100",
    "border-t-teal-200",
    "border-t-teal-300",
    "border-t-teal-400",
    "border-t-teal-500",
    "border-t-teal-600",
    "border-t-teal-700",
    "border-t-teal-800",
    "border-t-teal-900",
    "border-t-teal-950",
    "border-t-cyan-50",
    "border-t-cyan-100",
    "border-t-cyan-200",
    "border-t-cyan-300",
    "border-t-cyan-400",
    "border-t-cyan-500",
    "border-t-cyan-600",
    "border-t-cyan-700",
    "border-t-cyan-800",
    "border-t-cyan-900",
    "border-t-cyan-950",
    "border-t-sky-50",
    "border-t-sky-100",
    "border-t-sky-200",
    "border-t-sky-300",
    "border-t-sky-400",
    "border-t-sky-500",
    "border-t-sky-600",
    "border-t-sky-700",
    "border-t-sky-800",
    "border-t-sky-900",
    "border-t-sky-950",
    "border-t-blue-50",
    "border-t-blue-100",
    "border-t-blue-200",
    "border-t-blue-300",
    "border-t-blue-400",
    "border-t-blue-500",
    "border-t-blue-600",
    "border-t-blue-700",
    "border-t-blue-800",
    "border-t-blue-900",
    "border-t-blue-950",
    "border-t-indigo-50",
    "border-t-indigo-100",
    "border-t-indigo-200",
    "border-t-indigo-300",
    "border-t-indigo-400",
    "border-t-indigo-500",
    "border-t-indigo-600",
    "border-t-indigo-700",
    "border-t-indigo-800",
    "border-t-indigo-900",
    "border-t-indigo-950",
    "border-t-violet-50",
    "border-t-violet-100",
    "border-t-violet-200",
    "border-t-violet-300",
    "border-t-violet-400",
    "border-t-violet-500",
    "border-t-violet-600",
    "border-t-violet-700",
    "border-t-violet-800",
    "border-t-violet-900",
    "border-t-violet-950",
    "border-t-purple-50",
    "border-t-purple-100",
    "border-t-purple-200",
    "border-t-purple-300",
    "border-t-purple-400",
    "border-t-purple-500",
    "border-t-purple-600",
    "border-t-purple-700",
    "border-t-purple-800",
    "border-t-purple-900",
    "border-t-purple-950",
    "border-t-fuchsia-50",
    "border-t-fuchsia-100",
    "border-t-fuchsia-200",
    "border-t-fuchsia-300",
    "border-t-fuchsia-400",
    "border-t-fuchsia-500",
    "border-t-fuchsia-600",
    "border-t-fuchsia-700",
    "border-t-fuchsia-800",
    "border-t-fuchsia-900",
    "border-t-fuchsia-950",
    "border-t-pink-50",
    "border-t-pink-100",
    "border-t-pink-200",
    "border-t-pink-300",
    "border-t-pink-400",
    "border-t-pink-500",
    "border-t-pink-600",
    "border-t-pink-700",
    "border-t-pink-800",
    "border-t-pink-900",
    "border-t-pink-950",
    "border-t-rose-50",
    "border-t-rose-100",
    "border-t-rose-200",
    "border-t-rose-300",
    "border-t-rose-400",
    "border-t-rose-500",
    "border-t-rose-600",
    "border-t-rose-700",
    "border-t-rose-800",
    "border-t-rose-900",
    "border-t-rose-950",
    "border-r-inherit",
    "border-r-current",
    "border-r-transparent",
    "border-r-black",
    "border-r-white",
    "border-r-slate-50",
    "border-r-slate-100",
    "border-r-slate-200",
    "border-r-slate-300",
    "border-r-slate-400",
    "border-r-slate-500",
    "border-r-slate-600",
    "border-r-slate-700",
    "border-r-slate-800",
    "border-r-slate-900",
    "border-r-slate-950",
    "border-r-gray-50",
    "border-r-gray-100",
    "border-r-gray-200",
    "border-r-gray-300",
    "border-r-gray-400",
    "border-r-gray-500",
    "border-r-gray-600",
    "border-r-gray-700",
    "border-r-gray-800",
    "border-r-gray-900",
    "border-r-gray-950",
    "border-r-zinc-50",
    "border-r-zinc-100",
    "border-r-zinc-200",
    "border-r-zinc-300",
    "border-r-zinc-400",
    "border-r-zinc-500",
    "border-r-zinc-600",
    "border-r-zinc-700",
    "border-r-zinc-800",
    "border-r-zinc-900",
    "border-r-zinc-950",
    "border-r-neutral-50",
    "border-r-neutral-100",
    "border-r-neutral-200",
    "border-r-neutral-300",
    "border-r-neutral-400",
    "border-r-neutral-500",
    "border-r-neutral-600",
    "border-r-neutral-700",
    "border-r-neutral-800",
    "border-r-neutral-900",
    "border-r-neutral-950",
    "border-r-stone-50",
    "border-r-stone-100",
    "border-r-stone-200",
    "border-r-stone-300",
    "border-r-stone-400",
    "border-r-stone-500",
    "border-r-stone-600",
    "border-r-stone-700",
    "border-r-stone-800",
    "border-r-stone-900",
    "border-r-stone-950",
    "border-r-red-50",
    "border-r-red-100",
    "border-r-red-200",
    "border-r-red-300",
    "border-r-red-400",
    "border-r-red-500",
    "border-r-red-600",
    "border-r-red-700",
    "border-r-red-800",
    "border-r-red-900",
    "border-r-red-950",
    "border-r-orange-50",
    "border-r-orange-100",
    "border-r-orange-200",
    "border-r-orange-300",
    "border-r-orange-400",
    "border-r-orange-500",
    "border-r-orange-600",
    "border-r-orange-700",
    "border-r-orange-800",
    "border-r-orange-900",
    "border-r-orange-950",
    "border-r-amber-50",
    "border-r-amber-100",
    "border-r-amber-200",
    "border-r-amber-300",
    "border-r-amber-400",
    "border-r-amber-500",
    "border-r-amber-600",
    "border-r-amber-700",
    "border-r-amber-800",
    "border-r-amber-900",
    "border-r-amber-950",
    "border-r-yellow-50",
    "border-r-yellow-100",
    "border-r-yellow-200",
    "border-r-yellow-300",
    "border-r-yellow-400",
    "border-r-yellow-500",
    "border-r-yellow-600",
    "border-r-yellow-700",
    "border-r-yellow-800",
    "border-r-yellow-900",
    "border-r-yellow-950",
    "border-r-lime-50",
    "border-r-lime-100",
    "border-r-lime-200",
    "border-r-lime-300",
    "border-r-lime-400",
    "border-r-lime-500",
    "border-r-lime-600",
    "border-r-lime-700",
    "border-r-lime-800",
    "border-r-lime-900",
    "border-r-lime-950",
    "border-r-green-50",
    "border-r-green-100",
    "border-r-green-200",
    "border-r-green-300",
    "border-r-green-400",
    "border-r-green-500",
    "border-r-green-600",
    "border-r-green-700",
    "border-r-green-800",
    "border-r-green-900",
    "border-r-green-950",
    "border-r-emerald-50",
    "border-r-emerald-100",
    "border-r-emerald-200",
    "border-r-emerald-300",
    "border-r-emerald-400",
    "border-r-emerald-500",
    "border-r-emerald-600",
    "border-r-emerald-700",
    "border-r-emerald-800",
    "border-r-emerald-900",
    "border-r-emerald-950",
    "border-r-teal-50",
    "border-r-teal-100",
    "border-r-teal-200",
    "border-r-teal-300",
    "border-r-teal-400",
    "border-r-teal-500",
    "border-r-teal-600",
    "border-r-teal-700",
    "border-r-teal-800",
    "border-r-teal-900",
    "border-r-teal-950",
    "border-r-cyan-50",
    "border-r-cyan-100",
    "border-r-cyan-200",
    "border-r-cyan-300",
    "border-r-cyan-400",
    "border-r-cyan-500",
    "border-r-cyan-600",
    "border-r-cyan-700",
    "border-r-cyan-800",
    "border-r-cyan-900",
    "border-r-cyan-950",
    "border-r-sky-50",
    "border-r-sky-100",
    "border-r-sky-200",
    "border-r-sky-300",
    "border-r-sky-400",
    "border-r-sky-500",
    "border-r-sky-600",
    "border-r-sky-700",
    "border-r-sky-800",
    "border-r-sky-900",
    "border-r-sky-950",
    "border-r-blue-50",
    "border-r-blue-100",
    "border-r-blue-200",
    "border-r-blue-300",
    "border-r-blue-400",
    "border-r-blue-500",
    "border-r-blue-600",
    "border-r-blue-700",
    "border-r-blue-800",
    "border-r-blue-900",
    "border-r-blue-950",
    "border-r-indigo-50",
    "border-r-indigo-100",
    "border-r-indigo-200",
    "border-r-indigo-300",
    "border-r-indigo-400",
    "border-r-indigo-500",
    "border-r-indigo-600",
    "border-r-indigo-700",
    "border-r-indigo-800",
    "border-r-indigo-900",
    "border-r-indigo-950",
    "border-r-violet-50",
    "border-r-violet-100",
    "border-r-violet-200",
    "border-r-violet-300",
    "border-r-violet-400",
    "border-r-violet-500",
    "border-r-violet-600",
    "border-r-violet-700",
    "border-r-violet-800",
    "border-r-violet-900",
    "border-r-violet-950",
    "border-r-purple-50",
    "border-r-purple-100",
    "border-r-purple-200",
    "border-r-purple-300",
    "border-r-purple-400",
    "border-r-purple-500",
    "border-r-purple-600",
    "border-r-purple-700",
    "border-r-purple-800",
    "border-r-purple-900",
    "border-r-purple-950",
    "border-r-fuchsia-50",
    "border-r-fuchsia-100",
    "border-r-fuchsia-200",
    "border-r-fuchsia-300",
    "border-r-fuchsia-400",
    "border-r-fuchsia-500",
    "border-r-fuchsia-600",
    "border-r-fuchsia-700",
    "border-r-fuchsia-800",
    "border-r-fuchsia-900",
    "border-r-fuchsia-950",
    "border-r-pink-50",
    "border-r-pink-100",
    "border-r-pink-200",
    "border-r-pink-300",
    "border-r-pink-400",
    "border-r-pink-500",
    "border-r-pink-600",
    "border-r-pink-700",
    "border-r-pink-800",
    "border-r-pink-900",
    "border-r-pink-950",
    "border-r-rose-50",
    "border-r-rose-100",
    "border-r-rose-200",
    "border-r-rose-300",
    "border-r-rose-400",
    "border-r-rose-500",
    "border-r-rose-600",
    "border-r-rose-700",
    "border-r-rose-800",
    "border-r-rose-900",
    "border-r-rose-950",
    "border-b-inherit",
    "border-b-current",
    "border-b-transparent",
    "border-b-black",
    "border-b-white",
    "border-b-slate-50",
    "border-b-slate-100",
    "border-b-slate-200",
    "border-b-slate-300",
    "border-b-slate-400",
    "border-b-slate-500",
    "border-b-slate-600",
    "border-b-slate-700",
    "border-b-slate-800",
    "border-b-slate-900",
    "border-b-slate-950",
    "border-b-gray-50",
    "border-b-gray-100",
    "border-b-gray-200",
    "border-b-gray-300",
    "border-b-gray-400",
    "border-b-gray-500",
    "border-b-gray-600",
    "border-b-gray-700",
    "border-b-gray-800",
    "border-b-gray-900",
    "border-b-gray-950",
    "border-b-zinc-50",
    "border-b-zinc-100",
    "border-b-zinc-200",
    "border-b-zinc-300",
    "border-b-zinc-400",
    "border-b-zinc-500",
    "border-b-zinc-600",
    "border-b-zinc-700",
    "border-b-zinc-800",
    "border-b-zinc-900",
    "border-b-zinc-950",
    "border-b-neutral-50",
    "border-b-neutral-100",
    "border-b-neutral-200",
    "border-b-neutral-300",
    "border-b-neutral-400",
    "border-b-neutral-500",
    "border-b-neutral-600",
    "border-b-neutral-700",
    "border-b-neutral-800",
    "border-b-neutral-900",
    "border-b-neutral-950",
    "border-b-stone-50",
    "border-b-stone-100",
    "border-b-stone-200",
    "border-b-stone-300",
    "border-b-stone-400",
    "border-b-stone-500",
    "border-b-stone-600",
    "border-b-stone-700",
    "border-b-stone-800",
    "border-b-stone-900",
    "border-b-stone-950",
    "border-b-red-50",
    "border-b-red-100",
    "border-b-red-200",
    "border-b-red-300",
    "border-b-red-400",
    "border-b-red-500",
    "border-b-red-600",
    "border-b-red-700",
    "border-b-red-800",
    "border-b-red-900",
    "border-b-red-950",
    "border-b-orange-50",
    "border-b-orange-100",
    "border-b-orange-200",
    "border-b-orange-300",
    "border-b-orange-400",
    "border-b-orange-500",
    "border-b-orange-600",
    "border-b-orange-700",
    "border-b-orange-800",
    "border-b-orange-900",
    "border-b-orange-950",
    "border-b-amber-50",
    "border-b-amber-100",
    "border-b-amber-200",
    "border-b-amber-300",
    "border-b-amber-400",
    "border-b-amber-500",
    "border-b-amber-600",
    "border-b-amber-700",
    "border-b-amber-800",
    "border-b-amber-900",
    "border-b-amber-950",
    "border-b-yellow-50",
    "border-b-yellow-100",
    "border-b-yellow-200",
    "border-b-yellow-300",
    "border-b-yellow-400",
    "border-b-yellow-500",
    "border-b-yellow-600",
    "border-b-yellow-700",
    "border-b-yellow-800",
    "border-b-yellow-900",
    "border-b-yellow-950",
    "border-b-lime-50",
    "border-b-lime-100",
    "border-b-lime-200",
    "border-b-lime-300",
    "border-b-lime-400",
    "border-b-lime-500",
    "border-b-lime-600",
    "border-b-lime-700",
    "border-b-lime-800",
    "border-b-lime-900",
    "border-b-lime-950",
    "border-b-green-50",
    "border-b-green-100",
    "border-b-green-200",
    "border-b-green-300",
    "border-b-green-400",
    "border-b-green-500",
    "border-b-green-600",
    "border-b-green-700",
    "border-b-green-800",
    "border-b-green-900",
    "border-b-green-950",
    "border-b-emerald-50",
    "border-b-emerald-100",
    "border-b-emerald-200",
    "border-b-emerald-300",
    "border-b-emerald-400",
    "border-b-emerald-500",
    "border-b-emerald-600",
    "border-b-emerald-700",
    "border-b-emerald-800",
    "border-b-emerald-900",
    "border-b-emerald-950",
    "border-b-teal-50",
    "border-b-teal-100",
    "border-b-teal-200",
    "border-b-teal-300",
    "border-b-teal-400",
    "border-b-teal-500",
    "border-b-teal-600",
    "border-b-teal-700",
    "border-b-teal-800",
    "border-b-teal-900",
    "border-b-teal-950",
    "border-b-cyan-50",
    "border-b-cyan-100",
    "border-b-cyan-200",
    "border-b-cyan-300",
    "border-b-cyan-400",
    "border-b-cyan-500",
    "border-b-cyan-600",
    "border-b-cyan-700",
    "border-b-cyan-800",
    "border-b-cyan-900",
    "border-b-cyan-950",
    "border-b-sky-50",
    "border-b-sky-100",
    "border-b-sky-200",
    "border-b-sky-300",
    "border-b-sky-400",
    "border-b-sky-500",
    "border-b-sky-600",
    "border-b-sky-700",
    "border-b-sky-800",
    "border-b-sky-900",
    "border-b-sky-950",
    "border-b-blue-50",
    "border-b-blue-100",
    "border-b-blue-200",
    "border-b-blue-300",
    "border-b-blue-400",
    "border-b-blue-500",
    "border-b-blue-600",
    "border-b-blue-700",
    "border-b-blue-800",
    "border-b-blue-900",
    "border-b-blue-950",
    "border-b-indigo-50",
    "border-b-indigo-100",
    "border-b-indigo-200",
    "border-b-indigo-300",
    "border-b-indigo-400",
    "border-b-indigo-500",
    "border-b-indigo-600",
    "border-b-indigo-700",
    "border-b-indigo-800",
    "border-b-indigo-900",
    "border-b-indigo-950",
    "border-b-violet-50",
    "border-b-violet-100",
    "border-b-violet-200",
    "border-b-violet-300",
    "border-b-violet-400",
    "border-b-violet-500",
    "border-b-violet-600",
    "border-b-violet-700",
    "border-b-violet-800",
    "border-b-violet-900",
    "border-b-violet-950",
    "border-b-purple-50",
    "border-b-purple-100",
    "border-b-purple-200",
    "border-b-purple-300",
    "border-b-purple-400",
    "border-b-purple-500",
    "border-b-purple-600",
    "border-b-purple-700",
    "border-b-purple-800",
    "border-b-purple-900",
    "border-b-purple-950",
    "border-b-fuchsia-50",
    "border-b-fuchsia-100",
    "border-b-fuchsia-200",
    "border-b-fuchsia-300",
    "border-b-fuchsia-400",
    "border-b-fuchsia-500",
    "border-b-fuchsia-600",
    "border-b-fuchsia-700",
    "border-b-fuchsia-800",
    "border-b-fuchsia-900",
    "border-b-fuchsia-950",
    "border-b-pink-50",
    "border-b-pink-100",
    "border-b-pink-200",
    "border-b-pink-300",
    "border-b-pink-400",
    "border-b-pink-500",
    "border-b-pink-600",
    "border-b-pink-700",
    "border-b-pink-800",
    "border-b-pink-900",
    "border-b-pink-950",
    "border-b-rose-50",
    "border-b-rose-100",
    "border-b-rose-200",
    "border-b-rose-300",
    "border-b-rose-400",
    "border-b-rose-500",
    "border-b-rose-600",
    "border-b-rose-700",
    "border-b-rose-800",
    "border-b-rose-900",
    "border-b-rose-950",
    "border-l-inherit",
    "border-l-current",
    "border-l-transparent",
    "border-l-black",
    "border-l-white",
    "border-l-slate-50",
    "border-l-slate-100",
    "border-l-slate-200",
    "border-l-slate-300",
    "border-l-slate-400",
    "border-l-slate-500",
    "border-l-slate-600",
    "border-l-slate-700",
    "border-l-slate-800",
    "border-l-slate-900",
    "border-l-slate-950",
    "border-l-gray-50",
    "border-l-gray-100",
    "border-l-gray-200",
    "border-l-gray-300",
    "border-l-gray-400",
    "border-l-gray-500",
    "border-l-gray-600",
    "border-l-gray-700",
    "border-l-gray-800",
    "border-l-gray-900",
    "border-l-gray-950",
    "border-l-zinc-50",
    "border-l-zinc-100",
    "border-l-zinc-200",
    "border-l-zinc-300",
    "border-l-zinc-400",
    "border-l-zinc-500",
    "border-l-zinc-600",
    "border-l-zinc-700",
    "border-l-zinc-800",
    "border-l-zinc-900",
    "border-l-zinc-950",
    "border-l-neutral-50",
    "border-l-neutral-100",
    "border-l-neutral-200",
    "border-l-neutral-300",
    "border-l-neutral-400",
    "border-l-neutral-500",
    "border-l-neutral-600",
    "border-l-neutral-700",
    "border-l-neutral-800",
    "border-l-neutral-900",
    "border-l-neutral-950",
    "border-l-stone-50",
    "border-l-stone-100",
    "border-l-stone-200",
    "border-l-stone-300",
    "border-l-stone-400",
    "border-l-stone-500",
    "border-l-stone-600",
    "border-l-stone-700",
    "border-l-stone-800",
    "border-l-stone-900",
    "border-l-stone-950",
    "border-l-red-50",
    "border-l-red-100",
    "border-l-red-200",
    "border-l-red-300",
    "border-l-red-400",
    "border-l-red-500",
    "border-l-red-600",
    "border-l-red-700",
    "border-l-red-800",
    "border-l-red-900",
    "border-l-red-950",
    "border-l-orange-50",
    "border-l-orange-100",
    "border-l-orange-200",
    "border-l-orange-300",
    "border-l-orange-400",
    "border-l-orange-500",
    "border-l-orange-600",
    "border-l-orange-700",
    "border-l-orange-800",
    "border-l-orange-900",
    "border-l-orange-950",
    "border-l-amber-50",
    "border-l-amber-100",
    "border-l-amber-200",
    "border-l-amber-300",
    "border-l-amber-400",
    "border-l-amber-500",
    "border-l-amber-600",
    "border-l-amber-700",
    "border-l-amber-800",
    "border-l-amber-900",
    "border-l-amber-950",
    "border-l-yellow-50",
    "border-l-yellow-100",
    "border-l-yellow-200",
    "border-l-yellow-300",
    "border-l-yellow-400",
    "border-l-yellow-500",
    "border-l-yellow-600",
    "border-l-yellow-700",
    "border-l-yellow-800",
    "border-l-yellow-900",
    "border-l-yellow-950",
    "border-l-lime-50",
    "border-l-lime-100",
    "border-l-lime-200",
    "border-l-lime-300",
    "border-l-lime-400",
    "border-l-lime-500",
    "border-l-lime-600",
    "border-l-lime-700",
    "border-l-lime-800",
    "border-l-lime-900",
    "border-l-lime-950",
    "border-l-green-50",
    "border-l-green-100",
    "border-l-green-200",
    "border-l-green-300",
    "border-l-green-400",
    "border-l-green-500",
    "border-l-green-600",
    "border-l-green-700",
    "border-l-green-800",
    "border-l-green-900",
    "border-l-green-950",
    "border-l-emerald-50",
    "border-l-emerald-100",
    "border-l-emerald-200",
    "border-l-emerald-300",
    "border-l-emerald-400",
    "border-l-emerald-500",
    "border-l-emerald-600",
    "border-l-emerald-700",
    "border-l-emerald-800",
    "border-l-emerald-900",
    "border-l-emerald-950",
    "border-l-teal-50",
    "border-l-teal-100",
    "border-l-teal-200",
    "border-l-teal-300",
    "border-l-teal-400",
    "border-l-teal-500",
    "border-l-teal-600",
    "border-l-teal-700",
    "border-l-teal-800",
    "border-l-teal-900",
    "border-l-teal-950",
    "border-l-cyan-50",
    "border-l-cyan-100",
    "border-l-cyan-200",
    "border-l-cyan-300",
    "border-l-cyan-400",
    "border-l-cyan-500",
    "border-l-cyan-600",
    "border-l-cyan-700",
    "border-l-cyan-800",
    "border-l-cyan-900",
    "border-l-cyan-950",
    "border-l-sky-50",
    "border-l-sky-100",
    "border-l-sky-200",
    "border-l-sky-300",
    "border-l-sky-400",
    "border-l-sky-500",
    "border-l-sky-600",
    "border-l-sky-700",
    "border-l-sky-800",
    "border-l-sky-900",
    "border-l-sky-950",
    "border-l-blue-50",
    "border-l-blue-100",
    "border-l-blue-200",
    "border-l-blue-300",
    "border-l-blue-400",
    "border-l-blue-500",
    "border-l-blue-600",
    "border-l-blue-700",
    "border-l-blue-800",
    "border-l-blue-900",
    "border-l-blue-950",
    "border-l-indigo-50",
    "border-l-indigo-100",
    "border-l-indigo-200",
    "border-l-indigo-300",
    "border-l-indigo-400",
    "border-l-indigo-500",
    "border-l-indigo-600",
    "border-l-indigo-700",
    "border-l-indigo-800",
    "border-l-indigo-900",
    "border-l-indigo-950",
    "border-l-violet-50",
    "border-l-violet-100",
    "border-l-violet-200",
    "border-l-violet-300",
    "border-l-violet-400",
    "border-l-violet-500",
    "border-l-violet-600",
    "border-l-violet-700",
    "border-l-violet-800",
    "border-l-violet-900",
    "border-l-violet-950",
    "border-l-purple-50",
    "border-l-purple-100",
    "border-l-purple-200",
    "border-l-purple-300",
    "border-l-purple-400",
    "border-l-purple-500",
    "border-l-purple-600",
    "border-l-purple-700",
    "border-l-purple-800",
    "border-l-purple-900",
    "border-l-purple-950",
    "border-l-fuchsia-50",
    "border-l-fuchsia-100",
    "border-l-fuchsia-200",
    "border-l-fuchsia-300",
    "border-l-fuchsia-400",
    "border-l-fuchsia-500",
    "border-l-fuchsia-600",
    "border-l-fuchsia-700",
    "border-l-fuchsia-800",
    "border-l-fuchsia-900",
    "border-l-fuchsia-950",
    "border-l-pink-50",
    "border-l-pink-100",
    "border-l-pink-200",
    "border-l-pink-300",
    "border-l-pink-400",
    "border-l-pink-500",
    "border-l-pink-600",
    "border-l-pink-700",
    "border-l-pink-800",
    "border-l-pink-900",
    "border-l-pink-950",
    "border-l-rose-50",
    "border-l-rose-100",
    "border-l-rose-200",
    "border-l-rose-300",
    "border-l-rose-400",
    "border-l-rose-500",
    "border-l-rose-600",
    "border-l-rose-700",
    "border-l-rose-800",
    "border-l-rose-900",
    "border-l-rose-950",
    "border-solid",
    "border-dashed",
    "border-dotted",
    "border-double",
    "border-hidden",
    "border-none",
    "divide-x-0",
    "divide-x-2",
    "divide-x-4",
    "divide-x-8",
    "divide-x",
    "divide-y-0",
    "divide-y-2",
    "divide-y-4",
    "divide-y-8",
    "divide-y",
    "divide-y-reverse",
    "divide-x-reverse",
    "divide-inherit",
    "divide-current",
    "divide-transparent",
    "divide-black",
    "divide-white",
    "divide-slate-50",
    "divide-slate-100",
    "divide-slate-200",
    "divide-slate-300",
    "divide-slate-400",
    "divide-slate-500",
    "divide-slate-600",
    "divide-slate-700",
    "divide-slate-800",
    "divide-slate-900",
    "divide-slate-950",
    "divide-gray-50",
    "divide-gray-100",
    "divide-gray-200",
    "divide-gray-300",
    "divide-gray-400",
    "divide-gray-500",
    "divide-gray-600",
    "divide-gray-700",
    "divide-gray-800",
    "divide-gray-900",
    "divide-gray-950",
    "divide-zinc-50",
    "divide-zinc-100",
    "divide-zinc-200",
    "divide-zinc-300",
    "divide-zinc-400",
    "divide-zinc-500",
    "divide-zinc-600",
    "divide-zinc-700",
    "divide-zinc-800",
    "divide-zinc-900",
    "divide-zinc-950",
    "divide-neutral-50",
    "divide-neutral-100",
    "divide-neutral-200",
    "divide-neutral-300",
    "divide-neutral-400",
    "divide-neutral-500",
    "divide-neutral-600",
    "divide-neutral-700",
    "divide-neutral-800",
    "divide-neutral-900",
    "divide-neutral-950",
    "divide-stone-50",
    "divide-stone-100",
    "divide-stone-200",
    "divide-stone-300",
    "divide-stone-400",
    "divide-stone-500",
    "divide-stone-600",
    "divide-stone-700",
    "divide-stone-800",
    "divide-stone-900",
    "divide-stone-950",
    "divide-red-50",
    "divide-red-100",
    "divide-red-200",
    "divide-red-300",
    "divide-red-400",
    "divide-red-500",
    "divide-red-600",
    "divide-red-700",
    "divide-red-800",
    "divide-red-900",
    "divide-red-950",
    "divide-orange-50",
    "divide-orange-100",
    "divide-orange-200",
    "divide-orange-300",
    "divide-orange-400",
    "divide-orange-500",
    "divide-orange-600",
    "divide-orange-700",
    "divide-orange-800",
    "divide-orange-900",
    "divide-orange-950",
    "divide-amber-50",
    "divide-amber-100",
    "divide-amber-200",
    "divide-amber-300",
    "divide-amber-400",
    "divide-amber-500",
    "divide-amber-600",
    "divide-amber-700",
    "divide-amber-800",
    "divide-amber-900",
    "divide-amber-950",
    "divide-yellow-50",
    "divide-yellow-100",
    "divide-yellow-200",
    "divide-yellow-300",
    "divide-yellow-400",
    "divide-yellow-500",
    "divide-yellow-600",
    "divide-yellow-700",
    "divide-yellow-800",
    "divide-yellow-900",
    "divide-yellow-950",
    "divide-lime-50",
    "divide-lime-100",
    "divide-lime-200",
    "divide-lime-300",
    "divide-lime-400",
    "divide-lime-500",
    "divide-lime-600",
    "divide-lime-700",
    "divide-lime-800",
    "divide-lime-900",
    "divide-lime-950",
    "divide-green-50",
    "divide-green-100",
    "divide-green-200",
    "divide-green-300",
    "divide-green-400",
    "divide-green-500",
    "divide-green-600",
    "divide-green-700",
    "divide-green-800",
    "divide-green-900",
    "divide-green-950",
    "divide-emerald-50",
    "divide-emerald-100",
    "divide-emerald-200",
    "divide-emerald-300",
    "divide-emerald-400",
    "divide-emerald-500",
    "divide-emerald-600",
    "divide-emerald-700",
    "divide-emerald-800",
    "divide-emerald-900",
    "divide-emerald-950",
    "divide-teal-50",
    "divide-teal-100",
    "divide-teal-200",
    "divide-teal-300",
    "divide-teal-400",
    "divide-teal-500",
    "divide-teal-600",
    "divide-teal-700",
    "divide-teal-800",
    "divide-teal-900",
    "divide-teal-950",
    "divide-cyan-50",
    "divide-cyan-100",
    "divide-cyan-200",
    "divide-cyan-300",
    "divide-cyan-400",
    "divide-cyan-500",
    "divide-cyan-600",
    "divide-cyan-700",
    "divide-cyan-800",
    "divide-cyan-900",
    "divide-cyan-950",
    "divide-sky-50",
    "divide-sky-100",
    "divide-sky-200",
    "divide-sky-300",
    "divide-sky-400",
    "divide-sky-500",
    "divide-sky-600",
    "divide-sky-700",
    "divide-sky-800",
    "divide-sky-900",
    "divide-sky-950",
    "divide-blue-50",
    "divide-blue-100",
    "divide-blue-200",
    "divide-blue-300",
    "divide-blue-400",
    "divide-blue-500",
    "divide-blue-600",
    "divide-blue-700",
    "divide-blue-800",
    "divide-blue-900",
    "divide-blue-950",
    "divide-indigo-50",
    "divide-indigo-100",
    "divide-indigo-200",
    "divide-indigo-300",
    "divide-indigo-400",
    "divide-indigo-500",
    "divide-indigo-600",
    "divide-indigo-700",
    "divide-indigo-800",
    "divide-indigo-900",
    "divide-indigo-950",
    "divide-violet-50",
    "divide-violet-100",
    "divide-violet-200",
    "divide-violet-300",
    "divide-violet-400",
    "divide-violet-500",
    "divide-violet-600",
    "divide-violet-700",
    "divide-violet-800",
    "divide-violet-900",
    "divide-violet-950",
    "divide-purple-50",
    "divide-purple-100",
    "divide-purple-200",
    "divide-purple-300",
    "divide-purple-400",
    "divide-purple-500",
    "divide-purple-600",
    "divide-purple-700",
    "divide-purple-800",
    "divide-purple-900",
    "divide-purple-950",
    "divide-fuchsia-50",
    "divide-fuchsia-100",
    "divide-fuchsia-200",
    "divide-fuchsia-300",
    "divide-fuchsia-400",
    "divide-fuchsia-500",
    "divide-fuchsia-600",
    "divide-fuchsia-700",
    "divide-fuchsia-800",
    "divide-fuchsia-900",
    "divide-fuchsia-950",
    "divide-pink-50",
    "divide-pink-100",
    "divide-pink-200",
    "divide-pink-300",
    "divide-pink-400",
    "divide-pink-500",
    "divide-pink-600",
    "divide-pink-700",
    "divide-pink-800",
    "divide-pink-900",
    "divide-pink-950",
    "divide-rose-50",
    "divide-rose-100",
    "divide-rose-200",
    "divide-rose-300",
    "divide-rose-400",
    "divide-rose-500",
    "divide-rose-600",
    "divide-rose-700",
    "divide-rose-800",
    "divide-rose-900",
    "divide-rose-950",
    "divide-solid",
    "divide-dashed",
    "divide-dotted",
    "divide-double",
    "divide-none",
    "outline-0",
    "outline-1",
    "outline-2",
    "outline-4",
    "outline-8",
    "outline-inherit",
    "outline-current",
    "outline-transparent",
    "outline-black",
    "outline-white",
    "outline-slate-50",
    "outline-slate-100",
    "outline-slate-200",
    "outline-slate-300",
    "outline-slate-400",
    "outline-slate-500",
    "outline-slate-600",
    "outline-slate-700",
    "outline-slate-800",
    "outline-slate-900",
    "outline-slate-950",
    "outline-gray-50",
    "outline-gray-100",
    "outline-gray-200",
    "outline-gray-300",
    "outline-gray-400",
    "outline-gray-500",
    "outline-gray-600",
    "outline-gray-700",
    "outline-gray-800",
    "outline-gray-900",
    "outline-gray-950",
    "outline-zinc-50",
    "outline-zinc-100",
    "outline-zinc-200",
    "outline-zinc-300",
    "outline-zinc-400",
    "outline-zinc-500",
    "outline-zinc-600",
    "outline-zinc-700",
    "outline-zinc-800",
    "outline-zinc-900",
    "outline-zinc-950",
    "outline-neutral-50",
    "outline-neutral-100",
    "outline-neutral-200",
    "outline-neutral-300",
    "outline-neutral-400",
    "outline-neutral-500",
    "outline-neutral-600",
    "outline-neutral-700",
    "outline-neutral-800",
    "outline-neutral-900",
    "outline-neutral-950",
    "outline-stone-50",
    "outline-stone-100",
    "outline-stone-200",
    "outline-stone-300",
    "outline-stone-400",
    "outline-stone-500",
    "outline-stone-600",
    "outline-stone-700",
    "outline-stone-800",
    "outline-stone-900",
    "outline-stone-950",
    "outline-red-50",
    "outline-red-100",
    "outline-red-200",
    "outline-red-300",
    "outline-red-400",
    "outline-red-500",
    "outline-red-600",
    "outline-red-700",
    "outline-red-800",
    "outline-red-900",
    "outline-red-950",
    "outline-orange-50",
    "outline-orange-100",
    "outline-orange-200",
    "outline-orange-300",
    "outline-orange-400",
    "outline-orange-500",
    "outline-orange-600",
    "outline-orange-700",
    "outline-orange-800",
    "outline-orange-900",
    "outline-orange-950",
    "outline-amber-50",
    "outline-amber-100",
    "outline-amber-200",
    "outline-amber-300",
    "outline-amber-400",
    "outline-amber-500",
    "outline-amber-600",
    "outline-amber-700",
    "outline-amber-800",
    "outline-amber-900",
    "outline-amber-950",
    "outline-yellow-50",
    "outline-yellow-100",
    "outline-yellow-200",
    "outline-yellow-300",
    "outline-yellow-400",
    "outline-yellow-500",
    "outline-yellow-600",
    "outline-yellow-700",
    "outline-yellow-800",
    "outline-yellow-900",
    "outline-yellow-950",
    "outline-lime-50",
    "outline-lime-100",
    "outline-lime-200",
    "outline-lime-300",
    "outline-lime-400",
    "outline-lime-500",
    "outline-lime-600",
    "outline-lime-700",
    "outline-lime-800",
    "outline-lime-900",
    "outline-lime-950",
    "outline-green-50",
    "outline-green-100",
    "outline-green-200",
    "outline-green-300",
    "outline-green-400",
    "outline-green-500",
    "outline-green-600",
    "outline-green-700",
    "outline-green-800",
    "outline-green-900",
    "outline-green-950",
    "outline-emerald-50",
    "outline-emerald-100",
    "outline-emerald-200",
    "outline-emerald-300",
    "outline-emerald-400",
    "outline-emerald-500",
    "outline-emerald-600",
    "outline-emerald-700",
    "outline-emerald-800",
    "outline-emerald-900",
    "outline-emerald-950",
    "outline-teal-50",
    "outline-teal-100",
    "outline-teal-200",
    "outline-teal-300",
    "outline-teal-400",
    "outline-teal-500",
    "outline-teal-600",
    "outline-teal-700",
    "outline-teal-800",
    "outline-teal-900",
    "outline-teal-950",
    "outline-cyan-50",
    "outline-cyan-100",
    "outline-cyan-200",
    "outline-cyan-300",
    "outline-cyan-400",
    "outline-cyan-500",
    "outline-cyan-600",
    "outline-cyan-700",
    "outline-cyan-800",
    "outline-cyan-900",
    "outline-cyan-950",
    "outline-sky-50",
    "outline-sky-100",
    "outline-sky-200",
    "outline-sky-300",
    "outline-sky-400",
    "outline-sky-500",
    "outline-sky-600",
    "outline-sky-700",
    "outline-sky-800",
    "outline-sky-900",
    "outline-sky-950",
    "outline-blue-50",
    "outline-blue-100",
    "outline-blue-200",
    "outline-blue-300",
    "outline-blue-400",
    "outline-blue-500",
    "outline-blue-600",
    "outline-blue-700",
    "outline-blue-800",
    "outline-blue-900",
    "outline-blue-950",
    "outline-indigo-50",
    "outline-indigo-100",
    "outline-indigo-200",
    "outline-indigo-300",
    "outline-indigo-400",
    "outline-indigo-500",
    "outline-indigo-600",
    "outline-indigo-700",
    "outline-indigo-800",
    "outline-indigo-900",
    "outline-indigo-950",
    "outline-violet-50",
    "outline-violet-100",
    "outline-violet-200",
    "outline-violet-300",
    "outline-violet-400",
    "outline-violet-500",
    "outline-violet-600",
    "outline-violet-700",
    "outline-violet-800",
    "outline-violet-900",
    "outline-violet-950",
    "outline-purple-50",
    "outline-purple-100",
    "outline-purple-200",
    "outline-purple-300",
    "outline-purple-400",
    "outline-purple-500",
    "outline-purple-600",
    "outline-purple-700",
    "outline-purple-800",
    "outline-purple-900",
    "outline-purple-950",
    "outline-fuchsia-50",
    "outline-fuchsia-100",
    "outline-fuchsia-200",
    "outline-fuchsia-300",
    "outline-fuchsia-400",
    "outline-fuchsia-500",
    "outline-fuchsia-600",
    "outline-fuchsia-700",
    "outline-fuchsia-800",
    "outline-fuchsia-900",
    "outline-fuchsia-950",
    "outline-pink-50",
    "outline-pink-100",
    "outline-pink-200",
    "outline-pink-300",
    "outline-pink-400",
    "outline-pink-500",
    "outline-pink-600",
    "outline-pink-700",
    "outline-pink-800",
    "outline-pink-900",
    "outline-pink-950",
    "outline-rose-50",
    "outline-rose-100",
    "outline-rose-200",
    "outline-rose-300",
    "outline-rose-400",
    "outline-rose-500",
    "outline-rose-600",
    "outline-rose-700",
    "outline-rose-800",
    "outline-rose-900",
    "outline-rose-950",
    "outline-none",
    "outline",
    "outline-dashed",
    "outline-dotted",
    "outline-double",
    "outline-offset-0",
    "outline-offset-1",
    "outline-offset-2",
    "outline-offset-4",
    "outline-offset-8",
    "ring-0",
    "ring-1",
    "ring-2",
    "ring",
    "ring-4",
    "ring-8",
    "ring-inset",
    "ring-inherit",
    "ring-current",
    "ring-transparent",
    "ring-black",
    "ring-white",
    "ring-slate-50",
    "ring-slate-100",
    "ring-slate-200",
    "ring-slate-300",
    "ring-slate-400",
    "ring-slate-500",
    "ring-slate-600",
    "ring-slate-700",
    "ring-slate-800",
    "ring-slate-900",
    "ring-slate-950",
    "ring-gray-50",
    "ring-gray-100",
    "ring-gray-200",
    "ring-gray-300",
    "ring-gray-400",
    "ring-gray-500",
    "ring-gray-600",
    "ring-gray-700",
    "ring-gray-800",
    "ring-gray-900",
    "ring-gray-950",
    "ring-zinc-50",
    "ring-zinc-100",
    "ring-zinc-200",
    "ring-zinc-300",
    "ring-zinc-400",
    "ring-zinc-500",
    "ring-zinc-600",
    "ring-zinc-700",
    "ring-zinc-800",
    "ring-zinc-900",
    "ring-zinc-950",
    "ring-neutral-50",
    "ring-neutral-100",
    "ring-neutral-200",
    "ring-neutral-300",
    "ring-neutral-400",
    "ring-neutral-500",
    "ring-neutral-600",
    "ring-neutral-700",
    "ring-neutral-800",
    "ring-neutral-900",
    "ring-neutral-950",
    "ring-stone-50",
    "ring-stone-100",
    "ring-stone-200",
    "ring-stone-300",
    "ring-stone-400",
    "ring-stone-500",
    "ring-stone-600",
    "ring-stone-700",
    "ring-stone-800",
    "ring-stone-900",
    "ring-stone-950",
    "ring-red-50",
    "ring-red-100",
    "ring-red-200",
    "ring-red-300",
    "ring-red-400",
    "ring-red-500",
    "ring-red-600",
    "ring-red-700",
    "ring-red-800",
    "ring-red-900",
    "ring-red-950",
    "ring-orange-50",
    "ring-orange-100",
    "ring-orange-200",
    "ring-orange-300",
    "ring-orange-400",
    "ring-orange-500",
    "ring-orange-600",
    "ring-orange-700",
    "ring-orange-800",
    "ring-orange-900",
    "ring-orange-950",
    "ring-amber-50",
    "ring-amber-100",
    "ring-amber-200",
    "ring-amber-300",
    "ring-amber-400",
    "ring-amber-500",
    "ring-amber-600",
    "ring-amber-700",
    "ring-amber-800",
    "ring-amber-900",
    "ring-amber-950",
    "ring-yellow-50",
    "ring-yellow-100",
    "ring-yellow-200",
    "ring-yellow-300",
    "ring-yellow-400",
    "ring-yellow-500",
    "ring-yellow-600",
    "ring-yellow-700",
    "ring-yellow-800",
    "ring-yellow-900",
    "ring-yellow-950",
    "ring-lime-50",
    "ring-lime-100",
    "ring-lime-200",
    "ring-lime-300",
    "ring-lime-400",
    "ring-lime-500",
    "ring-lime-600",
    "ring-lime-700",
    "ring-lime-800",
    "ring-lime-900",
    "ring-lime-950",
    "ring-green-50",
    "ring-green-100",
    "ring-green-200",
    "ring-green-300",
    "ring-green-400",
    "ring-green-500",
    "ring-green-600",
    "ring-green-700",
    "ring-green-800",
    "ring-green-900",
    "ring-green-950",
    "ring-emerald-50",
    "ring-emerald-100",
    "ring-emerald-200",
    "ring-emerald-300",
    "ring-emerald-400",
    "ring-emerald-500",
    "ring-emerald-600",
    "ring-emerald-700",
    "ring-emerald-800",
    "ring-emerald-900",
    "ring-emerald-950",
    "ring-teal-50",
    "ring-teal-100",
    "ring-teal-200",
    "ring-teal-300",
    "ring-teal-400",
    "ring-teal-500",
    "ring-teal-600",
    "ring-teal-700",
    "ring-teal-800",
    "ring-teal-900",
    "ring-teal-950",
    "ring-cyan-50",
    "ring-cyan-100",
    "ring-cyan-200",
    "ring-cyan-300",
    "ring-cyan-400",
    "ring-cyan-500",
    "ring-cyan-600",
    "ring-cyan-700",
    "ring-cyan-800",
    "ring-cyan-900",
    "ring-cyan-950",
    "ring-sky-50",
    "ring-sky-100",
    "ring-sky-200",
    "ring-sky-300",
    "ring-sky-400",
    "ring-sky-500",
    "ring-sky-600",
    "ring-sky-700",
    "ring-sky-800",
    "ring-sky-900",
    "ring-sky-950",
    "ring-blue-50",
    "ring-blue-100",
    "ring-blue-200",
    "ring-blue-300",
    "ring-blue-400",
    "ring-blue-500",
    "ring-blue-600",
    "ring-blue-700",
    "ring-blue-800",
    "ring-blue-900",
    "ring-blue-950",
    "ring-indigo-50",
    "ring-indigo-100",
    "ring-indigo-200",
    "ring-indigo-300",
    "ring-indigo-400",
    "ring-indigo-500",
    "ring-indigo-600",
    "ring-indigo-700",
    "ring-indigo-800",
    "ring-indigo-900",
    "ring-indigo-950",
    "ring-violet-50",
    "ring-violet-100",
    "ring-violet-200",
    "ring-violet-300",
    "ring-violet-400",
    "ring-violet-500",
    "ring-violet-600",
    "ring-violet-700",
    "ring-violet-800",
    "ring-violet-900",
    "ring-violet-950",
    "ring-purple-50",
    "ring-purple-100",
    "ring-purple-200",
    "ring-purple-300",
    "ring-purple-400",
    "ring-purple-500",
    "ring-purple-600",
    "ring-purple-700",
    "ring-purple-800",
    "ring-purple-900",
    "ring-purple-950",
    "ring-fuchsia-50",
    "ring-fuchsia-100",
    "ring-fuchsia-200",
    "ring-fuchsia-300",
    "ring-fuchsia-400",
    "ring-fuchsia-500",
    "ring-fuchsia-600",
    "ring-fuchsia-700",
    "ring-fuchsia-800",
    "ring-fuchsia-900",
    "ring-fuchsia-950",
    "ring-pink-50",
    "ring-pink-100",
    "ring-pink-200",
    "ring-pink-300",
    "ring-pink-400",
    "ring-pink-500",
    "ring-pink-600",
    "ring-pink-700",
    "ring-pink-800",
    "ring-pink-900",
    "ring-pink-950",
    "ring-rose-50",
    "ring-rose-100",
    "ring-rose-200",
    "ring-rose-300",
    "ring-rose-400",
    "ring-rose-500",
    "ring-rose-600",
    "ring-rose-700",
    "ring-rose-800",
    "ring-rose-900",
    "ring-rose-950",
    "ring-offset-0",
    "ring-offset-1",
    "ring-offset-2",
    "ring-offset-4",
    "ring-offset-8",
    "ring-offset-inherit",
    "ring-offset-current",
    "ring-offset-transparent",
    "ring-offset-black",
    "ring-offset-white",
    "ring-offset-slate-50",
    "ring-offset-slate-100",
    "ring-offset-slate-200",
    "ring-offset-slate-300",
    "ring-offset-slate-400",
    "ring-offset-slate-500",
    "ring-offset-slate-600",
    "ring-offset-slate-700",
    "ring-offset-slate-800",
    "ring-offset-slate-900",
    "ring-offset-slate-950",
    "ring-offset-gray-50",
    "ring-offset-gray-100",
    "ring-offset-gray-200",
    "ring-offset-gray-300",
    "ring-offset-gray-400",
    "ring-offset-gray-500",
    "ring-offset-gray-600",
    "ring-offset-gray-700",
    "ring-offset-gray-800",
    "ring-offset-gray-900",
    "ring-offset-gray-950",
    "ring-offset-zinc-50",
    "ring-offset-zinc-100",
    "ring-offset-zinc-200",
    "ring-offset-zinc-300",
    "ring-offset-zinc-400",
    "ring-offset-zinc-500",
    "ring-offset-zinc-600",
    "ring-offset-zinc-700",
    "ring-offset-zinc-800",
    "ring-offset-zinc-900",
    "ring-offset-zinc-950",
    "ring-offset-neutral-50",
    "ring-offset-neutral-100",
    "ring-offset-neutral-200",
    "ring-offset-neutral-300",
    "ring-offset-neutral-400",
    "ring-offset-neutral-500",
    "ring-offset-neutral-600",
    "ring-offset-neutral-700",
    "ring-offset-neutral-800",
    "ring-offset-neutral-900",
    "ring-offset-neutral-950",
    "ring-offset-stone-50",
    "ring-offset-stone-100",
    "ring-offset-stone-200",
    "ring-offset-stone-300",
    "ring-offset-stone-400",
    "ring-offset-stone-500",
    "ring-offset-stone-600",
    "ring-offset-stone-700",
    "ring-offset-stone-800",
    "ring-offset-stone-900",
    "ring-offset-stone-950",
    "ring-offset-red-50",
    "ring-offset-red-100",
    "ring-offset-red-200",
    "ring-offset-red-300",
    "ring-offset-red-400",
    "ring-offset-red-500",
    "ring-offset-red-600",
    "ring-offset-red-700",
    "ring-offset-red-800",
    "ring-offset-red-900",
    "ring-offset-red-950",
    "ring-offset-orange-50",
    "ring-offset-orange-100",
    "ring-offset-orange-200",
    "ring-offset-orange-300",
    "ring-offset-orange-400",
    "ring-offset-orange-500",
    "ring-offset-orange-600",
    "ring-offset-orange-700",
    "ring-offset-orange-800",
    "ring-offset-orange-900",
    "ring-offset-orange-950",
    "ring-offset-amber-50",
    "ring-offset-amber-100",
    "ring-offset-amber-200",
    "ring-offset-amber-300",
    "ring-offset-amber-400",
    "ring-offset-amber-500",
    "ring-offset-amber-600",
    "ring-offset-amber-700",
    "ring-offset-amber-800",
    "ring-offset-amber-900",
    "ring-offset-amber-950",
    "ring-offset-yellow-50",
    "ring-offset-yellow-100",
    "ring-offset-yellow-200",
    "ring-offset-yellow-300",
    "ring-offset-yellow-400",
    "ring-offset-yellow-500",
    "ring-offset-yellow-600",
    "ring-offset-yellow-700",
    "ring-offset-yellow-800",
    "ring-offset-yellow-900",
    "ring-offset-yellow-950",
    "ring-offset-lime-50",
    "ring-offset-lime-100",
    "ring-offset-lime-200",
    "ring-offset-lime-300",
    "ring-offset-lime-400",
    "ring-offset-lime-500",
    "ring-offset-lime-600",
    "ring-offset-lime-700",
    "ring-offset-lime-800",
    "ring-offset-lime-900",
    "ring-offset-lime-950",
    "ring-offset-green-50",
    "ring-offset-green-100",
    "ring-offset-green-200",
    "ring-offset-green-300",
    "ring-offset-green-400",
    "ring-offset-green-500",
    "ring-offset-green-600",
    "ring-offset-green-700",
    "ring-offset-green-800",
    "ring-offset-green-900",
    "ring-offset-green-950",
    "ring-offset-emerald-50",
    "ring-offset-emerald-100",
    "ring-offset-emerald-200",
    "ring-offset-emerald-300",
    "ring-offset-emerald-400",
    "ring-offset-emerald-500",
    "ring-offset-emerald-600",
    "ring-offset-emerald-700",
    "ring-offset-emerald-800",
    "ring-offset-emerald-900",
    "ring-offset-emerald-950",
    "ring-offset-teal-50",
    "ring-offset-teal-100",
    "ring-offset-teal-200",
    "ring-offset-teal-300",
    "ring-offset-teal-400",
    "ring-offset-teal-500",
    "ring-offset-teal-600",
    "ring-offset-teal-700",
    "ring-offset-teal-800",
    "ring-offset-teal-900",
    "ring-offset-teal-950",
    "ring-offset-cyan-50",
    "ring-offset-cyan-100",
    "ring-offset-cyan-200",
    "ring-offset-cyan-300",
    "ring-offset-cyan-400",
    "ring-offset-cyan-500",
    "ring-offset-cyan-600",
    "ring-offset-cyan-700",
    "ring-offset-cyan-800",
    "ring-offset-cyan-900",
    "ring-offset-cyan-950",
    "ring-offset-sky-50",
    "ring-offset-sky-100",
    "ring-offset-sky-200",
    "ring-offset-sky-300",
    "ring-offset-sky-400",
    "ring-offset-sky-500",
    "ring-offset-sky-600",
    "ring-offset-sky-700",
    "ring-offset-sky-800",
    "ring-offset-sky-900",
    "ring-offset-sky-950",
    "ring-offset-blue-50",
    "ring-offset-blue-100",
    "ring-offset-blue-200",
    "ring-offset-blue-300",
    "ring-offset-blue-400",
    "ring-offset-blue-500",
    "ring-offset-blue-600",
    "ring-offset-blue-700",
    "ring-offset-blue-800",
    "ring-offset-blue-900",
    "ring-offset-blue-950",
    "ring-offset-indigo-50",
    "ring-offset-indigo-100",
    "ring-offset-indigo-200",
    "ring-offset-indigo-300",
    "ring-offset-indigo-400",
    "ring-offset-indigo-500",
    "ring-offset-indigo-600",
    "ring-offset-indigo-700",
    "ring-offset-indigo-800",
    "ring-offset-indigo-900",
    "ring-offset-indigo-950",
    "ring-offset-violet-50",
    "ring-offset-violet-100",
    "ring-offset-violet-200",
    "ring-offset-violet-300",
    "ring-offset-violet-400",
    "ring-offset-violet-500",
    "ring-offset-violet-600",
    "ring-offset-violet-700",
    "ring-offset-violet-800",
    "ring-offset-violet-900",
    "ring-offset-violet-950",
    "ring-offset-purple-50",
    "ring-offset-purple-100",
    "ring-offset-purple-200",
    "ring-offset-purple-300",
    "ring-offset-purple-400",
    "ring-offset-purple-500",
    "ring-offset-purple-600",
    "ring-offset-purple-700",
    "ring-offset-purple-800",
    "ring-offset-purple-900",
    "ring-offset-purple-950",
    "ring-offset-fuchsia-50",
    "ring-offset-fuchsia-100",
    "ring-offset-fuchsia-200",
    "ring-offset-fuchsia-300",
    "ring-offset-fuchsia-400",
    "ring-offset-fuchsia-500",
    "ring-offset-fuchsia-600",
    "ring-offset-fuchsia-700",
    "ring-offset-fuchsia-800",
    "ring-offset-fuchsia-900",
    "ring-offset-fuchsia-950",
    "ring-offset-pink-50",
    "ring-offset-pink-100",
    "ring-offset-pink-200",
    "ring-offset-pink-300",
    "ring-offset-pink-400",
    "ring-offset-pink-500",
    "ring-offset-pink-600",
    "ring-offset-pink-700",
    "ring-offset-pink-800",
    "ring-offset-pink-900",
    "ring-offset-pink-950",
    "ring-offset-rose-50",
    "ring-offset-rose-100",
    "ring-offset-rose-200",
    "ring-offset-rose-300",
    "ring-offset-rose-400",
    "ring-offset-rose-500",
    "ring-offset-rose-600",
    "ring-offset-rose-700",
    "ring-offset-rose-800",
    "ring-offset-rose-900",
    "ring-offset-rose-950",
    "shadow-sm",
    "shadow",
    "shadow-md",
    "shadow-lg",
    "shadow-xl",
    "shadow-2xl",
    "shadow-inner",
    "shadow-none",
    "shadow-inherit",
    "shadow-current",
    "shadow-transparent",
    "shadow-black",
    "shadow-white",
    "shadow-slate-50",
    "shadow-slate-100",
    "shadow-slate-200",
    "shadow-slate-300",
    "shadow-slate-400",
    "shadow-slate-500",
    "shadow-slate-600",
    "shadow-slate-700",
    "shadow-slate-800",
    "shadow-slate-900",
    "shadow-slate-950",
    "shadow-gray-50",
    "shadow-gray-100",
    "shadow-gray-200",
    "shadow-gray-300",
    "shadow-gray-400",
    "shadow-gray-500",
    "shadow-gray-600",
    "shadow-gray-700",
    "shadow-gray-800",
    "shadow-gray-900",
    "shadow-gray-950",
    "shadow-zinc-50",
    "shadow-zinc-100",
    "shadow-zinc-200",
    "shadow-zinc-300",
    "shadow-zinc-400",
    "shadow-zinc-500",
    "shadow-zinc-600",
    "shadow-zinc-700",
    "shadow-zinc-800",
    "shadow-zinc-900",
    "shadow-zinc-950",
    "shadow-neutral-50",
    "shadow-neutral-100",
    "shadow-neutral-200",
    "shadow-neutral-300",
    "shadow-neutral-400",
    "shadow-neutral-500",
    "shadow-neutral-600",
    "shadow-neutral-700",
    "shadow-neutral-800",
    "shadow-neutral-900",
    "shadow-neutral-950",
    "shadow-stone-50",
    "shadow-stone-100",
    "shadow-stone-200",
    "shadow-stone-300",
    "shadow-stone-400",
    "shadow-stone-500",
    "shadow-stone-600",
    "shadow-stone-700",
    "shadow-stone-800",
    "shadow-stone-900",
    "shadow-stone-950",
    "shadow-red-50",
    "shadow-red-100",
    "shadow-red-200",
    "shadow-red-300",
    "shadow-red-400",
    "shadow-red-500",
    "shadow-red-600",
    "shadow-red-700",
    "shadow-red-800",
    "shadow-red-900",
    "shadow-red-950",
    "shadow-orange-50",
    "shadow-orange-100",
    "shadow-orange-200",
    "shadow-orange-300",
    "shadow-orange-400",
    "shadow-orange-500",
    "shadow-orange-600",
    "shadow-orange-700",
    "shadow-orange-800",
    "shadow-orange-900",
    "shadow-orange-950",
    "shadow-amber-50",
    "shadow-amber-100",
    "shadow-amber-200",
    "shadow-amber-300",
    "shadow-amber-400",
    "shadow-amber-500",
    "shadow-amber-600",
    "shadow-amber-700",
    "shadow-amber-800",
    "shadow-amber-900",
    "shadow-amber-950",
    "shadow-yellow-50",
    "shadow-yellow-100",
    "shadow-yellow-200",
    "shadow-yellow-300",
    "shadow-yellow-400",
    "shadow-yellow-500",
    "shadow-yellow-600",
    "shadow-yellow-700",
    "shadow-yellow-800",
    "shadow-yellow-900",
    "shadow-yellow-950",
    "shadow-lime-50",
    "shadow-lime-100",
    "shadow-lime-200",
    "shadow-lime-300",
    "shadow-lime-400",
    "shadow-lime-500",
    "shadow-lime-600",
    "shadow-lime-700",
    "shadow-lime-800",
    "shadow-lime-900",
    "shadow-lime-950",
    "shadow-green-50",
    "shadow-green-100",
    "shadow-green-200",
    "shadow-green-300",
    "shadow-green-400",
    "shadow-green-500",
    "shadow-green-600",
    "shadow-green-700",
    "shadow-green-800",
    "shadow-green-900",
    "shadow-green-950",
    "shadow-emerald-50",
    "shadow-emerald-100",
    "shadow-emerald-200",
    "shadow-emerald-300",
    "shadow-emerald-400",
    "shadow-emerald-500",
    "shadow-emerald-600",
    "shadow-emerald-700",
    "shadow-emerald-800",
    "shadow-emerald-900",
    "shadow-emerald-950",
    "shadow-teal-50",
    "shadow-teal-100",
    "shadow-teal-200",
    "shadow-teal-300",
    "shadow-teal-400",
    "shadow-teal-500",
    "shadow-teal-600",
    "shadow-teal-700",
    "shadow-teal-800",
    "shadow-teal-900",
    "shadow-teal-950",
    "shadow-cyan-50",
    "shadow-cyan-100",
    "shadow-cyan-200",
    "shadow-cyan-300",
    "shadow-cyan-400",
    "shadow-cyan-500",
    "shadow-cyan-600",
    "shadow-cyan-700",
    "shadow-cyan-800",
    "shadow-cyan-900",
    "shadow-cyan-950",
    "shadow-sky-50",
    "shadow-sky-100",
    "shadow-sky-200",
    "shadow-sky-300",
    "shadow-sky-400",
    "shadow-sky-500",
    "shadow-sky-600",
    "shadow-sky-700",
    "shadow-sky-800",
    "shadow-sky-900",
    "shadow-sky-950",
    "shadow-blue-50",
    "shadow-blue-100",
    "shadow-blue-200",
    "shadow-blue-300",
    "shadow-blue-400",
    "shadow-blue-500",
    "shadow-blue-600",
    "shadow-blue-700",
    "shadow-blue-800",
    "shadow-blue-900",
    "shadow-blue-950",
    "shadow-indigo-50",
    "shadow-indigo-100",
    "shadow-indigo-200",
    "shadow-indigo-300",
    "shadow-indigo-400",
    "shadow-indigo-500",
    "shadow-indigo-600",
    "shadow-indigo-700",
    "shadow-indigo-800",
    "shadow-indigo-900",
    "shadow-indigo-950",
    "shadow-violet-50",
    "shadow-violet-100",
    "shadow-violet-200",
    "shadow-violet-300",
    "shadow-violet-400",
    "shadow-violet-500",
    "shadow-violet-600",
    "shadow-violet-700",
    "shadow-violet-800",
    "shadow-violet-900",
    "shadow-violet-950",
    "shadow-purple-50",
    "shadow-purple-100",
    "shadow-purple-200",
    "shadow-purple-300",
    "shadow-purple-400",
    "shadow-purple-500",
    "shadow-purple-600",
    "shadow-purple-700",
    "shadow-purple-800",
    "shadow-purple-900",
    "shadow-purple-950",
    "shadow-fuchsia-50",
    "shadow-fuchsia-100",
    "shadow-fuchsia-200",
    "shadow-fuchsia-300",
    "shadow-fuchsia-400",
    "shadow-fuchsia-500",
    "shadow-fuchsia-600",
    "shadow-fuchsia-700",
    "shadow-fuchsia-800",
    "shadow-fuchsia-900",
    "shadow-fuchsia-950",
    "shadow-pink-50",
    "shadow-pink-100",
    "shadow-pink-200",
    "shadow-pink-300",
    "shadow-pink-400",
    "shadow-pink-500",
    "shadow-pink-600",
    "shadow-pink-700",
    "shadow-pink-800",
    "shadow-pink-900",
    "shadow-pink-950",
    "shadow-rose-50",
    "shadow-rose-100",
    "shadow-rose-200",
    "shadow-rose-300",
    "shadow-rose-400",
    "shadow-rose-500",
    "shadow-rose-600",
    "shadow-rose-700",
    "shadow-rose-800",
    "shadow-rose-900",
    "shadow-rose-950",
    "opacity-0",
    "opacity-5",
    "opacity-10",
    "opacity-15",
    "opacity-20",
    "opacity-25",
    "opacity-30",
    "opacity-35",
    "opacity-40",
    "opacity-45",
    "opacity-50",
    "opacity-55",
    "opacity-60",
    "opacity-65",
    "opacity-70",
    "opacity-75",
    "opacity-80",
    "opacity-85",
    "opacity-90",
    "opacity-95",
    "opacity-100",
    "mix-blend-normal",
    "mix-blend-multiply",
    "mix-blend-screen",
    "mix-blend-overlay",
    "mix-blend-darken",
    "mix-blend-lighten",
    "mix-blend-color-dodge",
    "mix-blend-color-burn",
    "mix-blend-hard-light",
    "mix-blend-soft-light",
    "mix-blend-difference",
    "mix-blend-exclusion",
    "mix-blend-hue",
    "mix-blend-saturation",
    "mix-blend-color",
    "mix-blend-luminosity",
    "mix-blend-plus-darker",
    "mix-blend-plus-lighter",
    "bg-blend-normal",
    "bg-blend-multiply",
    "bg-blend-screen",
    "bg-blend-overlay",
    "bg-blend-darken",
    "bg-blend-lighten",
    "bg-blend-color-dodge",
    "bg-blend-color-burn",
    "bg-blend-hard-light",
    "bg-blend-soft-light",
    "bg-blend-difference",
    "bg-blend-exclusion",
    "bg-blend-hue",
    "bg-blend-saturation",
    "bg-blend-color",
    "bg-blend-luminosity",
    "blur-none",
    "blur-sm",
    "blur",
    "blur-md",
    "blur-lg",
    "blur-xl",
    "blur-2xl",
    "blur-3xl",
    "brightness-0",
    "brightness-50",
    "brightness-75",
    "brightness-90",
    "brightness-95",
    "brightness-100",
    "brightness-105",
    "brightness-110",
    "brightness-125",
    "brightness-150",
    "brightness-200",
    "contrast-0",
    "contrast-50",
    "contrast-75",
    "contrast-100",
    "contrast-125",
    "contrast-150",
    "contrast-200",
    "drop-shadow-sm",
    "drop-shadow",
    "drop-shadow-md",
    "drop-shadow-lg",
    "drop-shadow-xl",
    "drop-shadow-2xl",
    "drop-shadow-none",
    "grayscale-0",
    "grayscale",
    "hue-rotate-0",
    "hue-rotate-15",
    "hue-rotate-30",
    "hue-rotate-60",
    "hue-rotate-90",
    "hue-rotate-180",
    "invert-0",
    "invert",
    "saturate-0",
    "saturate-50",
    "saturate-100",
    "saturate-150",
    "saturate-200",
    "sepia-0",
    "sepia",
    "backdrop-blur-none",
    "backdrop-blur-sm",
    "backdrop-blur",
    "backdrop-blur-md",
    "backdrop-blur-lg",
    "backdrop-blur-xl",
    "backdrop-blur-2xl",
    "backdrop-blur-3xl",
    "backdrop-brightness-0",
    "backdrop-brightness-50",
    "backdrop-brightness-75",
    "backdrop-brightness-90",
    "backdrop-brightness-95",
    "backdrop-brightness-100",
    "backdrop-brightness-105",
    "backdrop-brightness-110",
    "backdrop-brightness-125",
    "backdrop-brightness-150",
    "backdrop-brightness-200",
    "backdrop-contrast-0",
    "backdrop-contrast-50",
    "backdrop-contrast-75",
    "backdrop-contrast-100",
    "backdrop-contrast-125",
    "backdrop-contrast-150",
    "backdrop-contrast-200",
    "backdrop-grayscale-0",
    "backdrop-grayscale",
    "backdrop-hue-rotate-0",
    "backdrop-hue-rotate-15",
    "backdrop-hue-rotate-30",
    "backdrop-hue-rotate-60",
    "backdrop-hue-rotate-90",
    "backdrop-hue-rotate-180",
    "backdrop-invert-0",
    "backdrop-invert",
    "backdrop-opacity-0",
    "backdrop-opacity-5",
    "backdrop-opacity-10",
    "backdrop-opacity-15",
    "backdrop-opacity-20",
    "backdrop-opacity-25",
    "backdrop-opacity-30",
    "backdrop-opacity-35",
    "backdrop-opacity-40",
    "backdrop-opacity-45",
    "backdrop-opacity-50",
    "backdrop-opacity-55",
    "backdrop-opacity-60",
    "backdrop-opacity-65",
    "backdrop-opacity-70",
    "backdrop-opacity-75",
    "backdrop-opacity-80",
    "backdrop-opacity-85",
    "backdrop-opacity-90",
    "backdrop-opacity-95",
    "backdrop-opacity-100",
    "backdrop-saturate-0",
    "backdrop-saturate-50",
    "backdrop-saturate-100",
    "backdrop-saturate-150",
    "backdrop-saturate-200",
    "backdrop-sepia-0",
    "backdrop-sepia",
    "border-collapse",
    "border-separate",
    "Indiana",
    "Ohio",
    "Michigan",
    "Indiana",
    "Ohio",
    "Michigan",
    "border-spacing-0",
    "border-spacing-x-0",
    "border-spacing-y-0",
    "border-spacing-px",
    "border-spacing-x-px",
    "border-spacing-y-px",
    "border-spacing-0.5",
    "border-spacing-x-0.5",
    "border-spacing-y-0.5",
    "border-spacing-1",
    "border-spacing-x-1",
    "border-spacing-y-1",
    "border-spacing-1.5",
    "border-spacing-x-1.5",
    "border-spacing-y-1.5",
    "border-spacing-2",
    "border-spacing-x-2",
    "border-spacing-y-2",
    "border-spacing-2.5",
    "border-spacing-x-2.5",
    "border-spacing-y-2.5",
    "border-spacing-3",
    "border-spacing-x-3",
    "border-spacing-y-3",
    "border-spacing-3.5",
    "border-spacing-x-3.5",
    "border-spacing-y-3.5",
    "border-spacing-4",
    "border-spacing-x-4",
    "border-spacing-y-4",
    "border-spacing-5",
    "border-spacing-x-5",
    "border-spacing-y-5",
    "border-spacing-6",
    "border-spacing-x-6",
    "border-spacing-y-6",
    "border-spacing-7",
    "border-spacing-x-7",
    "border-spacing-y-7",
    "border-spacing-8",
    "border-spacing-x-8",
    "border-spacing-y-8",
    "border-spacing-9",
    "border-spacing-x-9",
    "border-spacing-y-9",
    "border-spacing-10",
    "border-spacing-x-10",
    "border-spacing-y-10",
    "border-spacing-11",
    "border-spacing-x-11",
    "border-spacing-y-11",
    "border-spacing-12",
    "border-spacing-x-12",
    "border-spacing-y-12",
    "border-spacing-14",
    "border-spacing-x-14",
    "border-spacing-y-14",
    "border-spacing-16",
    "border-spacing-x-16",
    "border-spacing-y-16",
    "border-spacing-20",
    "border-spacing-x-20",
    "border-spacing-y-20",
    "border-spacing-24",
    "border-spacing-x-24",
    "border-spacing-y-24",
    "border-spacing-28",
    "border-spacing-x-28",
    "border-spacing-y-28",
    "border-spacing-32",
    "border-spacing-x-32",
    "border-spacing-y-32",
    "border-spacing-36",
    "border-spacing-x-36",
    "border-spacing-y-36",
    "border-spacing-40",
    "border-spacing-x-40",
    "border-spacing-y-40",
    "border-spacing-44",
    "border-spacing-x-44",
    "border-spacing-y-44",
    "border-spacing-48",
    "border-spacing-x-48",
    "border-spacing-y-48",
    "border-spacing-52",
    "border-spacing-x-52",
    "border-spacing-y-52",
    "border-spacing-56",
    "border-spacing-x-56",
    "border-spacing-y-56",
    "border-spacing-60",
    "border-spacing-x-60",
    "border-spacing-y-60",
    "border-spacing-64",
    "border-spacing-x-64",
    "border-spacing-y-64",
    "border-spacing-72",
    "border-spacing-x-72",
    "border-spacing-y-72",
    "border-spacing-80",
    "border-spacing-x-80",
    "border-spacing-y-80",
    "border-spacing-96",
    "border-spacing-x-96",
    "border-spacing-y-96",
    "Indiana",
    "Ohio",
    "Michigan",
    "table-auto",
    "table-fixed",
    "caption-top",
    "caption-bottom",
    "transition-none",
    "transition-all",
    "transition",
    "transition-colors",
    "transition-opacity",
    "transition-shadow",
    "transition-transform",
    "duration-0",
    "duration-75",
    "duration-100",
    "duration-150",
    "duration-200",
    "duration-300",
    "duration-500",
    "duration-700",
    "duration-1000",
    "ease-linear",
    "ease-in",
    "ease-out",
    "ease-in-out",
    "delay-0",
    "delay-75",
    "delay-100",
    "delay-150",
    "delay-200",
    "delay-300",
    "delay-500",
    "delay-700",
    "delay-1000",
    "animate-none",
    "animate-spin",
    "animate-ping",
    "animate-pulse",
    "animate-bounce",
    "scale-0",
    "scale-x-0",
    "scale-y-0",
    "scale-50",
    "scale-x-50",
    "scale-y-50",
    "scale-75",
    "scale-x-75",
    "scale-y-75",
    "scale-90",
    "scale-x-90",
    "scale-y-90",
    "scale-95",
    "scale-x-95",
    "scale-y-95",
    "scale-100",
    "scale-x-100",
    "scale-y-100",
    "scale-105",
    "scale-x-105",
    "scale-y-105",
    "scale-110",
    "scale-x-110",
    "scale-y-110",
    "scale-125",
    "scale-x-125",
    "scale-y-125",
    "scale-150",
    "scale-x-150",
    "scale-y-150",
    "rotate-0",
    "rotate-1",
    "rotate-2",
    "rotate-3",
    "rotate-6",
    "rotate-12",
    "rotate-45",
    "rotate-90",
    "rotate-180",
    "translate-x-0",
    "translate-y-0",
    "translate-x-px",
    "translate-y-px",
    "translate-x-0.5",
    "translate-y-0.5",
    "translate-x-1",
    "translate-y-1",
    "translate-x-1.5",
    "translate-y-1.5",
    "translate-x-2",
    "translate-y-2",
    "translate-x-2.5",
    "translate-y-2.5",
    "translate-x-3",
    "translate-y-3",
    "translate-x-3.5",
    "translate-y-3.5",
    "translate-x-4",
    "translate-y-4",
    "translate-x-5",
    "translate-y-5",
    "translate-x-6",
    "translate-y-6",
    "translate-x-7",
    "translate-y-7",
    "translate-x-8",
    "translate-y-8",
    "translate-x-9",
    "translate-y-9",
    "translate-x-10",
    "translate-y-10",
    "translate-x-11",
    "translate-y-11",
    "translate-x-12",
    "translate-y-12",
    "translate-x-14",
    "translate-y-14",
    "translate-x-16",
    "translate-y-16",
    "translate-x-20",
    "translate-y-20",
    "translate-x-24",
    "translate-y-24",
    "translate-x-28",
    "translate-y-28",
    "translate-x-32",
    "translate-y-32",
    "translate-x-36",
    "translate-y-36",
    "translate-x-40",
    "translate-y-40",
    "translate-x-44",
    "translate-y-44",
    "translate-x-48",
    "translate-y-48",
    "translate-x-52",
    "translate-y-52",
    "translate-x-56",
    "translate-y-56",
    "translate-x-60",
    "translate-y-60",
    "translate-x-64",
    "translate-y-64",
    "translate-x-72",
    "translate-y-72",
    "translate-x-80",
    "translate-y-80",
    "translate-x-96",
    "translate-y-96",
    "translate-x-1/2",
    "translate-x-1/3",
    "translate-x-2/3",
    "translate-x-1/4",
    "translate-x-2/4",
    "translate-x-3/4",
    "translate-x-full",
    "translate-y-1/2",
    "translate-y-1/3",
    "translate-y-2/3",
    "translate-y-1/4",
    "translate-y-2/4",
    "translate-y-3/4",
    "translate-y-full",
    "skew-x-0",
    "skew-y-0",
    "skew-x-1",
    "skew-y-1",
    "skew-x-2",
    "skew-y-2",
    "skew-x-3",
    "skew-y-3",
    "skew-x-6",
    "skew-y-6",
    "skew-x-12",
    "skew-y-12",
    "origin-center",
    "origin-top",
    "origin-top-right",
    "origin-right",
    "origin-bottom-right",
    "origin-bottom",
    "origin-bottom-left",
    "origin-left",
    "origin-top-left",
    "accent-inherit",
    "accent-current",
    "accent-transparent",
    "accent-black",
    "accent-white",
    "accent-slate-50",
    "accent-slate-100",
    "accent-slate-200",
    "accent-slate-300",
    "accent-slate-400",
    "accent-slate-500",
    "accent-slate-600",
    "accent-slate-700",
    "accent-slate-800",
    "accent-slate-900",
    "accent-slate-950",
    "accent-gray-50",
    "accent-gray-100",
    "accent-gray-200",
    "accent-gray-300",
    "accent-gray-400",
    "accent-gray-500",
    "accent-gray-600",
    "accent-gray-700",
    "accent-gray-800",
    "accent-gray-900",
    "accent-gray-950",
    "accent-zinc-50",
    "accent-zinc-100",
    "accent-zinc-200",
    "accent-zinc-300",
    "accent-zinc-400",
    "accent-zinc-500",
    "accent-zinc-600",
    "accent-zinc-700",
    "accent-zinc-800",
    "accent-zinc-900",
    "accent-zinc-950",
    "accent-neutral-50",
    "accent-neutral-100",
    "accent-neutral-200",
    "accent-neutral-300",
    "accent-neutral-400",
    "accent-neutral-500",
    "accent-neutral-600",
    "accent-neutral-700",
    "accent-neutral-800",
    "accent-neutral-900",
    "accent-neutral-950",
    "accent-stone-50",
    "accent-stone-100",
    "accent-stone-200",
    "accent-stone-300",
    "accent-stone-400",
    "accent-stone-500",
    "accent-stone-600",
    "accent-stone-700",
    "accent-stone-800",
    "accent-stone-900",
    "accent-stone-950",
    "accent-red-50",
    "accent-red-100",
    "accent-red-200",
    "accent-red-300",
    "accent-red-400",
    "accent-red-500",
    "accent-red-600",
    "accent-red-700",
    "accent-red-800",
    "accent-red-900",
    "accent-red-950",
    "accent-orange-50",
    "accent-orange-100",
    "accent-orange-200",
    "accent-orange-300",
    "accent-orange-400",
    "accent-orange-500",
    "accent-orange-600",
    "accent-orange-700",
    "accent-orange-800",
    "accent-orange-900",
    "accent-orange-950",
    "accent-amber-50",
    "accent-amber-100",
    "accent-amber-200",
    "accent-amber-300",
    "accent-amber-400",
    "accent-amber-500",
    "accent-amber-600",
    "accent-amber-700",
    "accent-amber-800",
    "accent-amber-900",
    "accent-amber-950",
    "accent-yellow-50",
    "accent-yellow-100",
    "accent-yellow-200",
    "accent-yellow-300",
    "accent-yellow-400",
    "accent-yellow-500",
    "accent-yellow-600",
    "accent-yellow-700",
    "accent-yellow-800",
    "accent-yellow-900",
    "accent-yellow-950",
    "accent-lime-50",
    "accent-lime-100",
    "accent-lime-200",
    "accent-lime-300",
    "accent-lime-400",
    "accent-lime-500",
    "accent-lime-600",
    "accent-lime-700",
    "accent-lime-800",
    "accent-lime-900",
    "accent-lime-950",
    "accent-green-50",
    "accent-green-100",
    "accent-green-200",
    "accent-green-300",
    "accent-green-400",
    "accent-green-500",
    "accent-green-600",
    "accent-green-700",
    "accent-green-800",
    "accent-green-900",
    "accent-green-950",
    "accent-emerald-50",
    "accent-emerald-100",
    "accent-emerald-200",
    "accent-emerald-300",
    "accent-emerald-400",
    "accent-emerald-500",
    "accent-emerald-600",
    "accent-emerald-700",
    "accent-emerald-800",
    "accent-emerald-900",
    "accent-emerald-950",
    "accent-teal-50",
    "accent-teal-100",
    "accent-teal-200",
    "accent-teal-300",
    "accent-teal-400",
    "accent-teal-500",
    "accent-teal-600",
    "accent-teal-700",
    "accent-teal-800",
    "accent-teal-900",
    "accent-teal-950",
    "accent-cyan-50",
    "accent-cyan-100",
    "accent-cyan-200",
    "accent-cyan-300",
    "accent-cyan-400",
    "accent-cyan-500",
    "accent-cyan-600",
    "accent-cyan-700",
    "accent-cyan-800",
    "accent-cyan-900",
    "accent-cyan-950",
    "accent-sky-50",
    "accent-sky-100",
    "accent-sky-200",
    "accent-sky-300",
    "accent-sky-400",
    "accent-sky-500",
    "accent-sky-600",
    "accent-sky-700",
    "accent-sky-800",
    "accent-sky-900",
    "accent-sky-950",
    "accent-blue-50",
    "accent-blue-100",
    "accent-blue-200",
    "accent-blue-300",
    "accent-blue-400",
    "accent-blue-500",
    "accent-blue-600",
    "accent-blue-700",
    "accent-blue-800",
    "accent-blue-900",
    "accent-blue-950",
    "accent-indigo-50",
    "accent-indigo-100",
    "accent-indigo-200",
    "accent-indigo-300",
    "accent-indigo-400",
    "accent-indigo-500",
    "accent-indigo-600",
    "accent-indigo-700",
    "accent-indigo-800",
    "accent-indigo-900",
    "accent-indigo-950",
    "accent-violet-50",
    "accent-violet-100",
    "accent-violet-200",
    "accent-violet-300",
    "accent-violet-400",
    "accent-violet-500",
    "accent-violet-600",
    "accent-violet-700",
    "accent-violet-800",
    "accent-violet-900",
    "accent-violet-950",
    "accent-purple-50",
    "accent-purple-100",
    "accent-purple-200",
    "accent-purple-300",
    "accent-purple-400",
    "accent-purple-500",
    "accent-purple-600",
    "accent-purple-700",
    "accent-purple-800",
    "accent-purple-900",
    "accent-purple-950",
    "accent-fuchsia-50",
    "accent-fuchsia-100",
    "accent-fuchsia-200",
    "accent-fuchsia-300",
    "accent-fuchsia-400",
    "accent-fuchsia-500",
    "accent-fuchsia-600",
    "accent-fuchsia-700",
    "accent-fuchsia-800",
    "accent-fuchsia-900",
    "accent-fuchsia-950",
    "accent-pink-50",
    "accent-pink-100",
    "accent-pink-200",
    "accent-pink-300",
    "accent-pink-400",
    "accent-pink-500",
    "accent-pink-600",
    "accent-pink-700",
    "accent-pink-800",
    "accent-pink-900",
    "accent-pink-950",
    "accent-rose-50",
    "accent-rose-100",
    "accent-rose-200",
    "accent-rose-300",
    "accent-rose-400",
    "accent-rose-500",
    "accent-rose-600",
    "accent-rose-700",
    "accent-rose-800",
    "accent-rose-900",
    "accent-rose-950",
    "accent-auto",
    "appearance-none",
    "appearance-auto",
    "cursor-auto",
    "cursor-default",
    "cursor-pointer",
    "cursor-wait",
    "cursor-text",
    "cursor-move",
    "cursor-help",
    "cursor-not-allowed",
    "cursor-none",
    "cursor-context-menu",
    "cursor-progress",
    "cursor-cell",
    "cursor-crosshair",
    "cursor-vertical-text",
    "cursor-alias",
    "cursor-copy",
    "cursor-no-drop",
    "cursor-grab",
    "cursor-grabbing",
    "cursor-all-scroll",
    "cursor-col-resize",
    "cursor-row-resize",
    "cursor-n-resize",
    "cursor-e-resize",
    "cursor-s-resize",
    "cursor-w-resize",
    "cursor-ne-resize",
    "cursor-nw-resize",
    "cursor-se-resize",
    "cursor-sw-resize",
    "cursor-ew-resize",
    "cursor-ns-resize",
    "cursor-nesw-resize",
    "cursor-nwse-resize",
    "cursor-zoom-in",
    "cursor-zoom-out",
    "caret-inherit",
    "caret-current",
    "caret-transparent",
    "caret-black",
    "caret-white",
    "caret-slate-50",
    "caret-slate-100",
    "caret-slate-200",
    "caret-slate-300",
    "caret-slate-400",
    "caret-slate-500",
    "caret-slate-600",
    "caret-slate-700",
    "caret-slate-800",
    "caret-slate-900",
    "caret-slate-950",
    "caret-gray-50",
    "caret-gray-100",
    "caret-gray-200",
    "caret-gray-300",
    "caret-gray-400",
    "caret-gray-500",
    "caret-gray-600",
    "caret-gray-700",
    "caret-gray-800",
    "caret-gray-900",
    "caret-gray-950",
    "caret-zinc-50",
    "caret-zinc-100",
    "caret-zinc-200",
    "caret-zinc-300",
    "caret-zinc-400",
    "caret-zinc-500",
    "caret-zinc-600",
    "caret-zinc-700",
    "caret-zinc-800",
    "caret-zinc-900",
    "caret-zinc-950",
    "caret-neutral-50",
    "caret-neutral-100",
    "caret-neutral-200",
    "caret-neutral-300",
    "caret-neutral-400",
    "caret-neutral-500",
    "caret-neutral-600",
    "caret-neutral-700",
    "caret-neutral-800",
    "caret-neutral-900",
    "caret-neutral-950",
    "caret-stone-50",
    "caret-stone-100",
    "caret-stone-200",
    "caret-stone-300",
    "caret-stone-400",
    "caret-stone-500",
    "caret-stone-600",
    "caret-stone-700",
    "caret-stone-800",
    "caret-stone-900",
    "caret-stone-950",
    "caret-red-50",
    "caret-red-100",
    "caret-red-200",
    "caret-red-300",
    "caret-red-400",
    "caret-red-500",
    "caret-red-600",
    "caret-red-700",
    "caret-red-800",
    "caret-red-900",
    "caret-red-950",
    "caret-orange-50",
    "caret-orange-100",
    "caret-orange-200",
    "caret-orange-300",
    "caret-orange-400",
    "caret-orange-500",
    "caret-orange-600",
    "caret-orange-700",
    "caret-orange-800",
    "caret-orange-900",
    "caret-orange-950",
    "caret-amber-50",
    "caret-amber-100",
    "caret-amber-200",
    "caret-amber-300",
    "caret-amber-400",
    "caret-amber-500",
    "caret-amber-600",
    "caret-amber-700",
    "caret-amber-800",
    "caret-amber-900",
    "caret-amber-950",
    "caret-yellow-50",
    "caret-yellow-100",
    "caret-yellow-200",
    "caret-yellow-300",
    "caret-yellow-400",
    "caret-yellow-500",
    "caret-yellow-600",
    "caret-yellow-700",
    "caret-yellow-800",
    "caret-yellow-900",
    "caret-yellow-950",
    "caret-lime-50",
    "caret-lime-100",
    "caret-lime-200",
    "caret-lime-300",
    "caret-lime-400",
    "caret-lime-500",
    "caret-lime-600",
    "caret-lime-700",
    "caret-lime-800",
    "caret-lime-900",
    "caret-lime-950",
    "caret-green-50",
    "caret-green-100",
    "caret-green-200",
    "caret-green-300",
    "caret-green-400",
    "caret-green-500",
    "caret-green-600",
    "caret-green-700",
    "caret-green-800",
    "caret-green-900",
    "caret-green-950",
    "caret-emerald-50",
    "caret-emerald-100",
    "caret-emerald-200",
    "caret-emerald-300",
    "caret-emerald-400",
    "caret-emerald-500",
    "caret-emerald-600",
    "caret-emerald-700",
    "caret-emerald-800",
    "caret-emerald-900",
    "caret-emerald-950",
    "caret-teal-50",
    "caret-teal-100",
    "caret-teal-200",
    "caret-teal-300",
    "caret-teal-400",
    "caret-teal-500",
    "caret-teal-600",
    "caret-teal-700",
    "caret-teal-800",
    "caret-teal-900",
    "caret-teal-950",
    "caret-cyan-50",
    "caret-cyan-100",
    "caret-cyan-200",
    "caret-cyan-300",
    "caret-cyan-400",
    "caret-cyan-500",
    "caret-cyan-600",
    "caret-cyan-700",
    "caret-cyan-800",
    "caret-cyan-900",
    "caret-cyan-950",
    "caret-sky-50",
    "caret-sky-100",
    "caret-sky-200",
    "caret-sky-300",
    "caret-sky-400",
    "caret-sky-500",
    "caret-sky-600",
    "caret-sky-700",
    "caret-sky-800",
    "caret-sky-900",
    "caret-sky-950",
    "caret-blue-50",
    "caret-blue-100",
    "caret-blue-200",
    "caret-blue-300",
    "caret-blue-400",
    "caret-blue-500",
    "caret-blue-600",
    "caret-blue-700",
    "caret-blue-800",
    "caret-blue-900",
    "caret-blue-950",
    "caret-indigo-50",
    "caret-indigo-100",
    "caret-indigo-200",
    "caret-indigo-300",
    "caret-indigo-400",
    "caret-indigo-500",
    "caret-indigo-600",
    "caret-indigo-700",
    "caret-indigo-800",
    "caret-indigo-900",
    "caret-indigo-950",
    "caret-violet-50",
    "caret-violet-100",
    "caret-violet-200",
    "caret-violet-300",
    "caret-violet-400",
    "caret-violet-500",
    "caret-violet-600",
    "caret-violet-700",
    "caret-violet-800",
    "caret-violet-900",
    "caret-violet-950",
    "caret-purple-50",
    "caret-purple-100",
    "caret-purple-200",
    "caret-purple-300",
    "caret-purple-400",
    "caret-purple-500",
    "caret-purple-600",
    "caret-purple-700",
    "caret-purple-800",
    "caret-purple-900",
    "caret-purple-950",
    "caret-fuchsia-50",
    "caret-fuchsia-100",
    "caret-fuchsia-200",
    "caret-fuchsia-300",
    "caret-fuchsia-400",
    "caret-fuchsia-500",
    "caret-fuchsia-600",
    "caret-fuchsia-700",
    "caret-fuchsia-800",
    "caret-fuchsia-900",
    "caret-fuchsia-950",
    "caret-pink-50",
    "caret-pink-100",
    "caret-pink-200",
    "caret-pink-300",
    "caret-pink-400",
    "caret-pink-500",
    "caret-pink-600",
    "caret-pink-700",
    "caret-pink-800",
    "caret-pink-900",
    "caret-pink-950",
    "caret-rose-50",
    "caret-rose-100",
    "caret-rose-200",
    "caret-rose-300",
    "caret-rose-400",
    "caret-rose-500",
    "caret-rose-600",
    "caret-rose-700",
    "caret-rose-800",
    "caret-rose-900",
    "caret-rose-950",
    "pointer-events-none",
    "pointer-events-auto",
    "resize-none",
    "resize-y",
    "resize-x",
    "resize",
    "scroll-auto",
    "scroll-smooth",
    "scroll-m-0",
    "scroll-mx-0",
    "scroll-my-0",
    "scroll-ms-0",
    "scroll-me-0",
    "scroll-mt-0",
    "scroll-mr-0",
    "scroll-mb-0",
    "scroll-ml-0",
    "scroll-m-px",
    "scroll-mx-px",
    "scroll-my-px",
    "scroll-ms-px",
    "scroll-me-px",
    "scroll-mt-px",
    "scroll-mr-px",
    "scroll-mb-px",
    "scroll-ml-px",
    "scroll-m-0.5",
    "scroll-mx-0.5",
    "scroll-my-0.5",
    "scroll-ms-0.5",
    "scroll-me-0.5",
    "scroll-mt-0.5",
    "scroll-mr-0.5",
    "scroll-mb-0.5",
    "scroll-ml-0.5",
    "scroll-m-1",
    "scroll-mx-1",
    "scroll-my-1",
    "scroll-ms-1",
    "scroll-me-1",
    "scroll-mt-1",
    "scroll-mr-1",
    "scroll-mb-1",
    "scroll-ml-1",
    "scroll-m-1.5",
    "scroll-mx-1.5",
    "scroll-my-1.5",
    "scroll-ms-1.5",
    "scroll-me-1.5",
    "scroll-mt-1.5",
    "scroll-mr-1.5",
    "scroll-mb-1.5",
    "scroll-ml-1.5",
    "scroll-m-2",
    "scroll-mx-2",
    "scroll-my-2",
    "scroll-ms-2",
    "scroll-me-2",
    "scroll-mt-2",
    "scroll-mr-2",
    "scroll-mb-2",
    "scroll-ml-2",
    "scroll-m-2.5",
    "scroll-mx-2.5",
    "scroll-my-2.5",
    "scroll-ms-2.5",
    "scroll-me-2.5",
    "scroll-mt-2.5",
    "scroll-mr-2.5",
    "scroll-mb-2.5",
    "scroll-ml-2.5",
    "scroll-m-3",
    "scroll-mx-3",
    "scroll-my-3",
    "scroll-ms-3",
    "scroll-me-3",
    "scroll-mt-3",
    "scroll-mr-3",
    "scroll-mb-3",
    "scroll-ml-3",
    "scroll-m-3.5",
    "scroll-mx-3.5",
    "scroll-my-3.5",
    "scroll-ms-3.5",
    "scroll-me-3.5",
    "scroll-mt-3.5",
    "scroll-mr-3.5",
    "scroll-mb-3.5",
    "scroll-ml-3.5",
    "scroll-m-4",
    "scroll-mx-4",
    "scroll-my-4",
    "scroll-ms-4",
    "scroll-me-4",
    "scroll-mt-4",
    "scroll-mr-4",
    "scroll-mb-4",
    "scroll-ml-4",
    "scroll-m-5",
    "scroll-mx-5",
    "scroll-my-5",
    "scroll-ms-5",
    "scroll-me-5",
    "scroll-mt-5",
    "scroll-mr-5",
    "scroll-mb-5",
    "scroll-ml-5",
    "scroll-m-6",
    "scroll-mx-6",
    "scroll-my-6",
    "scroll-ms-6",
    "scroll-me-6",
    "scroll-mt-6",
    "scroll-mr-6",
    "scroll-mb-6",
    "scroll-ml-6",
    "scroll-m-7",
    "scroll-mx-7",
    "scroll-my-7",
    "scroll-ms-7",
    "scroll-me-7",
    "scroll-mt-7",
    "scroll-mr-7",
    "scroll-mb-7",
    "scroll-ml-7",
    "scroll-m-8",
    "scroll-mx-8",
    "scroll-my-8",
    "scroll-ms-8",
    "scroll-me-8",
    "scroll-mt-8",
    "scroll-mr-8",
    "scroll-mb-8",
    "scroll-ml-8",
    "scroll-m-9",
    "scroll-mx-9",
    "scroll-my-9",
    "scroll-ms-9",
    "scroll-me-9",
    "scroll-mt-9",
    "scroll-mr-9",
    "scroll-mb-9",
    "scroll-ml-9",
    "scroll-m-10",
    "scroll-mx-10",
    "scroll-my-10",
    "scroll-ms-10",
    "scroll-me-10",
    "scroll-mt-10",
    "scroll-mr-10",
    "scroll-mb-10",
    "scroll-ml-10",
    "scroll-m-11",
    "scroll-mx-11",
    "scroll-my-11",
    "scroll-ms-11",
    "scroll-me-11",
    "scroll-mt-11",
    "scroll-mr-11",
    "scroll-mb-11",
    "scroll-ml-11",
    "scroll-m-12",
    "scroll-mx-12",
    "scroll-my-12",
    "scroll-ms-12",
    "scroll-me-12",
    "scroll-mt-12",
    "scroll-mr-12",
    "scroll-mb-12",
    "scroll-ml-12",
    "scroll-m-14",
    "scroll-mx-14",
    "scroll-my-14",
    "scroll-ms-14",
    "scroll-me-14",
    "scroll-mt-14",
    "scroll-mr-14",
    "scroll-mb-14",
    "scroll-ml-14",
    "scroll-m-16",
    "scroll-mx-16",
    "scroll-my-16",
    "scroll-ms-16",
    "scroll-me-16",
    "scroll-mt-16",
    "scroll-mr-16",
    "scroll-mb-16",
    "scroll-ml-16",
    "scroll-m-20",
    "scroll-mx-20",
    "scroll-my-20",
    "scroll-ms-20",
    "scroll-me-20",
    "scroll-mt-20",
    "scroll-mr-20",
    "scroll-mb-20",
    "scroll-ml-20",
    "scroll-m-24",
    "scroll-mx-24",
    "scroll-my-24",
    "scroll-ms-24",
    "scroll-me-24",
    "scroll-mt-24",
    "scroll-mr-24",
    "scroll-mb-24",
    "scroll-ml-24",
    "scroll-m-28",
    "scroll-mx-28",
    "scroll-my-28",
    "scroll-ms-28",
    "scroll-me-28",
    "scroll-mt-28",
    "scroll-mr-28",
    "scroll-mb-28",
    "scroll-ml-28",
    "scroll-m-32",
    "scroll-mx-32",
    "scroll-my-32",
    "scroll-ms-32",
    "scroll-me-32",
    "scroll-mt-32",
    "scroll-mr-32",
    "scroll-mb-32",
    "scroll-ml-32",
    "scroll-m-36",
    "scroll-mx-36",
    "scroll-my-36",
    "scroll-ms-36",
    "scroll-me-36",
    "scroll-mt-36",
    "scroll-mr-36",
    "scroll-mb-36",
    "scroll-ml-36",
    "scroll-m-40",
    "scroll-mx-40",
    "scroll-my-40",
    "scroll-ms-40",
    "scroll-me-40",
    "scroll-mt-40",
    "scroll-mr-40",
    "scroll-mb-40",
    "scroll-ml-40",
    "scroll-m-44",
    "scroll-mx-44",
    "scroll-my-44",
    "scroll-ms-44",
    "scroll-me-44",
    "scroll-mt-44",
    "scroll-mr-44",
    "scroll-mb-44",
    "scroll-ml-44",
    "scroll-m-48",
    "scroll-mx-48",
    "scroll-my-48",
    "scroll-ms-48",
    "scroll-me-48",
    "scroll-mt-48",
    "scroll-mr-48",
    "scroll-mb-48",
    "scroll-ml-48",
    "scroll-m-52",
    "scroll-mx-52",
    "scroll-my-52",
    "scroll-ms-52",
    "scroll-me-52",
    "scroll-mt-52",
    "scroll-mr-52",
    "scroll-mb-52",
    "scroll-ml-52",
    "scroll-m-56",
    "scroll-mx-56",
    "scroll-my-56",
    "scroll-ms-56",
    "scroll-me-56",
    "scroll-mt-56",
    "scroll-mr-56",
    "scroll-mb-56",
    "scroll-ml-56",
    "scroll-m-60",
    "scroll-mx-60",
    "scroll-my-60",
    "scroll-ms-60",
    "scroll-me-60",
    "scroll-mt-60",
    "scroll-mr-60",
    "scroll-mb-60",
    "scroll-ml-60",
    "scroll-m-64",
    "scroll-mx-64",
    "scroll-my-64",
    "scroll-ms-64",
    "scroll-me-64",
    "scroll-mt-64",
    "scroll-mr-64",
    "scroll-mb-64",
    "scroll-ml-64",
    "scroll-m-72",
    "scroll-mx-72",
    "scroll-my-72",
    "scroll-ms-72",
    "scroll-me-72",
    "scroll-mt-72",
    "scroll-mr-72",
    "scroll-mb-72",
    "scroll-ml-72",
    "scroll-m-80",
    "scroll-mx-80",
    "scroll-my-80",
    "scroll-ms-80",
    "scroll-me-80",
    "scroll-mt-80",
    "scroll-mr-80",
    "scroll-mb-80",
    "scroll-ml-80",
    "scroll-m-96",
    "scroll-mx-96",
    "scroll-my-96",
    "scroll-ms-96",
    "scroll-me-96",
    "scroll-mt-96",
    "scroll-mr-96",
    "scroll-mb-96",
    "scroll-ml-96",
    "scroll-p-0",
    "scroll-px-0",
    "scroll-py-0",
    "scroll-ps-0",
    "scroll-pe-0",
    "scroll-pt-0",
    "scroll-pr-0",
    "scroll-pb-0",
    "scroll-pl-0",
    "scroll-p-px",
    "scroll-px-px",
    "scroll-py-px",
    "scroll-ps-px",
    "scroll-pe-px",
    "scroll-pt-px",
    "scroll-pr-px",
    "scroll-pb-px",
    "scroll-pl-px",
    "scroll-p-0.5",
    "scroll-px-0.5",
    "scroll-py-0.5",
    "scroll-ps-0.5",
    "scroll-pe-0.5",
    "scroll-pt-0.5",
    "scroll-pr-0.5",
    "scroll-pb-0.5",
    "scroll-pl-0.5",
    "scroll-p-1",
    "scroll-px-1",
    "scroll-py-1",
    "scroll-ps-1",
    "scroll-pe-1",
    "scroll-pt-1",
    "scroll-pr-1",
    "scroll-pb-1",
    "scroll-pl-1",
    "scroll-p-1.5",
    "scroll-px-1.5",
    "scroll-py-1.5",
    "scroll-ps-1.5",
    "scroll-pe-1.5",
    "scroll-pt-1.5",
    "scroll-pr-1.5",
    "scroll-pb-1.5",
    "scroll-pl-1.5",
    "scroll-p-2",
    "scroll-px-2",
    "scroll-py-2",
    "scroll-ps-2",
    "scroll-pe-2",
    "scroll-pt-2",
    "scroll-pr-2",
    "scroll-pb-2",
    "scroll-pl-2",
    "scroll-p-2.5",
    "scroll-px-2.5",
    "scroll-py-2.5",
    "scroll-ps-2.5",
    "scroll-pe-2.5",
    "scroll-pt-2.5",
    "scroll-pr-2.5",
    "scroll-pb-2.5",
    "scroll-pl-2.5",
    "scroll-p-3",
    "scroll-px-3",
    "scroll-py-3",
    "scroll-ps-3",
    "scroll-pe-3",
    "scroll-pt-3",
    "scroll-pr-3",
    "scroll-pb-3",
    "scroll-pl-3",
    "scroll-p-3.5",
    "scroll-px-3.5",
    "scroll-py-3.5",
    "scroll-ps-3.5",
    "scroll-pe-3.5",
    "scroll-pt-3.5",
    "scroll-pr-3.5",
    "scroll-pb-3.5",
    "scroll-pl-3.5",
    "scroll-p-4",
    "scroll-px-4",
    "scroll-py-4",
    "scroll-ps-4",
    "scroll-pe-4",
    "scroll-pt-4",
    "scroll-pr-4",
    "scroll-pb-4",
    "scroll-pl-4",
    "scroll-p-5",
    "scroll-px-5",
    "scroll-py-5",
    "scroll-ps-5",
    "scroll-pe-5",
    "scroll-pt-5",
    "scroll-pr-5",
    "scroll-pb-5",
    "scroll-pl-5",
    "scroll-p-6",
    "scroll-px-6",
    "scroll-py-6",
    "scroll-ps-6",
    "scroll-pe-6",
    "scroll-pt-6",
    "scroll-pr-6",
    "scroll-pb-6",
    "scroll-pl-6",
    "scroll-p-7",
    "scroll-px-7",
    "scroll-py-7",
    "scroll-ps-7",
    "scroll-pe-7",
    "scroll-pt-7",
    "scroll-pr-7",
    "scroll-pb-7",
    "scroll-pl-7",
    "scroll-p-8",
    "scroll-px-8",
    "scroll-py-8",
    "scroll-ps-8",
    "scroll-pe-8",
    "scroll-pt-8",
    "scroll-pr-8",
    "scroll-pb-8",
    "scroll-pl-8",
    "scroll-p-9",
    "scroll-px-9",
    "scroll-py-9",
    "scroll-ps-9",
    "scroll-pe-9",
    "scroll-pt-9",
    "scroll-pr-9",
    "scroll-pb-9",
    "scroll-pl-9",
    "scroll-p-10",
    "scroll-px-10",
    "scroll-py-10",
    "scroll-ps-10",
    "scroll-pe-10",
    "scroll-pt-10",
    "scroll-pr-10",
    "scroll-pb-10",
    "scroll-pl-10",
    "scroll-p-11",
    "scroll-px-11",
    "scroll-py-11",
    "scroll-ps-11",
    "scroll-pe-11",
    "scroll-pt-11",
    "scroll-pr-11",
    "scroll-pb-11",
    "scroll-pl-11",
    "scroll-p-12",
    "scroll-px-12",
    "scroll-py-12",
    "scroll-ps-12",
    "scroll-pe-12",
    "scroll-pt-12",
    "scroll-pr-12",
    "scroll-pb-12",
    "scroll-pl-12",
    "scroll-p-14",
    "scroll-px-14",
    "scroll-py-14",
    "scroll-ps-14",
    "scroll-pe-14",
    "scroll-pt-14",
    "scroll-pr-14",
    "scroll-pb-14",
    "scroll-pl-14",
    "scroll-p-16",
    "scroll-px-16",
    "scroll-py-16",
    "scroll-ps-16",
    "scroll-pe-16",
    "scroll-pt-16",
    "scroll-pr-16",
    "scroll-pb-16",
    "scroll-pl-16",
    "scroll-p-20",
    "scroll-px-20",
    "scroll-py-20",
    "scroll-ps-20",
    "scroll-pe-20",
    "scroll-pt-20",
    "scroll-pr-20",
    "scroll-pb-20",
    "scroll-pl-20",
    "scroll-p-24",
    "scroll-px-24",
    "scroll-py-24",
    "scroll-ps-24",
    "scroll-pe-24",
    "scroll-pt-24",
    "scroll-pr-24",
    "scroll-pb-24",
    "scroll-pl-24",
    "scroll-p-28",
    "scroll-px-28",
    "scroll-py-28",
    "scroll-ps-28",
    "scroll-pe-28",
    "scroll-pt-28",
    "scroll-pr-28",
    "scroll-pb-28",
    "scroll-pl-28",
    "scroll-p-32",
    "scroll-px-32",
    "scroll-py-32",
    "scroll-ps-32",
    "scroll-pe-32",
    "scroll-pt-32",
    "scroll-pr-32",
    "scroll-pb-32",
    "scroll-pl-32",
    "scroll-p-36",
    "scroll-px-36",
    "scroll-py-36",
    "scroll-ps-36",
    "scroll-pe-36",
    "scroll-pt-36",
    "scroll-pr-36",
    "scroll-pb-36",
    "scroll-pl-36",
    "scroll-p-40",
    "scroll-px-40",
    "scroll-py-40",
    "scroll-ps-40",
    "scroll-pe-40",
    "scroll-pt-40",
    "scroll-pr-40",
    "scroll-pb-40",
    "scroll-pl-40",
    "scroll-p-44",
    "scroll-px-44",
    "scroll-py-44",
    "scroll-ps-44",
    "scroll-pe-44",
    "scroll-pt-44",
    "scroll-pr-44",
    "scroll-pb-44",
    "scroll-pl-44",
    "scroll-p-48",
    "scroll-px-48",
    "scroll-py-48",
    "scroll-ps-48",
    "scroll-pe-48",
    "scroll-pt-48",
    "scroll-pr-48",
    "scroll-pb-48",
    "scroll-pl-48",
    "scroll-p-52",
    "scroll-px-52",
    "scroll-py-52",
    "scroll-ps-52",
    "scroll-pe-52",
    "scroll-pt-52",
    "scroll-pr-52",
    "scroll-pb-52",
    "scroll-pl-52",
    "scroll-p-56",
    "scroll-px-56",
    "scroll-py-56",
    "scroll-ps-56",
    "scroll-pe-56",
    "scroll-pt-56",
    "scroll-pr-56",
    "scroll-pb-56",
    "scroll-pl-56",
    "scroll-p-60",
    "scroll-px-60",
    "scroll-py-60",
    "scroll-ps-60",
    "scroll-pe-60",
    "scroll-pt-60",
    "scroll-pr-60",
    "scroll-pb-60",
    "scroll-pl-60",
    "scroll-p-64",
    "scroll-px-64",
    "scroll-py-64",
    "scroll-ps-64",
    "scroll-pe-64",
    "scroll-pt-64",
    "scroll-pr-64",
    "scroll-pb-64",
    "scroll-pl-64",
    "scroll-p-72",
    "scroll-px-72",
    "scroll-py-72",
    "scroll-ps-72",
    "scroll-pe-72",
    "scroll-pt-72",
    "scroll-pr-72",
    "scroll-pb-72",
    "scroll-pl-72",
    "scroll-p-80",
    "scroll-px-80",
    "scroll-py-80",
    "scroll-ps-80",
    "scroll-pe-80",
    "scroll-pt-80",
    "scroll-pr-80",
    "scroll-pb-80",
    "scroll-pl-80",
    "scroll-p-96",
    "scroll-px-96",
    "scroll-py-96",
    "scroll-ps-96",
    "scroll-pe-96",
    "scroll-pt-96",
    "scroll-pr-96",
    "scroll-pb-96",
    "scroll-pl-96",
    "snap-start",
    "snap-end",
    "snap-center",
    "snap-align-none",
    "snap-normal",
    "snap-always",
    "snap-none",
    "snap-x",
    "snap-y",
    "snap-both",
    "snap-mandatory",
    "snap-proximity",
    "touch-auto",
    "touch-none",
    "touch-pan-x",
    "touch-pan-left",
    "touch-pan-right",
    "touch-pan-y",
    "touch-pan-up",
    "touch-pan-down",
    "touch-pinch-zoom",
    "touch-manipulation",
    "select-none",
    "select-text",
    "select-all",
    "select-auto",
    "will-change-auto",
    "will-change-scroll",
    "will-change-contents",
    "will-change-transform",
    "fill-none",
    "fill-inherit",
    "fill-current",
    "fill-transparent",
    "fill-black",
    "fill-white",
    "fill-slate-50",
    "fill-slate-100",
    "fill-slate-200",
    "fill-slate-300",
    "fill-slate-400",
    "fill-slate-500",
    "fill-slate-600",
    "fill-slate-700",
    "fill-slate-800",
    "fill-slate-900",
    "fill-slate-950",
    "fill-gray-50",
    "fill-gray-100",
    "fill-gray-200",
    "fill-gray-300",
    "fill-gray-400",
    "fill-gray-500",
    "fill-gray-600",
    "fill-gray-700",
    "fill-gray-800",
    "fill-gray-900",
    "fill-gray-950",
    "fill-zinc-50",
    "fill-zinc-100",
    "fill-zinc-200",
    "fill-zinc-300",
    "fill-zinc-400",
    "fill-zinc-500",
    "fill-zinc-600",
    "fill-zinc-700",
    "fill-zinc-800",
    "fill-zinc-900",
    "fill-zinc-950",
    "fill-neutral-50",
    "fill-neutral-100",
    "fill-neutral-200",
    "fill-neutral-300",
    "fill-neutral-400",
    "fill-neutral-500",
    "fill-neutral-600",
    "fill-neutral-700",
    "fill-neutral-800",
    "fill-neutral-900",
    "fill-neutral-950",
    "fill-stone-50",
    "fill-stone-100",
    "fill-stone-200",
    "fill-stone-300",
    "fill-stone-400",
    "fill-stone-500",
    "fill-stone-600",
    "fill-stone-700",
    "fill-stone-800",
    "fill-stone-900",
    "fill-stone-950",
    "fill-red-50",
    "fill-red-100",
    "fill-red-200",
    "fill-red-300",
    "fill-red-400",
    "fill-red-500",
    "fill-red-600",
    "fill-red-700",
    "fill-red-800",
    "fill-red-900",
    "fill-red-950",
    "fill-orange-50",
    "fill-orange-100",
    "fill-orange-200",
    "fill-orange-300",
    "fill-orange-400",
    "fill-orange-500",
    "fill-orange-600",
    "fill-orange-700",
    "fill-orange-800",
    "fill-orange-900",
    "fill-orange-950",
    "fill-amber-50",
    "fill-amber-100",
    "fill-amber-200",
    "fill-amber-300",
    "fill-amber-400",
    "fill-amber-500",
    "fill-amber-600",
    "fill-amber-700",
    "fill-amber-800",
    "fill-amber-900",
    "fill-amber-950",
    "fill-yellow-50",
    "fill-yellow-100",
    "fill-yellow-200",
    "fill-yellow-300",
    "fill-yellow-400",
    "fill-yellow-500",
    "fill-yellow-600",
    "fill-yellow-700",
    "fill-yellow-800",
    "fill-yellow-900",
    "fill-yellow-950",
    "fill-lime-50",
    "fill-lime-100",
    "fill-lime-200",
    "fill-lime-300",
    "fill-lime-400",
    "fill-lime-500",
    "fill-lime-600",
    "fill-lime-700",
    "fill-lime-800",
    "fill-lime-900",
    "fill-lime-950",
    "fill-green-50",
    "fill-green-100",
    "fill-green-200",
    "fill-green-300",
    "fill-green-400",
    "fill-green-500",
    "fill-green-600",
    "fill-green-700",
    "fill-green-800",
    "fill-green-900",
    "fill-green-950",
    "fill-emerald-50",
    "fill-emerald-100",
    "fill-emerald-200",
    "fill-emerald-300",
    "fill-emerald-400",
    "fill-emerald-500",
    "fill-emerald-600",
    "fill-emerald-700",
    "fill-emerald-800",
    "fill-emerald-900",
    "fill-emerald-950",
    "fill-teal-50",
    "fill-teal-100",
    "fill-teal-200",
    "fill-teal-300",
    "fill-teal-400",
    "fill-teal-500",
    "fill-teal-600",
    "fill-teal-700",
    "fill-teal-800",
    "fill-teal-900",
    "fill-teal-950",
    "fill-cyan-50",
    "fill-cyan-100",
    "fill-cyan-200",
    "fill-cyan-300",
    "fill-cyan-400",
    "fill-cyan-500",
    "fill-cyan-600",
    "fill-cyan-700",
    "fill-cyan-800",
    "fill-cyan-900",
    "fill-cyan-950",
    "fill-sky-50",
    "fill-sky-100",
    "fill-sky-200",
    "fill-sky-300",
    "fill-sky-400",
    "fill-sky-500",
    "fill-sky-600",
    "fill-sky-700",
    "fill-sky-800",
    "fill-sky-900",
    "fill-sky-950",
    "fill-blue-50",
    "fill-blue-100",
    "fill-blue-200",
    "fill-blue-300",
    "fill-blue-400",
    "fill-blue-500",
    "fill-blue-600",
    "fill-blue-700",
    "fill-blue-800",
    "fill-blue-900",
    "fill-blue-950",
    "fill-indigo-50",
    "fill-indigo-100",
    "fill-indigo-200",
    "fill-indigo-300",
    "fill-indigo-400",
    "fill-indigo-500",
    "fill-indigo-600",
    "fill-indigo-700",
    "fill-indigo-800",
    "fill-indigo-900",
    "fill-indigo-950",
    "fill-violet-50",
    "fill-violet-100",
    "fill-violet-200",
    "fill-violet-300",
    "fill-violet-400",
    "fill-violet-500",
    "fill-violet-600",
    "fill-violet-700",
    "fill-violet-800",
    "fill-violet-900",
    "fill-violet-950",
    "fill-purple-50",
    "fill-purple-100",
    "fill-purple-200",
    "fill-purple-300",
    "fill-purple-400",
    "fill-purple-500",
    "fill-purple-600",
    "fill-purple-700",
    "fill-purple-800",
    "fill-purple-900",
    "fill-purple-950",
    "fill-fuchsia-50",
    "fill-fuchsia-100",
    "fill-fuchsia-200",
    "fill-fuchsia-300",
    "fill-fuchsia-400",
    "fill-fuchsia-500",
    "fill-fuchsia-600",
    "fill-fuchsia-700",
    "fill-fuchsia-800",
    "fill-fuchsia-900",
    "fill-fuchsia-950",
    "fill-pink-50",
    "fill-pink-100",
    "fill-pink-200",
    "fill-pink-300",
    "fill-pink-400",
    "fill-pink-500",
    "fill-pink-600",
    "fill-pink-700",
    "fill-pink-800",
    "fill-pink-900",
    "fill-pink-950",
    "fill-rose-50",
    "fill-rose-100",
    "fill-rose-200",
    "fill-rose-300",
    "fill-rose-400",
    "fill-rose-500",
    "fill-rose-600",
    "fill-rose-700",
    "fill-rose-800",
    "fill-rose-900",
    "fill-rose-950",
    "stroke-none",
    "stroke-inherit",
    "stroke-current",
    "stroke-transparent",
    "stroke-black",
    "stroke-white",
    "stroke-slate-50",
    "stroke-slate-100",
    "stroke-slate-200",
    "stroke-slate-300",
    "stroke-slate-400",
    "stroke-slate-500",
    "stroke-slate-600",
    "stroke-slate-700",
    "stroke-slate-800",
    "stroke-slate-900",
    "stroke-slate-950",
    "stroke-gray-50",
    "stroke-gray-100",
    "stroke-gray-200",
    "stroke-gray-300",
    "stroke-gray-400",
    "stroke-gray-500",
    "stroke-gray-600",
    "stroke-gray-700",
    "stroke-gray-800",
    "stroke-gray-900",
    "stroke-gray-950",
    "stroke-zinc-50",
    "stroke-zinc-100",
    "stroke-zinc-200",
    "stroke-zinc-300",
    "stroke-zinc-400",
    "stroke-zinc-500",
    "stroke-zinc-600",
    "stroke-zinc-700",
    "stroke-zinc-800",
    "stroke-zinc-900",
    "stroke-zinc-950",
    "stroke-neutral-50",
    "stroke-neutral-100",
    "stroke-neutral-200",
    "stroke-neutral-300",
    "stroke-neutral-400",
    "stroke-neutral-500",
    "stroke-neutral-600",
    "stroke-neutral-700",
    "stroke-neutral-800",
    "stroke-neutral-900",
    "stroke-neutral-950",
    "stroke-stone-50",
    "stroke-stone-100",
    "stroke-stone-200",
    "stroke-stone-300",
    "stroke-stone-400",
    "stroke-stone-500",
    "stroke-stone-600",
    "stroke-stone-700",
    "stroke-stone-800",
    "stroke-stone-900",
    "stroke-stone-950",
    "stroke-red-50",
    "stroke-red-100",
    "stroke-red-200",
    "stroke-red-300",
    "stroke-red-400",
    "stroke-red-500",
    "stroke-red-600",
    "stroke-red-700",
    "stroke-red-800",
    "stroke-red-900",
    "stroke-red-950",
    "stroke-orange-50",
    "stroke-orange-100",
    "stroke-orange-200",
    "stroke-orange-300",
    "stroke-orange-400",
    "stroke-orange-500",
    "stroke-orange-600",
    "stroke-orange-700",
    "stroke-orange-800",
    "stroke-orange-900",
    "stroke-orange-950",
    "stroke-amber-50",
    "stroke-amber-100",
    "stroke-amber-200",
    "stroke-amber-300",
    "stroke-amber-400",
    "stroke-amber-500",
    "stroke-amber-600",
    "stroke-amber-700",
    "stroke-amber-800",
    "stroke-amber-900",
    "stroke-amber-950",
    "stroke-yellow-50",
    "stroke-yellow-100",
    "stroke-yellow-200",
    "stroke-yellow-300",
    "stroke-yellow-400",
    "stroke-yellow-500",
    "stroke-yellow-600",
    "stroke-yellow-700",
    "stroke-yellow-800",
    "stroke-yellow-900",
    "stroke-yellow-950",
    "stroke-lime-50",
    "stroke-lime-100",
    "stroke-lime-200",
    "stroke-lime-300",
    "stroke-lime-400",
    "stroke-lime-500",
    "stroke-lime-600",
    "stroke-lime-700",
    "stroke-lime-800",
    "stroke-lime-900",
    "stroke-lime-950",
    "stroke-green-50",
    "stroke-green-100",
    "stroke-green-200",
    "stroke-green-300",
    "stroke-green-400",
    "stroke-green-500",
    "stroke-green-600",
    "stroke-green-700",
    "stroke-green-800",
    "stroke-green-900",
    "stroke-green-950",
    "stroke-emerald-50",
    "stroke-emerald-100",
    "stroke-emerald-200",
    "stroke-emerald-300",
    "stroke-emerald-400",
    "stroke-emerald-500",
    "stroke-emerald-600",
    "stroke-emerald-700",
    "stroke-emerald-800",
    "stroke-emerald-900",
    "stroke-emerald-950",
    "stroke-teal-50",
    "stroke-teal-100",
    "stroke-teal-200",
    "stroke-teal-300",
    "stroke-teal-400",
    "stroke-teal-500",
    "stroke-teal-600",
    "stroke-teal-700",
    "stroke-teal-800",
    "stroke-teal-900",
    "stroke-teal-950",
    "stroke-cyan-50",
    "stroke-cyan-100",
    "stroke-cyan-200",
    "stroke-cyan-300",
    "stroke-cyan-400",
    "stroke-cyan-500",
    "stroke-cyan-600",
    "stroke-cyan-700",
    "stroke-cyan-800",
    "stroke-cyan-900",
    "stroke-cyan-950",
    "stroke-sky-50",
    "stroke-sky-100",
    "stroke-sky-200",
    "stroke-sky-300",
    "stroke-sky-400",
    "stroke-sky-500",
    "stroke-sky-600",
    "stroke-sky-700",
    "stroke-sky-800",
    "stroke-sky-900",
    "stroke-sky-950",
    "stroke-blue-50",
    "stroke-blue-100",
    "stroke-blue-200",
    "stroke-blue-300",
    "stroke-blue-400",
    "stroke-blue-500",
    "stroke-blue-600",
    "stroke-blue-700",
    "stroke-blue-800",
    "stroke-blue-900",
    "stroke-blue-950",
    "stroke-indigo-50",
    "stroke-indigo-100",
    "stroke-indigo-200",
    "stroke-indigo-300",
    "stroke-indigo-400",
    "stroke-indigo-500",
    "stroke-indigo-600",
    "stroke-indigo-700",
    "stroke-indigo-800",
    "stroke-indigo-900",
    "stroke-indigo-950",
    "stroke-violet-50",
    "stroke-violet-100",
    "stroke-violet-200",
    "stroke-violet-300",
    "stroke-violet-400",
    "stroke-violet-500",
    "stroke-violet-600",
    "stroke-violet-700",
    "stroke-violet-800",
    "stroke-violet-900",
    "stroke-violet-950",
    "stroke-purple-50",
    "stroke-purple-100",
    "stroke-purple-200",
    "stroke-purple-300",
    "stroke-purple-400",
    "stroke-purple-500",
    "stroke-purple-600",
    "stroke-purple-700",
    "stroke-purple-800",
    "stroke-purple-900",
    "stroke-purple-950",
    "stroke-fuchsia-50",
    "stroke-fuchsia-100",
    "stroke-fuchsia-200",
    "stroke-fuchsia-300",
    "stroke-fuchsia-400",
    "stroke-fuchsia-500",
    "stroke-fuchsia-600",
    "stroke-fuchsia-700",
    "stroke-fuchsia-800",
    "stroke-fuchsia-900",
    "stroke-fuchsia-950",
    "stroke-pink-50",
    "stroke-pink-100",
    "stroke-pink-200",
    "stroke-pink-300",
    "stroke-pink-400",
    "stroke-pink-500",
    "stroke-pink-600",
    "stroke-pink-700",
    "stroke-pink-800",
    "stroke-pink-900",
    "stroke-pink-950",
    "stroke-rose-50",
    "stroke-rose-100",
    "stroke-rose-200",
    "stroke-rose-300",
    "stroke-rose-400",
    "stroke-rose-500",
    "stroke-rose-600",
    "stroke-rose-700",
    "stroke-rose-800",
    "stroke-rose-900",
    "stroke-rose-950",
    "stroke-0",
    "stroke-1",
    "stroke-2",
    "sr-only",
    "not-sr-only",
    "forced-color-adjust-auto",
    "forced-color-adjust-none",
    "transform",
    "transform-none",
    "transform-gpu",
    "transform-cpu",
    "group",
    "peer"
]);

================
File: backend/functions/src/fetch.d.ts
================
declare global {
    export const {
        fetch,
        FormData,
        Headers,
        Request,
        Response,
        File,
    }: typeof import('undici');
    export type { FormData, Headers, Request, RequestInit, Response, RequestInit, File } from 'undici';
}

export { };

================
File: backend/functions/src/index.ts
================
import 'reflect-metadata';
import './shared/lib/doom-domain';
import { initializeApp } from 'firebase-admin/app';
initializeApp();


import { loadModulesDynamically, registry } from './shared';
import path from 'path';
loadModulesDynamically(path.resolve(__dirname, 'cloud-functions'));
loadModulesDynamically(path.resolve(__dirname, 'shared', 'cloud-functions'));

Object.assign(exports, registry.exportAll());
Object.assign(exports, registry.exportGrouped({
    memory: '4GiB',
    timeoutSeconds: 540,
}));
registry.allHandsOnDeck().catch(() => void 0);
registry.title = 'reader';
registry.version = '0.1.0';

process.on('unhandledRejection', (_err) => `Somehow is false alarm in firebase`);

process.on('uncaughtException', (err) => {
    console.log('Uncaught exception', err);

    // Looks like Firebase runtime does not handle error properly.
    // Make sure to quit the process.
    process.nextTick(() => process.exit(1));
    console.error('Uncaught exception, process quit.');
    throw err;
});

================
File: backend/functions/src/types.d.ts
================
declare module 'langdetect' {
    interface DetectionResult {
        lang: string;
        prob: number;
    }

    export function detect(text: string): DetectionResult[];
    export function detectOne(text: string): string | null;
}

declare module 'jsdom' {
    import EventEmitter from 'events';
    export class JSDOM {
        constructor(html: string, options?: any);
        window: typeof window;
    }
    export class VirtualConsole extends EventEmitter{
        constructor();
        sendTo(console: any, options?: any);
    }
}

================
File: backend/functions/.dockerignore
================
node_modules/

================
File: backend/functions/.editorconfig
================
root = true

[*]
end_of_line = lf
charset = utf-8
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true
indent_size = 4
quote_type = single
max_line_length = 120

[*.py]
indent_size = 4

[*.ts]
indent_size = 4

[*.js]
indent_size = 2

[*.vue]
indent_size = 2

[*.*sx]
indent_size = 2

[*.*ml]
indent_size = 2

[*.json]
indent_size = 2

[*.md]
indent_size = 2
trim_trailing_whitespace = false

================
File: backend/functions/.puppeteerrc.cjs
================
const { join } = require('path');

/**
 * @type {import("puppeteer").Configuration}
 */
module.exports = {
    // Changes the cache location for Puppeteer.
    cacheDirectory: join(__dirname, 'node_modules', 'puppeteer', 'walk-around-lame-gcp-build'),
};

================
File: backend/functions/Dockerfile
================
# syntax=docker/dockerfile:1
FROM lwthiker/curl-impersonate:0.6-chrome-slim-bullseye

FROM node:20

RUN apt-get update \
    && apt-get install -y wget gnupg \
    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' \
    && apt-get update \
    && apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 \
    --no-install-recommends \
    && rm -rf /var/lib/apt/lists/*

COPY --from=0 /usr/local/lib/libcurl-impersonate.so /usr/local/lib/libcurl-impersonate.so

RUN groupadd -r jina
RUN useradd -g jina  -G audio,video -m jina
USER jina

WORKDIR /app

COPY package.json package-lock.json ./
RUN npm ci

COPY build ./build
COPY public ./public
COPY licensed ./licensed

RUN rm -rf ~/.config/chromium && mkdir -p ~/.config/chromium

ENV LD_PRELOAD=/usr/local/lib/libcurl-impersonate.so CURL_IMPERSONATE=chrome116 CURL_IMPERSONATE_HEADERS=no
ENV PORT=8080

EXPOSE 3000 3001 8080 8081
ENTRYPOINT ["node"]
CMD [ "build/stand-alone/crawl.js" ]

================
File: backend/functions/integrity-check.cjs
================
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const file = path.resolve(__dirname, 'licensed/GeoLite2-City.mmdb');

if (!fs.existsSync(file)) {
    console.error(`Integrity check failed: ${file} does not exist.`);
    process.exit(1);
}

================
File: backend/functions/package.json
================
{
  "name": "reader",
  "scripts": {
    "lint": "eslint --ext .js,.ts .",
    "build": "node ./integrity-check.cjs && tsc -p .",
    "build:watch": "tsc --watch",
    "build:clean": "rm -rf ./build",
    "shell": "npm run build && firebase functions:shell",
    "emu:stage": "cd .. && tar -czvf firebase-emu-preset.tgz .firebase-emu",
    "emu:reset": "rm -rf ../.firebase-emu && tar -xzf ../firebase-emu-preset.tgz --directory ../",
    "emu:start": "firebase emulators:start --import ../.firebase-emu --export-on-exit",
    "emu:debug": "firebase emulators:start --import ../.firebase-emu --export-on-exit --inspect-functions",
    "emu:debug2": "firebase emulators:start --import ../.firebase-emu --export-on-exit --inspect-functions",
    "emu:kill": "killall java",
    "serve": "npm run build && npm run emu:start",
    "debug": "npm run build && npm run emu:start -- --inspect-functions",
    "from-scratch": "npm run build && rm -rf ../.firebase-emu && firebase emulators:start --export-on-exit",
    "from-preset": "npm run build && npm run emu:reset && npm run emu:start",
    "start": "npm run shell",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log",
    "gcp-build": "node node_modules/puppeteer/install.mjs"
  },
  "engines": {
    "node": "20"
  },
  "main": "build/index.js",
  "dependencies": {
    "@esm2cjs/normalize-url": "^8.0.0",
    "@google-cloud/translate": "^8.2.0",
    "@mozilla/readability": "^0.5.0",
    "@napi-rs/canvas": "^0.1.44",
    "@types/turndown": "^5.0.4",
    "@xmldom/xmldom": "^0.9.3",
    "archiver": "^6.0.1",
    "axios": "^1.3.3",
    "bcrypt": "^5.1.0",
    "busboy": "^1.6.0",
    "civkit": "^0.8.2-03243fe",
    "core-js": "^3.37.1",
    "cors": "^2.8.5",
    "dayjs": "^1.11.9",
    "express": "^4.19.2",
    "firebase-admin": "^12.1.0",
    "firebase-functions": "^6.1.1",
    "htmlparser2": "^9.0.0",
    "jose": "^5.1.0",
    "langdetect": "^0.2.1",
    "linkedom": "^0.18.4",
    "maxmind": "^4.3.18",
    "minio": "^7.1.3",
    "node-libcurl": "^4.1.0",
    "openai": "^4.20.0",
    "pdfjs-dist": "^4.2.67",
    "puppeteer": "^23.3.0",
    "puppeteer-extra": "^3.3.6",
    "puppeteer-extra-plugin-block-resources": "^2.4.3",
    "puppeteer-extra-plugin-page-proxy": "^1.3.1",
    "puppeteer-extra-plugin-stealth": "^2.11.2",
    "puppeteer-page-proxy": "^1.3.0",
    "robots-parser": "^3.0.1",
    "set-cookie-parser": "^2.6.0",
    "stripe": "^11.11.0",
    "tiktoken": "^1.0.16",
    "tld-extract": "^2.1.0",
    "turndown": "^7.1.3",
    "turndown-plugin-gfm": "^1.0.2",
    "undici": "^5.24.0"
  },
  "devDependencies": {
    "@types/archiver": "^5.3.4",
    "@types/bcrypt": "^5.0.0",
    "@types/busboy": "^1.5.4",
    "@types/cors": "^2.8.17",
    "@types/generic-pool": "^3.8.1",
    "@types/node": "^20.14.13",
    "@types/set-cookie-parser": "^2.4.7",
    "@types/xmldom": "^0.1.34",
    "@typescript-eslint/eslint-plugin": "^5.12.0",
    "@typescript-eslint/parser": "^5.12.0",
    "eslint": "^8.9.0",
    "eslint-config-google": "^0.14.0",
    "eslint-plugin-import": "^2.25.4",
    "firebase-functions-test": "^3.0.0",
    "replicate": "^0.16.1",
    "typescript": "^5.5.4"
  },
  "private": true,
  "exports": {
    ".": "./build/index.js"
  }
}

================
File: backend/functions/tsconfig.json
================
{
    "compilerOptions": {
        "module": "node16",

        "noImplicitReturns": true,
        "noUnusedLocals": true,
        "outDir": "build",
        "sourceMap": true,
        "strict": true,
        "allowJs": true,
        "target": "es2022",
        "lib": ["es2022"],
        "skipLibCheck": true,
        "useDefineForClassFields": false,
        "experimentalDecorators": true,
        "emitDecoratorMetadata": true,
        "esModuleInterop": true,
        "noImplicitOverride": true,
    },
    "compileOnSave": true,
    "include": ["src"]
}

================
File: backend/.firebaserc
================
{
  "projects": {
    "default": "reader-6b7dc"
  }
}

================
File: backend/.gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
firebase-debug.log*
firebase-debug.*.log*

# Firebase cache
.firebase/

# Firebase config

# Uncomment this if you'd like others to create their own Firebase project.
# For a team working on the same Firebase project(s), it is recommended to leave
# it commented so all members can deploy to the same project(s) in .firebaserc.
# .firebaserc

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.secret.local

toy*.ts

.DS_Store
build/
.firebase-emu/
*.log
.DS_Store

*.local
.secret.*
licensed/

================
File: backend/firebase.json
================
{
  "firestore": {
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  },
  "functions": [
    {
      "source": "functions",
      "codebase": "default",
      "ignore": [
        "node_modules",
        "src",
        ".git",
        "*.log",
        "*.local",
        ".secret.*",
        ".firebase-emu"
      ],
      "predeploy": [
        "npm --prefix \"$RESOURCE_DIR\" run build:clean",
        "npm --prefix \"$RESOURCE_DIR\" run build"
      ]
    }
  ],
  "storage": {
    "rules": "storage.rules"
  },
  "emulators": {
    "ui": {
      "enabled": true
    },
    "singleProjectMode": true,
    "functions": {
      "port": 5001
    },
    "firestore": {
      "port": 9098
    },
    "storage": {
      "port": 9097
    }
  }
}

================
File: backend/firestore.indexes.json
================
{
  "indexes": [
    {
      "collectionGroup": "prompts",
      "queryScope": "COLLECTION_GROUP",
      "fields": [
        {
          "fieldPath": "id",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "isPublic",
          "order": "ASCENDING"
        }
      ]
    }
  ],
  "fieldOverrides": []
}

================
File: backend/firestore.rules
================
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // match /questions/{document=**} {
    //   allow read: if request.auth != null
    // }

    // match /answers/{userId}/profiles/default {
    //   allow read, write: if request.auth != null && request.auth.uid == userId
    // }

    match /credits/{userId}/{document=**} {
      allow read: if request.auth != null && request.auth.uid == userId
    }

    match /users/{userId}/prompts/{document=**} {
      allow read: if request.auth != null && request.auth.uid == userId
    }

    // match /users/{userId}/profiles/{document=**} {
    //   allow read: if request.auth != null && request.auth.uid == userId
    // }

    match /users/{userId}/creditHistory/{document=**} {
      allow read: if request.auth != null && request.auth.uid == userId
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}

================
File: backend/storage.rules
================
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}

================
File: .gitignore
================
node_modules/
.DS_Store
/package-lock.json
backend/functions/test.js

================
File: .gitmodules
================
[submodule "thinapps-shared"]
	path = thinapps-shared
	url = git@github.com:jina-ai/thinapps-shared.git

================
File: LICENSE
================
Copyright 2020-2024 Jina AI Limited.  All rights reserved.


                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   Copyright 2020-2021 Jina AI Limited

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

================
File: package.json
================
{
    "name": "reader",
    "version": "1.0.0",
    "description": "### Prerequisite - Node v18 (The build fails for Node version >18) - Yarn - Firebase CLI (`npm install -g firebase-tools`)",
    "main": "index.js",
    "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1"
    },
    "author": "",
    "license": "ISC",
    "devDependencies": {
        "firebase-tools": "^13.6.2",
        "typescript": "^5.1.6"
    }
}

================
File: README.md
================
# Reader

Your LLMs deserve better input.

Reader does two things:
- **Read**: It converts any URL to an **LLM-friendly** input with `https://r.jina.ai/https://your.url`. Get improved output for your agent and RAG systems at no cost.
- **Search**: It searches the web for a given query with `https://s.jina.ai/your+query`. This allows your LLMs to access the latest world knowledge from the web.

Check out [the live demo](https://jina.ai/reader#demo)

Or just visit these URLs (**Read**) https://r.jina.ai/https://github.com/jina-ai/reader, (**Search**) https://s.jina.ai/Who%20will%20win%202024%20US%20presidential%20election%3F and see yourself.

> Feel free to use Reader API in production. It is free, stable and scalable. We are maintaining it actively as one of the core products of Jina AI. [Check out rate limit](https://jina.ai/reader#pricing)

<img width="973" alt="image" src="https://github.com/jina-ai/reader/assets/2041322/2067c7a2-c12e-4465-b107-9a16ca178d41">
<img width="973" alt="image" src="https://github.com/jina-ai/reader/assets/2041322/675ac203-f246-41c2-b094-76318240159f">


## Updates

- **2024-10-08**: Introduced an `adaptive crawler`. It can recursively crawl the website and extract the most relevant pages for a given webpage.
- **2024-07-15**: To restrict the results of `s.jina.ai` to certain domain/website, you can set e.g. `site=jina.ai` in the query parameters, which enables in-site search. For more options, [try our updated live-demo](https://jina.ai/reader/#apiform).
- **2024-07-01**: We have resolved a DDoS attack and other traffic abusing since June 27th. We also found a bug introduced on June 28th which may cause higher latency for some websites. The attack and the bug have been solved; if you have experienced high latency of r.jina.ai between June 27th-30th, it should back to normal now.
- **2024-05-30**: Reader can now read abitrary PDF from any URL! Check out [this PDF result from NASA.gov](https://r.jina.ai/https://www.nasa.gov/wp-content/uploads/2023/01/55583main_vision_space_exploration2.pdf) vs [the original](https://www.nasa.gov/wp-content/uploads/2023/01/55583main_vision_space_exploration2.pdf).
- **2024-05-15**: We introduced a new endpoint `s.jina.ai` that searches on the web and return top-5 results, each in a LLM-friendly format. [Read more about this new feature here](https://jina.ai/news/jina-reader-for-search-grounding-to-improve-factuality-of-llms).
- **2024-05-08**: Image caption is off by default for better latency. To turn it on, set `x-with-generated-alt: true` in the request header.
- **2024-05-03**: We finally resolved a DDoS attack since April 29th. Now our API is much more reliable and scalable than ever!
- **2024-04-24**: You now have more fine-grained control over Reader API [using headers](#using-request-headers), e.g. forwarding cookies, using HTTP proxy.
- **2024-04-15**: Reader now supports image reading! It captions all images at the specified URL and adds `Image [idx]: [caption]` as an alt tag (if they initially lack one). This enables downstream LLMs to interact with the images in reasoning, summarizing etc. [See example here](https://x.com/JinaAI_/status/1780094402071023926).

## Usage

### Using `r.jina.ai` for single URL fetching
Simply prepend `https://r.jina.ai/` to any URL. For example, to convert the URL `https://en.wikipedia.org/wiki/Artificial_intelligence` to an LLM-friendly input, use the following URL:

[https://r.jina.ai/https://en.wikipedia.org/wiki/Artificial_intelligence](https://r.jina.ai/https://en.wikipedia.org/wiki/Artificial_intelligence)

### [Using `r.jina.ai` for a full website fetching (Google Colab)](https://colab.research.google.com/drive/1uoBy6_7BhxqpFQ45vuhgDDDGwstaCt4P#scrollTo=5LQjzJiT9ewT)

### Using `s.jina.ai` for web search
Simply prepend `https://s.jina.ai/` to your search query. Note that if you are using this in the code, make sure to encode your search query first, e.g. if your query is `Who will win 2024 US presidential election?` then your url should look like:

[https://s.jina.ai/Who%20will%20win%202024%20US%20presidential%20election%3F](https://s.jina.ai/Who%20will%20win%202024%20US%20presidential%20election%3F)

Behind the scenes, Reader searches the web, fetches the top 5 results, visits each URL, and applies `r.jina.ai` to it. This is different from many `web search function-calling` in agent/RAG frameworks, which often return only the title, URL, and description provided by the search engine API. If you want to read one result more deeply, you have to fetch the content yourself from that URL. With Reader, `http://s.jina.ai` automatically fetches the content from the top 5 search result URLs for you (reusing the tech stack behind `http://r.jina.ai`). This means you don't have to handle browser rendering, blocking, or any issues related to JavaScript and CSS yourself.

### Using `s.jina.ai` for in-site search
Simply specify `site` in the query parameters such as:

```bash
curl 'https://s.jina.ai/When%20was%20Jina%20AI%20founded%3F?site=jina.ai&site=github.com'
```

### [Interactive Code Snippet Builder](https://jina.ai/reader#apiform)

We highly recommend using the code builder to explore different parameter combinations of the Reader API.

<a href="https://jina.ai/reader#apiform"><img width="973" alt="image" src="https://github.com/jina-ai/reader/assets/2041322/a490fd3a-1c4c-4a3f-a95a-c481c2a8cc8f"></a>


### Using request headers

As you have already seen above, one can control the behavior of the Reader API using request headers. Here is a complete list of supported headers.

- You can enable the image caption feature via the `x-with-generated-alt: true` header.
- You can ask the Reader API to forward cookies settings via the `x-set-cookie` header.
  - Note that requests with cookies will not be cached.
- You can bypass `readability` filtering via the `x-respond-with` header, specifically:
  - `x-respond-with: markdown` returns markdown *without* going through `reability`
  - `x-respond-with: html` returns `documentElement.outerHTML`
  - `x-respond-with: text` returns `document.body.innerText`
  - `x-respond-with: screenshot` returns the URL of the webpage's screenshot
- You can specify a proxy server via the `x-proxy-url` header.
- You can customize cache tolerance via the `x-cache-tolerance` header (integer in seconds).
- You can bypass the cached page (lifetime 3600s) via the `x-no-cache: true` header (equivalent of `x-cache-tolerance: 0`).
- If you already know the HTML structure of your target page, you may specify `x-target-selector` or `x-wait-for-selector` to direct the Reader API to focus on a specific part of the page.
  - By setting `x-target-selector` header to a CSS selector, the Reader API return the content within the matched element, instead of the full HTML. Setting this header is useful when the automatic content extraction fails to capture the desired content and you can manually select the correct target.
  - By setting `x-wait-for-selector` header to a CSS selector, the Reader API will wait until the matched element is rendered before returning the content. If you already specified `x-wait-for-selector`, this header can be omitted if you plan to wait for the same element.

### Using `r.jina.ai` for single page application (SPA) fetching
Many websites nowadays rely on JavaScript frameworks and client-side rendering. Usually known as Single Page Application (SPA). Thanks to [Puppeteer](https://github.com/puppeteer/puppeteer) and headless Chrome browser, Reader natively supports fetching these websites. However, due to specific approach some SPA are developed, there may be some extra precautions to take. 

#### SPAs with hash-based routing
By definition of the web standards, content come after `#` in a URL is not sent to the server. To mitigate this issue, use `POST` method with `url` parameter in body.

```bash
curl -X POST 'https://r.jina.ai/' -d 'url=https://example.com/#/route' 
```

#### SPAs with preloading contents
Some SPAs, or even some websites that are not strictly SPAs, may show preload contents before later loading the main content dynamically. In this case, Reader may be capturing the preload content instead of the main content. To mitigate this issue, here are some possible solutions:

##### Specifying `x-timeout` 
When timeout is explicitly specified, Reader will not attempt to return early and will wait for network idle until the timeout is reached. This is useful when the target website will eventually come to a network idle. 

```bash
curl 'https://example.com/' -H 'x-timeout: 30'
```

##### Specifying `x-wait-for-selector` 
When wait-for-selector is explicitly specified, Reader will wait for the appearance of the specified CSS selector until timeout is reached. This is useful when you know exactly what element to wait for. 

```bash
curl 'https://example.com/' -H 'x-wait-for-selector: #content'
```

### Streaming mode

Streaming mode is useful when you find that the standard mode provides an incomplete result. This is because the Reader will wait a bit longer until the page is *stablely* rendered. Use the accept-header to toggle the streaming mode:

```bash
curl -H "Accept: text/event-stream" https://r.jina.ai/https://en.m.wikipedia.org/wiki/Main_Page
```

The data comes in a stream; each subsequent chunk contains more complete information. **The last chunk should provide the most complete and final result.** If you come from LLMs, please note that it is a different behavior than the LLMs' text-generation streaming.

For example, compare these two curl commands below. You can see streaming one gives you complete information at last, whereas standard mode does not. This is because the content loading on this particular site is triggered by some js *after* the page is fully loaded, and standard mode returns the page "too soon".
```bash
curl -H 'x-no-cache: true' https://access.redhat.com/security/cve/CVE-2023-45853
curl -H "Accept: text/event-stream" -H 'x-no-cache: true' https://r.jina.ai/https://access.redhat.com/security/cve/CVE-2023-45853
```

> Note: `-H 'x-no-cache: true'` is used only for demonstration purposes to bypass the cache.

Streaming mode is also useful if your downstream LLM/agent system requires immediate content delivery or needs to process data in chunks to interleave I/O and LLM processing times. This allows for quicker access and more efficient data handling:

```text
Reader API:  streamContent1 ----> streamContent2 ----> streamContent3 ---> ... 
                          |                    |                     |
                          v                    |                     |
Your LLM:                 LLM(streamContent1)  |                     |
                                               v                     |
                                               LLM(streamContent2)   |
                                                                     v
                                                                     LLM(streamContent3)
```

Note that in terms of completeness: `... > streamContent3 > streamContent2 > streamContent1`, each subsequent chunk contains more complete information.

### JSON mode

This is still very early and the result is not really a "useful" JSON. It contains three fields `url`, `title` and `content` only. Nonetheless, you can use accept-header to control the output format:
```bash
curl -H "Accept: application/json" https://r.jina.ai/https://en.m.wikipedia.org/wiki/Main_Page
```

JSON mode is probably more useful in `s.jina.ai` than `r.jina.ai`. For `s.jina.ai` with JSON mode, it returns 5 results in a list, each in the structure of `{'title', 'content', 'url'}`.

### Generated alt

All images in that page that lack `alt` tag can be auto-captioned by a VLM (vision langauge model) and formatted as `!(Image [idx]: [VLM_caption])[img_URL]`. This should give your downstream text-only LLM *just enough* hints to include those images into reasoning, selecting, and summarization. Use the x-with-generated-alt header to toggle the streaming mode:

```bash
curl -H "X-With-Generated-Alt: true" https://r.jina.ai/https://en.m.wikipedia.org/wiki/Main_Page
```

## Install

You will need the following tools to run the project:
- Node v18 (The build fails for Node version >18)
- Firebase CLI (`npm install -g firebase-tools`)

For backend, go to the `backend/functions` directory and install the npm dependencies.

```bash
git clone git@github.com:jina-ai/reader.git
cd backend/functions
npm install
```

## What is `thinapps-shared` submodule?

You might notice a reference to `thinapps-shared` submodule, an internal package we use to share code across our products. While it’s not open-sourced and isn't integral to the Reader's functions, it mainly helps with decorators, logging, secrets management, etc. Feel free to ignore it for now.

That said, this is *the single codebase* behind `https://r.jina.ai`, so everytime we commit here, we will deploy the new version to the `https://r.jina.ai`.

## Having trouble on some websites?
Please raise an issue with the URL you are having trouble with. We will look into it and try to fix it.

## License
Reader is backed by [Jina AI](https://jina.ai) and licensed under [Apache-2.0](./LICENSE).
